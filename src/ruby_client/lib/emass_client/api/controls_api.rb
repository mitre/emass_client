=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class ControlsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get control information in a system for one or many controls
    # Returns system control information for matching `systemId` path parameter
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :acronyms **Acronym**: The system acronym(s) being queried (single value or comma delimited values). (default to 'PM-6')
    # @return [ControlsResponseGet]
    def get_system_controls(system_id, opts = {})
      data, _status_code, _headers = get_system_controls_with_http_info(system_id, opts)
      data
    end

    # Get control information in a system for one or many controls
    # Returns system control information for matching &#x60;systemId&#x60; path parameter
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :acronyms **Acronym**: The system acronym(s) being queried (single value or comma delimited values). (default to 'PM-6')
    # @return [Array<(ControlsResponseGet, Integer, Hash)>] ControlsResponseGet data, response status code and response headers
    def get_system_controls_with_http_info(system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.get_system_controls ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling ControlsApi.get_system_controls"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/controls'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'acronyms'] = opts[:'acronyms'] if !opts[:'acronyms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ControlsResponseGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"ControlsApi.get_system_controls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#get_system_controls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update control information in a system for one or many controls
    # Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param controls_required_fields [Array<ControlsRequiredFields>] Example request body for updating an existing control for a given system.
    # @param [Hash] opts the optional parameters
    # @return [ControlsResponsePut]
    def update_control_by_system_id(system_id, controls_required_fields, opts = {})
      data, _status_code, _headers = update_control_by_system_id_with_http_info(system_id, controls_required_fields, opts)
      data
    end

    # Update control information in a system for one or many controls
    # Update a Control for given &#x60;systemId&#x60;&lt;br&gt;  **Request Body Required Fields** - &#x60;acronym&#x60; - &#x60;responsibleEntities&#x60; - &#x60;controlDesignation&#x60; - &#x60;estimatedCompletionDate&#x60; - &#x60;implementationNarrative&#x60;  &lt;br&gt; **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (&#x60;implementationStatus&#x60;) field value:&lt;br&gt;  &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;&lt;th&gt;&lt;b&gt;Status&lt;/b&gt;&lt;/th&gt;&lt;th&gt;&lt;b&gt;Required Fields&lt;/b&gt;&lt;/th&gt;&lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;&lt;td&gt;&lt;b&gt;Planned&lt;/b&gt; or &lt;b&gt;Implemented&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;     &lt;tr&gt;&lt;td&gt;&lt;b&gt;Not Applicable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;naJustification&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;     &lt;tr&gt;&lt;td&gt;&lt;b&gt;Manually Inherited&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is &#x60;Inherited&#x60;. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - &#x60;naJustification&#x60;,&#x60;responsibleEntities&#x60;,&#x60;implementationNarrative&#x60;,&#x60;slcmCriticality&#x60;   - &#x60;slcmFrequency&#x60;,&#x60;slcmMethod&#x60;,&#x60;slcmReporting&#x60;,&#x60;slcmTracking&#x60;,&#x60;slcmComments&#x60; - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param controls_required_fields [Array<ControlsRequiredFields>] Example request body for updating an existing control for a given system.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ControlsResponsePut, Integer, Hash)>] ControlsResponsePut data, response status code and response headers
    def update_control_by_system_id_with_http_info(system_id, controls_required_fields, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlsApi.update_control_by_system_id ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling ControlsApi.update_control_by_system_id"
      end
      # verify the required parameter 'controls_required_fields' is set
      if @api_client.config.client_side_validation && controls_required_fields.nil?
        fail ArgumentError, "Missing the required parameter 'controls_required_fields' when calling ControlsApi.update_control_by_system_id"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/controls'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(controls_required_fields)

      # return_type
      return_type = opts[:debug_return_type] || 'ControlsResponsePut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"ControlsApi.update_control_by_system_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlsApi#update_control_by_system_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
