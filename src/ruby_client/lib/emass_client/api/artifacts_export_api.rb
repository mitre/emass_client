=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](https://mitre.github.io/emass_client/docs/eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class ArtifactsExportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the file of an artifact in a system
    # <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param filename [String] **File Name**: The file name (to include file-extension).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :compress **Compress File**: Determines if returned file is compressed. (default to true)
    # @return [File]
    def get_system_artifacts_export(system_id, filename, opts = {})
      data, _status_code, _headers = get_system_artifacts_export_with_http_info(system_id, filename, opts)
      data
    end

    # Get the file of an artifact in a system
    # &lt;strong&gt;Sample Responce&lt;/strong&gt;&lt;br&gt;  Binary file associated with given filename.&lt;br&gt;  If &#x60;compress&#x60; parameter is specified, zip archive of binary file associated with given filename.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param filename [String] **File Name**: The file name (to include file-extension).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :compress **Compress File**: Determines if returned file is compressed. (default to true)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_system_artifacts_export_with_http_info(system_id, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactsExportApi.get_system_artifacts_export ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling ArtifactsExportApi.get_system_artifacts_export"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling ArtifactsExportApi.get_system_artifacts_export"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/artifacts-export'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filename'] = filename
      query_params[:'compress'] = opts[:'compress'] if !opts[:'compress'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"ArtifactsExportApi.get_system_artifacts_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactsExportApi#get_system_artifacts_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
