=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](https://mitre.github.io/emass_client/docs/eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class SystemsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get system information for a specific system
    # Returns the system matching provided parameters
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :policy **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems. (default to 'rmf')
    # @return [SystemResponse]
    def get_system(system_id, opts = {})
      data, _status_code, _headers = get_system_with_http_info(system_id, opts)
      data
    end

    # Get system information for a specific system
    # Returns the system matching provided parameters
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :policy **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems. (default to 'rmf')
    # @return [Array<(SystemResponse, Integer, Hash)>] SystemResponse data, response status code and response headers
    def get_system_with_http_info(system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemsApi.get_system ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling SystemsApi.get_system"
      end
      allowable_values = ["diacap", "rmf", "reporting", "unknown_default_open_api"]
      if @api_client.config.client_side_validation && opts[:'policy'] && !allowable_values.include?(opts[:'policy'])
        fail ArgumentError, "invalid value for \"policy\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy'] = opts[:'policy'] if !opts[:'policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SystemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"SystemsApi.get_system",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemsApi#get_system\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get system information
    # Returns all system(s) that match the query parameters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coams_id **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
    # @option opts [String] :ditpr_id **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
    # @option opts [Boolean] :include_decommissioned **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems. (default to true)
    # @option opts [Boolean] :include_ditpr_metrics **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics. (default to false)
    # @option opts [String] :policy **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems. (default to 'rmf')
    # @option opts [String] :registration_type **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc  (default to 'regular')
    # @option opts [Boolean] :reports_for_scorecard **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard. (default to true)
    # @return [SystemsResponse]
    def get_systems(opts = {})
      data, _status_code, _headers = get_systems_with_http_info(opts)
      data
    end

    # Get system information
    # Returns all system(s) that match the query parameters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coams_id **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
    # @option opts [String] :ditpr_id **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
    # @option opts [Boolean] :include_decommissioned **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems. (default to true)
    # @option opts [Boolean] :include_ditpr_metrics **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics. (default to false)
    # @option opts [String] :policy **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems. (default to 'rmf')
    # @option opts [String] :registration_type **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc  (default to 'regular')
    # @option opts [Boolean] :reports_for_scorecard **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard. (default to true)
    # @return [Array<(SystemsResponse, Integer, Hash)>] SystemsResponse data, response status code and response headers
    def get_systems_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemsApi.get_systems ...'
      end
      allowable_values = ["diacap", "rmf", "reporting", "unknown_default_open_api"]
      if @api_client.config.client_side_validation && opts[:'policy'] && !allowable_values.include?(opts[:'policy'])
        fail ArgumentError, "invalid value for \"policy\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/systems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'coamsId'] = opts[:'coams_id'] if !opts[:'coams_id'].nil?
      query_params[:'ditprId'] = opts[:'ditpr_id'] if !opts[:'ditpr_id'].nil?
      query_params[:'includeDecommissioned'] = opts[:'include_decommissioned'] if !opts[:'include_decommissioned'].nil?
      query_params[:'includeDitprMetrics'] = opts[:'include_ditpr_metrics'] if !opts[:'include_ditpr_metrics'].nil?
      query_params[:'policy'] = opts[:'policy'] if !opts[:'policy'].nil?
      query_params[:'registrationType'] = opts[:'registration_type'] if !opts[:'registration_type'].nil?
      query_params[:'reportsForScorecard'] = opts[:'reports_for_scorecard'] if !opts[:'reports_for_scorecard'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SystemsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"SystemsApi.get_systems",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemsApi#get_systems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
