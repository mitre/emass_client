=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](https://mitre.github.io/emass_client/docs/eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class CACApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Submit control to second role of CAC
    # **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param request_body [Array<Object>] Example request body for adding control(s) to second role of CAC
    # @param [Hash] opts the optional parameters
    # @return [CacResponsePost]
    def add_system_cac(system_id, request_body, opts = {})
      data, _status_code, _headers = add_system_cac_with_http_info(system_id, request_body, opts)
      data
    end

    # Submit control to second role of CAC
    # **Request Body Required Fields** - &#x60;controlAcronym&#x60; - &#x60;comments&#x60;  **NOTES:** - Comments &#x60;comments&#x60; are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param request_body [Array<Object>] Example request body for adding control(s) to second role of CAC
    # @param [Hash] opts the optional parameters
    # @return [Array<(CacResponsePost, Integer, Hash)>] CacResponsePost data, response status code and response headers
    def add_system_cac_with_http_info(system_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CACApi.add_system_cac ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling CACApi.add_system_cac"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling CACApi.add_system_cac"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/approval/cac'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CacResponsePost'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"CACApi.add_system_cac",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CACApi#add_system_cac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get location of one or many controls in CAC
    # Returns the location of a system's package in the Control Approval Chain (CAC) for matching `systemId` path parameter
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :control_acronyms **Control Acronym**: Filter query by given system acronym (single value or comma separated).
    # @return [CacResponseGet]
    def get_system_cac(system_id, opts = {})
      data, _status_code, _headers = get_system_cac_with_http_info(system_id, opts)
      data
    end

    # Get location of one or many controls in CAC
    # Returns the location of a system&#39;s package in the Control Approval Chain (CAC) for matching &#x60;systemId&#x60; path parameter
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :control_acronyms **Control Acronym**: Filter query by given system acronym (single value or comma separated).
    # @return [Array<(CacResponseGet, Integer, Hash)>] CacResponseGet data, response status code and response headers
    def get_system_cac_with_http_info(system_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CACApi.get_system_cac ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling CACApi.get_system_cac"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/approval/cac'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'controlAcronyms'] = opts[:'control_acronyms'] if !opts[:'control_acronyms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CacResponseGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"CACApi.get_system_cac",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CACApi#get_system_cac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
