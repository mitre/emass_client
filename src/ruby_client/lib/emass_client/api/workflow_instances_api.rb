=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class WorkflowInstancesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get workflow instances in a site
    # View detailed information on all active and historical workflows filtered by provided parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_comments **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.  (default to true)
    # @option opts [Boolean] :include_decommission_systems **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.  (default to false)
    # @option opts [Integer] :page_index **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances.  (default to 0)
    # @option opts [String] :since_date **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made. 
    # @option opts [String] :status **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.  (default to 'all')
    # @return [WorkflowInstancesResponseGet]
    def get_system_workflow_instances(opts = {})
      data, _status_code, _headers = get_system_workflow_instances_with_http_info(opts)
      data
    end

    # Get workflow instances in a site
    # View detailed information on all active and historical workflows filtered by provided parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_comments **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.  (default to true)
    # @option opts [Boolean] :include_decommission_systems **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.  (default to false)
    # @option opts [Integer] :page_index **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances.  (default to 0)
    # @option opts [String] :since_date **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made. 
    # @option opts [String] :status **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.  (default to 'all')
    # @return [Array<(WorkflowInstancesResponseGet, Integer, Hash)>] WorkflowInstancesResponseGet data, response status code and response headers
    def get_system_workflow_instances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowInstancesApi.get_system_workflow_instances ...'
      end
      allowable_values = ["active", "inactive", "all", "unknown_default_open_api"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/workflows/instances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeComments'] = opts[:'include_comments'] if !opts[:'include_comments'].nil?
      query_params[:'includeDecommissionSystems'] = opts[:'include_decommission_systems'] if !opts[:'include_decommission_systems'].nil?
      query_params[:'pageIndex'] = opts[:'page_index'] if !opts[:'page_index'].nil?
      query_params[:'sinceDate'] = opts[:'since_date'] if !opts[:'since_date'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowInstancesResponseGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"WorkflowInstancesApi.get_system_workflow_instances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowInstancesApi#get_system_workflow_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get workflow instance by ID
    # View detailed historical workflow information for `workflowInstanceId`.
    # @param workflow_instance_id [Integer] **Workflow Instance Id**: The unique workflow definition identifier.
    # @param [Hash] opts the optional parameters
    # @return [WorkflowInstanceResponseGet]
    def get_system_workflow_instances_by_workflow_instance_id(workflow_instance_id, opts = {})
      data, _status_code, _headers = get_system_workflow_instances_by_workflow_instance_id_with_http_info(workflow_instance_id, opts)
      data
    end

    # Get workflow instance by ID
    # View detailed historical workflow information for &#x60;workflowInstanceId&#x60;.
    # @param workflow_instance_id [Integer] **Workflow Instance Id**: The unique workflow definition identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkflowInstanceResponseGet, Integer, Hash)>] WorkflowInstanceResponseGet data, response status code and response headers
    def get_system_workflow_instances_by_workflow_instance_id_with_http_info(workflow_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowInstancesApi.get_system_workflow_instances_by_workflow_instance_id ...'
      end
      # verify the required parameter 'workflow_instance_id' is set
      if @api_client.config.client_side_validation && workflow_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_instance_id' when calling WorkflowInstancesApi.get_system_workflow_instances_by_workflow_instance_id"
      end
      # resource path
      local_var_path = '/api/workflows/instances/{workflowInstanceId}'.sub('{' + 'workflowInstanceId' + '}', CGI.escape(workflow_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowInstanceResponseGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"WorkflowInstancesApi.get_system_workflow_instances_by_workflow_instance_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowInstancesApi#get_system_workflow_instances_by_workflow_instance_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
