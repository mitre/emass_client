=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](https://mitre.github.io/emass_client/docs/eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class MilestonesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add milestones to one or many POA&M items in a system
    # Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param request_body [Array<Object>] Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
    # @param [Hash] opts the optional parameters
    # @return [MilestoneResponsePost]
    def add_milestone_by_system_id_and_poam_id(system_id, poam_id, request_body, opts = {})
      data, _status_code, _headers = add_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, opts)
      data
    end

    # Add milestones to one or many POA&amp;M items in a system
    # Adds a milestone for given &#x60;systemId&#x60; and &#x60;poamId&#x60; path parameters  **Request Body Required Fields** - &#x60;description&#x60; - &#x60;scheduledCompletionDate&#x60;
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param request_body [Array<Object>] Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MilestoneResponsePost, Integer, Hash)>] MilestoneResponsePost data, response status code and response headers
    def add_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MilestonesApi.add_milestone_by_system_id_and_poam_id ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling MilestonesApi.add_milestone_by_system_id_and_poam_id"
      end
      # verify the required parameter 'poam_id' is set
      if @api_client.config.client_side_validation && poam_id.nil?
        fail ArgumentError, "Missing the required parameter 'poam_id' when calling MilestonesApi.add_milestone_by_system_id_and_poam_id"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling MilestonesApi.add_milestone_by_system_id_and_poam_id"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/poams/{poamId}/milestones'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s)).sub('{' + 'poamId' + '}', CGI.escape(poam_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MilestoneResponsePost'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"MilestonesApi.add_milestone_by_system_id_and_poam_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MilestonesApi#add_milestone_by_system_id_and_poam_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove milestones in a system for one or many POA&M items
    # Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param milestones_request_delete_body_inner [Array<MilestonesRequestDeleteBodyInner>] Delete the given Milestone Id
    # @param [Hash] opts the optional parameters
    # @return [MilestoneResponseDelete]
    def delete_milestone(system_id, poam_id, milestones_request_delete_body_inner, opts = {})
      data, _status_code, _headers = delete_milestone_with_http_info(system_id, poam_id, milestones_request_delete_body_inner, opts)
      data
    end

    # Remove milestones in a system for one or many POA&amp;M items
    # Remove the POA&amp;M matching &#x60;systemId&#x60; and &#x60;poamId&#x60; for path parameters and &#x60;milstoneId&#x60; provide in the Request Body  **NOTE**&lt;br&gt; To delete a milestone the record must be inactive by having the field isActive set to false (&#x60;isActive&#x3D;false&#x60;).
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param milestones_request_delete_body_inner [Array<MilestonesRequestDeleteBodyInner>] Delete the given Milestone Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(MilestoneResponseDelete, Integer, Hash)>] MilestoneResponseDelete data, response status code and response headers
    def delete_milestone_with_http_info(system_id, poam_id, milestones_request_delete_body_inner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MilestonesApi.delete_milestone ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling MilestonesApi.delete_milestone"
      end
      # verify the required parameter 'poam_id' is set
      if @api_client.config.client_side_validation && poam_id.nil?
        fail ArgumentError, "Missing the required parameter 'poam_id' when calling MilestonesApi.delete_milestone"
      end
      # verify the required parameter 'milestones_request_delete_body_inner' is set
      if @api_client.config.client_side_validation && milestones_request_delete_body_inner.nil?
        fail ArgumentError, "Missing the required parameter 'milestones_request_delete_body_inner' when calling MilestonesApi.delete_milestone"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/poams/{poamId}/milestones'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s)).sub('{' + 'poamId' + '}', CGI.escape(poam_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(milestones_request_delete_body_inner)

      # return_type
      return_type = opts[:debug_return_type] || 'MilestoneResponseDelete'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"MilestonesApi.delete_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MilestonesApi#delete_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get milestones in one or many POA&M items in a system
    # Returns system containing milestones for matching parameters.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheduled_completion_date_start **Date Started**: Filter query by the scheduled completion start date (Unix date format).
    # @option opts [String] :scheduled_completion_date_end **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
    # @return [MilestoneResponseGet]
    def get_system_milestones_by_poam_id(system_id, poam_id, opts = {})
      data, _status_code, _headers = get_system_milestones_by_poam_id_with_http_info(system_id, poam_id, opts)
      data
    end

    # Get milestones in one or many POA&amp;M items in a system
    # Returns system containing milestones for matching parameters.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheduled_completion_date_start **Date Started**: Filter query by the scheduled completion start date (Unix date format).
    # @option opts [String] :scheduled_completion_date_end **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
    # @return [Array<(MilestoneResponseGet, Integer, Hash)>] MilestoneResponseGet data, response status code and response headers
    def get_system_milestones_by_poam_id_with_http_info(system_id, poam_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MilestonesApi.get_system_milestones_by_poam_id ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling MilestonesApi.get_system_milestones_by_poam_id"
      end
      # verify the required parameter 'poam_id' is set
      if @api_client.config.client_side_validation && poam_id.nil?
        fail ArgumentError, "Missing the required parameter 'poam_id' when calling MilestonesApi.get_system_milestones_by_poam_id"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/poams/{poamId}/milestones'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s)).sub('{' + 'poamId' + '}', CGI.escape(poam_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scheduledCompletionDateStart'] = opts[:'scheduled_completion_date_start'] if !opts[:'scheduled_completion_date_start'].nil?
      query_params[:'scheduledCompletionDateEnd'] = opts[:'scheduled_completion_date_end'] if !opts[:'scheduled_completion_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MilestoneResponseGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"MilestonesApi.get_system_milestones_by_poam_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MilestonesApi#get_system_milestones_by_poam_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get milestone by ID in POA&M item in a system
    # Returns systems containing milestones for matching parameters.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param milestone_id [Integer] **Milestone Id**: The unique milestone record identifier.
    # @param [Hash] opts the optional parameters
    # @return [MilestoneResponseGetMilestone]
    def get_system_milestones_by_poam_id_and_milestone_id(system_id, poam_id, milestone_id, opts = {})
      data, _status_code, _headers = get_system_milestones_by_poam_id_and_milestone_id_with_http_info(system_id, poam_id, milestone_id, opts)
      data
    end

    # Get milestone by ID in POA&amp;M item in a system
    # Returns systems containing milestones for matching parameters.
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param milestone_id [Integer] **Milestone Id**: The unique milestone record identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MilestoneResponseGetMilestone, Integer, Hash)>] MilestoneResponseGetMilestone data, response status code and response headers
    def get_system_milestones_by_poam_id_and_milestone_id_with_http_info(system_id, poam_id, milestone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MilestonesApi.get_system_milestones_by_poam_id_and_milestone_id ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling MilestonesApi.get_system_milestones_by_poam_id_and_milestone_id"
      end
      # verify the required parameter 'poam_id' is set
      if @api_client.config.client_side_validation && poam_id.nil?
        fail ArgumentError, "Missing the required parameter 'poam_id' when calling MilestonesApi.get_system_milestones_by_poam_id_and_milestone_id"
      end
      # verify the required parameter 'milestone_id' is set
      if @api_client.config.client_side_validation && milestone_id.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_id' when calling MilestonesApi.get_system_milestones_by_poam_id_and_milestone_id"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s)).sub('{' + 'poamId' + '}', CGI.escape(poam_id.to_s)).sub('{' + 'milestoneId' + '}', CGI.escape(milestone_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MilestoneResponseGetMilestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"MilestonesApi.get_system_milestones_by_poam_id_and_milestone_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MilestonesApi#get_system_milestones_by_poam_id_and_milestone_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update one or many POA&M items in a system
    # Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param request_body [Array<Object>] Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
    # @param [Hash] opts the optional parameters
    # @return [MilestoneResponsePut]
    def update_milestone_by_system_id_and_poam_id(system_id, poam_id, request_body, opts = {})
      data, _status_code, _headers = update_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, opts)
      data
    end

    # Update one or many POA&amp;M items in a system
    # Updates a milestone for given &#x60;systemId&#x60; and &#x60;poamId&#x60; path parameters  **Request Body Required Fields** - &#x60;milestoneId&#x60; - &#x60;description&#x60; - &#x60;scheduledCompletionDate&#x60;
    # @param system_id [Integer] **System Id**: The unique system record identifier.
    # @param poam_id [Integer] **POA&amp;M Id**: The unique POA&amp;M record identifier.
    # @param request_body [Array<Object>] Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MilestoneResponsePut, Integer, Hash)>] MilestoneResponsePut data, response status code and response headers
    def update_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MilestonesApi.update_milestone_by_system_id_and_poam_id ...'
      end
      # verify the required parameter 'system_id' is set
      if @api_client.config.client_side_validation && system_id.nil?
        fail ArgumentError, "Missing the required parameter 'system_id' when calling MilestonesApi.update_milestone_by_system_id_and_poam_id"
      end
      # verify the required parameter 'poam_id' is set
      if @api_client.config.client_side_validation && poam_id.nil?
        fail ArgumentError, "Missing the required parameter 'poam_id' when calling MilestonesApi.update_milestone_by_system_id_and_poam_id"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling MilestonesApi.update_milestone_by_system_id_and_poam_id"
      end
      # resource path
      local_var_path = '/api/systems/{systemId}/poams/{poamId}/milestones'.sub('{' + 'systemId' + '}', CGI.escape(system_id.to_s)).sub('{' + 'poamId' + '}', CGI.escape(poam_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'MilestoneResponsePut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"MilestonesApi.update_milestone_by_system_id_and_poam_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MilestonesApi#update_milestone_by_system_id_and_poam_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
