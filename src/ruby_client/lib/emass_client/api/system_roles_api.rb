=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'cgi'

module EmassClient
  class SystemRolesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get available roles
    # Returns all available roles
    # @param [Hash] opts the optional parameters
    # @return [SystemRolesResponse]
    def get_system_roles(opts = {})
      data, _status_code, _headers = get_system_roles_with_http_info(opts)
      data
    end

    # Get available roles
    # Returns all available roles
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemRolesResponse, Integer, Hash)>] SystemRolesResponse data, response status code and response headers
    def get_system_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemRolesApi.get_system_roles ...'
      end
      # resource path
      local_var_path = '/api/system-roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SystemRolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"SystemRolesApi.get_system_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemRolesApi#get_system_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get system roles
    # Returns the role(s) data matching parameters.
    # @param role_category [String] **Role Category**: The system role category been queried
    # @param role [String] **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :policy **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems. (default to 'rmf')
    # @return [SystemRolesCategoryResponse]
    def get_system_roles_by_category_id(role_category, role, opts = {})
      data, _status_code, _headers = get_system_roles_by_category_id_with_http_info(role_category, role, opts)
      data
    end

    # Get system roles
    # Returns the role(s) data matching parameters.
    # @param role_category [String] **Role Category**: The system role category been queried
    # @param role [String] **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :policy **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems. (default to 'rmf')
    # @return [Array<(SystemRolesCategoryResponse, Integer, Hash)>] SystemRolesCategoryResponse data, response status code and response headers
    def get_system_roles_by_category_id_with_http_info(role_category, role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemRolesApi.get_system_roles_by_category_id ...'
      end
      # verify the required parameter 'role_category' is set
      if @api_client.config.client_side_validation && role_category.nil?
        fail ArgumentError, "Missing the required parameter 'role_category' when calling SystemRolesApi.get_system_roles_by_category_id"
      end
      # verify enum value
      allowable_values = ["CAC", "PAC", "Other", "unknown_default_open_api"]
      if @api_client.config.client_side_validation && !allowable_values.include?(role_category)
        fail ArgumentError, "invalid value for \"role_category\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling SystemRolesApi.get_system_roles_by_category_id"
      end
      allowable_values = ["diacap", "rmf", "reporting", "unknown_default_open_api"]
      if @api_client.config.client_side_validation && opts[:'policy'] && !allowable_values.include?(opts[:'policy'])
        fail ArgumentError, "invalid value for \"policy\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/system-roles/{roleCategory}'.sub('{' + 'roleCategory' + '}', CGI.escape(role_category.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'role'] = role
      query_params[:'policy'] = opts[:'policy'] if !opts[:'policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SystemRolesCategoryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'mockType', 'userId']

      new_options = opts.merge(
        :operation => :"SystemRolesApi.get_system_roles_by_category_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemRolesApi#get_system_roles_by_category_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
