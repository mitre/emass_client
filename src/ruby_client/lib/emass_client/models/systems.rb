=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

The version of the OpenAPI document: v3.22
Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
Generated by: https://openapi-generator.tech
Generator version: 7.12.0-SNAPSHOT

=end

require 'date'
require 'time'

module EmassClient
  class Systems
    # [Read-Only] Date the system was registered into eMASS.
    attr_accessor :registration_completion_date

    # [Read-Only] Identifies the current System Acquisition Phase for programs of record.
    attr_accessor :system_life_cycle_acquisition_phase

    # [Read-Only] Lists applicable tracking indicator(s).
    attr_accessor :special_type

    # [Read-Only] Provides a brief reason for any tracking indicator(s) selected.
    attr_accessor :special_type_description

    # [Read-Only] Identifies the appropriate portfolio or capability area. Navy only.
    attr_accessor :mission_portfolio

    # [Read-Only] Indicates whether Naval Nuclear Propulsion Information (NNPI) is stored, disseminated, or processed through this system. Navy only.
    attr_accessor :is_nnpi

    # [Read-Only] Indicates whether the system is pursuing an RBC authorization. Navy only.
    attr_accessor :is_rbc

    # [Read-Only] Indicates if the system has a waiver from OPNAV N2N6G (DDCIO(N)) to proceed with a DIACAP accreditation. Navy and DIACAP only.
    attr_accessor :is_waiver

    # [Read-Only] The system record's Program Office. Navy only.
    attr_accessor :program_office

    # [Read-Only] Vulnerability Remediation Asset Manager (VRAM) identification number. \"N/A\" indicates the system record is not currently registered in VRAM.  Navy only.
    attr_accessor :vram_id

    # [Read-only] Unique system record identifier.
    attr_accessor :system_id

    # [Read-only] RMF/DIACAP Policy identifier for the system record.
    attr_accessor :policy

    # [Read-Only] Registration type of the system record. Values include (assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider.)
    attr_accessor :registration_type

    # [Read-only] Name of the system record.
    attr_accessor :name

    # [Read-only] Acronym of the system record.
    attr_accessor :acronym

    # [Read-only] Description of the system record.
    attr_accessor :description

    # [Read-Only] Name of the top-level component that owns the system.
    attr_accessor :instance

    # [Read-Only] Owning organization of the system record. Values match the eMASS instance Organizational Hierarchy.
    attr_accessor :owning_organization

    # [Read-only] Secondary organization that owns the system record (i.e. Sub-Organization-level.
    attr_accessor :secondary_organization

    # [Read-only] Version/Release Number of system record.
    attr_accessor :version_release_no

    # [Read-only] Type of the system record. RMF values include the following options (IS Major Application, IS Enclave, Platform IT System). DIACAP values include the following options (Platform IT Interconnection, AIS Application, Outsourced IT-Based Process (DoD-controlled), Enclave, Outsourced IT-Based Process (service provider shared))
    attr_accessor :system_type

    # [Read-only] Is the system record a National Security System?
    attr_accessor :is_nss

    # [Read-only] Does the system record have a public facing component/presence.
    attr_accessor :is_public_facing

    # [Read-only] Corresponding Cyber Operational Attributes Management System (COAMS) identifier for the system record.
    attr_accessor :coams_id

    # [Read-only] Identifies if system is a Type Authorization.
    attr_accessor :is_type_authorization

    # [Read-only] DITPR ID of the system record.
    attr_accessor :ditpr_id

    # [Read-Only] Same field as ditprId but displays as apmsId for Army only.
    attr_accessor :apms_id

    # [Read-Only] Same field as ditprId but displays as vasiId for VA only.
    attr_accessor :vasi_id

    # [Read-only] Authorization Status of the system record.
    attr_accessor :authorization_status

    # [Read-only] Authorization Date of the system record.
    attr_accessor :authorization_date

    # [Read-only] Authorization Termination Date of the system record.
    attr_accessor :authorization_termination_date

    # [Read-only] Length of system's Authorization. Calculated based off of Authorization Date & Authorization Termination Date.
    attr_accessor :authorization_length

    # [Read-Only] Document an assessment of overall cybersecurity risk (Very Low, Low, Moderate, High, Very High) and identify the key drivers for assessment.
    attr_accessor :security_controls_assessor_executive_summary

    # [Read-Only] Document an assessment of overall cybersecurity risk (Very Low, Low, Moderate, High, Very High) and identify the key drivers for assessment. VA only
    attr_accessor :risk_review_executive_summary

    # [Read-only] Terms/Conditions for receiving and maintaining the system's Authorization. Assigned by the Authorizing Official.
    attr_accessor :terms_for_auth

    # [Read-only] Status of the approval of the system's RMF Security Plan. Values include the following options (Approved, Denied, Not Yet Approved).
    attr_accessor :security_plan_approval_status

    # [Read-only] Approval date of the system's RMF Security Plan.
    attr_accessor :security_plan_approval_date

    # [Read-only] Mission Criticality of the system record.
    attr_accessor :mission_criticality

    # [Read-only] Geographical Association of the system record.
    attr_accessor :geographical_association

    # [Read-only] Ownership of the system record.
    attr_accessor :system_ownership_controlled

    # [Read-only] Governing Mission Area of the system record.
    attr_accessor :governing_mission_area

    # [Read-only] Primary functional area of the system record.
    attr_accessor :primary_functional_area

    # [Read-only] Secondary functional area of the system record.
    attr_accessor :secondary_functional_area

    # [Read-only] Primary Control Set of the system record. RMF values include the following options (NIST SP 800-53 Revision 4), DIACAP values include the following options (DoDI 8500.2)
    attr_accessor :primary_control_set

    # [Read-only] Confidentiality of the system record. RMF values include the following options (High, Moderate, Low)
    attr_accessor :confidentiality

    # [Read-only] Integrity of the system record. RMF values include the following options (High, Moderate, Low)
    attr_accessor :integrity

    # [Read-only] Availability of the system record. RMF values include the following options (High, Moderate, Low)
    attr_accessor :availability

    # [Read-only] Overlays applied to the system record. Multiple values are separated by semi-colon ';'.
    attr_accessor :applied_overlays

    # [Read-only] The STIG's applied to the system record.
    attr_accessor :applied_stigs

    # [Read-only] RMF Activity of the system record.
    attr_accessor :rmf_activity

    # [Read-only] Cross Domain Tickets of the system record.
    attr_accessor :cross_domain_ticket

    # [Read-Only] DITPR-DON identifier of the system record.
    attr_accessor :ditpr_don_id

    # [Read-Only] MAC level of the system record.
    attr_accessor :mac

    # [Read-Only] DoD Confidentiality level of the system record.
    attr_accessor :dod_confidentiality

    # [Read-Only] Is there a Contingency Plan in place for this system that addresses disruptions in operations?
    attr_accessor :contingency_plan_required

    # [Read-Only] Filename of the system's Contingency Plan artifact.
    attr_accessor :contingency_plan_artifact

    # [Read-only] Has the system record's Contingency Plan been tested?
    attr_accessor :contingency_plan_tested

    # [Read-only] Date the system record's Contingency Plan was tested.
    attr_accessor :contingency_plan_test_date

    # [Read-Only] Is the system required to complete a Security Review?
    attr_accessor :security_review_required

    # [Read-Only] Has a Security Review been completed for this system?
    attr_accessor :security_review_completed

    # [Read-Only] Date of the system's latest security review or annual assessment.
    attr_accessor :security_review_completion_date

    # [Read-Only] Date when the system's next security review or annual assessment is due by.
    attr_accessor :next_security_review_due_date

    # [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item?
    attr_accessor :has_open_poam_item

    # [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 90 to 120 days past its Scheduled Completion Date?
    attr_accessor :has_open_poam_item90to120_past_scheduled_completion_date

    # [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 120 days past its Scheduled Completion Date?
    attr_accessor :has_open_poam_item120_plus_past_scheudled_completion_date

    # [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
    attr_accessor :impact

    # [Read-only] Does the system record contain and/or process Controlled Unclassified information?
    attr_accessor :has_cui

    # [Read-only] Does the system record contain and/or process Personally Identifiable Information?
    attr_accessor :has_pii

    # [Read-only] Does the system record contain and/or process Personal Health Information?
    attr_accessor :has_phi

    # [Read-Only] Determine if a PPSM registration is required.
    attr_accessor :ppsm_registration_required

    # [Read-only] Unique identifier for the DoD's Ports, Protocols, and Services Management Registry system.
    attr_accessor :ppsm_registry_number

    # [Read-Only] Clarify why a PPSM registraiton is not necessary.
    attr_accessor :ppsm_registration_exemption_justification

    # [Read-only] Identify the interconnected information systems and corresponding identifiers within control CA-3.
    attr_accessor :interconnected_information_system_and_identifiers

    # [Read-only] Does the system require a Privacy Impact Assessment?
    attr_accessor :privacy_impact_assessment_required

    # [Read-only] Status of the PIA, availability values include the following options (Not Started, In Progress, Completed)
    attr_accessor :privacy_impact_assessment_status

    # [Read-only] Date in which the system's PIA took place.
    attr_accessor :privacy_impact_assessment_date

    # [Read-Only] Filename of the system's PIA artifact.
    attr_accessor :privacy_impact_assessment_artifact

    # [Read-only] User-defined field to augment Ad Hoc Reporting.
    attr_accessor :user_defined_field1

    # [Read-only] User-defined field to augment Ad Hoc Reporting.
    attr_accessor :user_defined_field2

    # [Read-only] User-defined field to augment Ad Hoc Reporting.
    attr_accessor :user_defined_field3

    # [Read-only] User-defined field to augment Ad Hoc Reporting.
    attr_accessor :user_defined_field4

    # [Read-only] User-defined field to augment Ad Hoc Reporting.
    attr_accessor :user_defined_field5

    # [Read-only] Displays the system's current step within the RMF Lifecycle.
    attr_accessor :current_rmf_lifecycle_step

    # [Read-only] Include any additional information required by the organization.
    attr_accessor :other_information

    # [Read-only] Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
    attr_accessor :reports_for_scorecard

    # [Read-Only] The overall classification level of information that the System is approved to collect, process, store, and/or distribute.
    attr_accessor :highest_system_data_classification

    # [Read-Only] Same field as highestSystemDataClassification, but displays as overallClassification for NISP only.
    attr_accessor :overall_classification

    # [Read-Only] Indicates if the system contains High Value Assets. Does not display if value is null
    attr_accessor :is_hva

    # [Read-Only] Per OMB Circular A-127, a financial management system includes the core financial systems and the financial portions of mixed systems necessary to support financial management, including automated and manual processes, procedures, and controls, data, hardware, software, and support personnel dedicated to the operation and maintenance of system functions. The following are examples of financial management systems: core financial systems, procurement systems, loan systems, grants systems, payroll systems, budget formulation systems, billing systems, and travel systems. 
    attr_accessor :is_financial_management

    # [Read-Only] A reciprocity system is any information system that is part of a mutual agreement among participating organizations to accept each other's security assessments in order to reuse information system resources and/or to accept each other's assessed security posture in order to share information. 
    attr_accessor :is_reciprocity

    # [Read-Only] The following justifications are acceptable for exemption from reciprocity: (a) the existence of the system is classified (not the data, but the existence of the system) or (b) the system's authorization to operate is in the process of being pulled (e.g. DATO, Decommission). 
    attr_accessor :reciprocity_exemption

    # [Read-Only] Is this a cloud-based IS?
    attr_accessor :cloud_computing

    # [Read-Only] Values include the following: (Hybrid, Private, Public)
    attr_accessor :cloud_type

    # [Read-Only] The Authority to Connect decision. Values include the following: (Authority to Connect (ATC), Denial of Authority to Connect (DATC), Not Yet Connected, Decommissioned) 
    attr_accessor :authorization_to_connect_status

    # [Read-Only] Software as a Service (SaaS) cloud service model.
    attr_accessor :is_saa_s

    # [Read-Only] Platform as a Service (PaaS) cloud service model.
    attr_accessor :is_paa_s

    # [Read-Only] Infrastructure as a Service (IaaS) cloud service model.
    attr_accessor :is_iaa_s

    # [Read-Only] Free text field to include other cloud service models.
    attr_accessor :other_service_models

    # [Read-Only] Indicates the date by which the System needs to be deployed to a production environment.
    attr_accessor :need_date

    # [Read-Only] The overall risk score of the system
    attr_accessor :overall_risk_score

    # [Read-Only] Identifies whether a System has been designated as High Risk Review. USCG and Navy only.
    attr_accessor :is_hrr

    # [Read-Only] The Connectivity Authorization Date.
    attr_accessor :connectivity_authorization_date

    # [Read-Only] The Connectivity Authorization Termination Date.
    attr_accessor :connectivity_authorization_termination_date

    # [Read-Only] Indicate the date by which the System needs to be deployed to a production environment. VA only.
    attr_accessor :system_development_life_cycle

    # [Read-Only] Is this IS reportable per Federal Information Security Management Act (FISMA) established requirements? VA only
    attr_accessor :is_fisma_reportable

    # [Read-Only] System Tags for enterprise level, to include CIO and CISO, tracking efforts. VA only.
    attr_accessor :group_tagging

    # [Read-Only] System Tag explanation(s) for enterprise level, to include CIO and CISO, tracking efforts. VA only.
    attr_accessor :group_tag_descriptions

    # [Read-Only] The system's DADMS ID. USMC only.
    attr_accessor :dadms_id

    # [Read-Only] Date the system expires in DADMS. USMC only.
    attr_accessor :dadms_expiration_date

    # [Read-Only] Identify the type of connectivity for the network/enclave, e.g., DISA circuit (NIPR, SIPR) or HPCMP circuit (DREN, SDREN, Outreach). Navy only.
    attr_accessor :enclave_connectivity

    # [Read-Only] Identify the primary computing environment for where the information system is deployed. Navy only.
    attr_accessor :environment_type

    # [Read-Only] Indicate whether the information system provides inheritable controls. Navy only
    attr_accessor :navy_common_control_provider

    # [Read-Only] Identify the broker responsible for the delivery of commercial cloud services and capabilities. Refer to Navy Commercial Cloud Brokerage Policy. Navy Only
    attr_accessor :navy_cloud_broker

    # [Read-Only] The eMASS ID of the identified cloud broker. Navy only.
    attr_accessor :cloud_broker_emass_id

    # [Read-Only] The provisional authorization termination date of the identified cloud broker. Navy only
    attr_accessor :cloud_broker_provisional_authorization_atd

    # [Read-Only] Indicate whether this is a joint authorization being issued by two or more Authorizing Officials. Navy only
    attr_accessor :navy_joint_authorization

    # [Read-Only] Provide all NMCI CLINs associated to the system/services within the authorization boundary. Navy only
    attr_accessor :nmci_ngen_clins

    # [Read-Only] Identify the Navy enterprise network where the information system is deployed. Navy only
    attr_accessor :enterprise_locations

    # [Read-Only] Systems that have public-facing components/presences are typically required to be documented and registered as part of Organzationally-approved whitelisting processes.
    attr_accessor :whitelist_id

    # [Read-Only] Provide/upload the documentation that identifies or describes the components or aspects of the System that are public-facing (whitelisted).
    attr_accessor :whitelist_inventory

    # [Read-Only] Values include the following options (I,II,III)
    attr_accessor :acquisition_category

    # [Read-Only] Lists the software category.
    attr_accessor :software_category

    # [Read-Only] Name of the system's Cybersecurity Service Provider.
    attr_accessor :cybersecurity_service_provider

    # [Read-Only] If Not Applicable, provide the exception justification.
    attr_accessor :cybersecurity_service_provider_exception_justification

    # [Read-Only] MTD represents the total amount of time leaders/managers are willing to accept for a process outage or disruption.
    attr_accessor :maximum_tolerable_downtime

    # [Read-Only] RTO defines the maximum amount of time a system can remain unavailable before there is an unacceptable impact on other systems, supported business processes, and the MTD.
    attr_accessor :recovery_time_objective

    # [Read-Only] RPO represents the point in time, prior to a disruption or system outage, to which mission/business data can be recovered (given the most recent backup copy of the data) after an outage. The system data/information owner determines an acceptable RPO in terms of amount of tolerable data loss before unacceptable impact occurs.
    attr_accessor :recovery_point_objective

    # [Read-Only] Is a Business Impact Analysis in place that identifies critical business processes, MTD, RTO, and RPO?
    attr_accessor :business_impact_analysis_required

    # [Read-Only] Filename of the system's Business Impact Analysis artifact.
    attr_accessor :business_impact_analysis_artifact

    # [Read-Only] Is there a Incident Response Plan in place for this system that provides the roadmap for implementing the incident response capability?
    attr_accessor :incident_response_plan_required

    # [Read-Only] Filename of the system's Incident Response Plan artifact.
    attr_accessor :incident_response_plan_artifact

    # [Read-Only] Is there a Disaster Recovery Plan in place for this system that addresses information system disruptions that require relocation?
    attr_accessor :disaster_recovery_plan_required

    # [Read-Only] Filename of the system's Disaster Recovery Plan artifact.
    attr_accessor :disaster_recovery_plan_artifact

    # [Read-Only] Indicate whether a Privacy Threshold Analysis (PTA) has been performed for this IS.
    attr_accessor :privacy_threshold_analysis_completed

    # [Read-Only] Date in which this sytem's Privacy Threshold Analysis took place.
    attr_accessor :privacy_threshold_analysis_date

    # [Read-Only] Filename of the system's Privacy Threshold Analysis artifact.
    attr_accessor :privacy_threshold_analysis_artifact

    # [Read-Only] Does this system require a Privacy Act System of Record Notice per DoD 5400.11-R?
    attr_accessor :privacy_act_system_of_records_notice_required

    # [Read-Only] Indicate whether an E-Authentication Risk Assessment has been performed for the system in accordance with OMB M-04-04.
    attr_accessor :e_authentication_risk_assessment_required

    # [Read-Only] Date this system's EAuthentication Risk Assessment took place.
    attr_accessor :e_authentication_risk_assessment_date

    # [Read-Only] Filename of the system's Privacy Threshold Analysis artifact.
    attr_accessor :e_authentication_risk_assessment_artifact

    # [Read-Only] Identify the total number of assets associated with this boundary that are only on IPv4.
    attr_accessor :ipv4_only_assets

    # [Read-Only] Identify the total number of assets associated with this boundary that are only on IPv6.
    attr_accessor :ipv6_only_assets

    # [Read-Only] Identify the total number of assets associated with this boundary that are operating on IPv4/IPv6 dual-stack.
    attr_accessor :ipv4_ipv6_dual_stack_assets

    # [Read-Only] Total number of IPv4, IPv6, and dual-stack assets identified. Value calculated upon Save action
    attr_accessor :total_ip_assets

    # [Read-Only] Identify the organization that generated the existing authorization package, including (where applicable) individual points of contact.
    attr_accessor :originating_organization

    # [Read-Only] Provide a detailed justification as to why this system should be deployed and used within the requesting organization.
    attr_accessor :system_use_justification

    # [Read-Only] Filename of the System Use Justification Artifact, including the file extension.
    attr_accessor :system_use_justification_artifact

    # [Read-Only] The system's Authority to Use Status.
    attr_accessor :authorization_to_use_status

    # [Read-Only] The system's Reciprocity Acceptance Status. Army IC only.
    attr_accessor :reciprocity_acceptance_status

    # [Read-Only] The system's Use Authorization Date.
    attr_accessor :use_authorization_date

    # [Read-Only] The system's Reciprocity Acceptance Date. Army IC only.
    attr_accessor :reciprocity_acceptance_date

    # [Read-Only] The system's Use Authorization Termination Date.
    attr_accessor :use_authorization_termination_date

    # [Read-Only] The system's Reciprocity Acceptance Termination Date. Army IC only.
    attr_accessor :reciprocity_acceptance_termination_date

    # [Read-Only] The system's Terms / Conditions for Use Summary.
    attr_accessor :terms_conditions_for_use_summary

    # [Read-Only] The system's Terms / Conditions for Reciprocity Summary. Army IC only.
    attr_accessor :terms_conditions_for_reciprocity_summary

    # [Read-Only] Annotate 'Yes' if your system performs a Primary Mission Essential Function. VA only
    attr_accessor :primary_mission_essential_function

    # [Read-Only] The FIPS category \"Availability\" of this system must be marked \"High\" if the system is listed as a PMEF, and the RTO must be 12 hours or shorter. VA only
    attr_accessor :pmef_description

    # [Read-Only] Annotate \"Yes\" if your system performs a Mission Essential Function. VA only.
    attr_accessor :mission_essential_function

    # [Read-Only] MEFs are listed in the OIT Continuity Plan. VA Handbook 0322 will be updated with these MEFs. VA only.
    attr_accessor :mef_description

    # [Read-Only] Identify the administration that this information system supports. VA only.
    attr_accessor :administration

    # [Read-Only] If the Administration field is set to \"Other\", this free-text field becomes required. VA only.
    attr_accessor :administration_other_justification

    # [Read-Only] The date the Authority to Connect (ATC) or Interim Authority to Connect (IATC) was granted.
    attr_accessor :atc_iatc_granted_date

    # [Read-Only] The date the Authority to Connect (ATC) or Interim Authority to Connect (IATC) expires.
    attr_accessor :atc_iatc_expiration_date

    # [Read-Only] List of pending items required for the Authority to Connect (ATC) or Interim Authority to Connect (IATC).
    attr_accessor :atc_iatc_pending_items

    # [Read-Only] The date the pending items are due.
    attr_accessor :pending_items_due_date

    # [Read-Only] A DoDIN-N system is all encompassing for the following: Navy networks, systems, sites, corporate assets, centrally managed programs, programs of record, standalone, excepted, enterprise, non-enterprise, cloud, NIPRNET, SIPRNET, GENSER Classified, Defense Research Engineering Network (DREN), Secret DREN (SDREN), connected to the DoDIN or through commercial lines that are owned, operated, leased, contracted, maintained, managed, administered, house Navy data, house Navy personally identifiable information, house Navy protected health information, or controlled unclassified information. The DoDIN-N also includes commercial information technology, weapons systems/program manager/program of record/platform information technology, and operational technology. Navy only.
    attr_accessor :dodinn_system_id

    # [Read-Only] FCC CRMA/NAO approval for DoDIN-N operations. Navy only.
    attr_accessor :authorization_to_use_connect_status

    # [Read-Only] The Use/Connect Authorization Date. Navy only.
    attr_accessor :use_connect_authorization_date

    # [Read-Only] The Use/Connect Authorization Termination Date Navy only.
    attr_accessor :use_connect_authorization_termination_date

    # [Read-Only] Provide a description (if applicable) of any specific limitations or restrictions placed on the operation of the information system as part of the authorization to use/connect decision. Navy only.
    attr_accessor :terms_conditions_for_use_connect_summary

    # [Read-Only] Identify the number of System Workstations. This data will be used for the National Industrial Security System (NISS) facility categorization. If field is not applicable enter \"0\". NISP only.
    attr_accessor :workstations

    # [Read-Only] Identify the number of System Servers. This data will be used for the National Industrial Security System (NISS) facility categorization. If field is not applicable enter \"0\". NISP only.
    attr_accessor :servers

    attr_accessor :connectivity_ccsd

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'registration_completion_date' => :'registrationCompletionDate',
        :'system_life_cycle_acquisition_phase' => :'systemLifeCycleAcquisitionPhase',
        :'special_type' => :'specialType',
        :'special_type_description' => :'specialTypeDescription',
        :'mission_portfolio' => :'missionPortfolio',
        :'is_nnpi' => :'isNNPI',
        :'is_rbc' => :'isRBC',
        :'is_waiver' => :'isWaiver',
        :'program_office' => :'programOffice',
        :'vram_id' => :'vramId',
        :'system_id' => :'systemId',
        :'policy' => :'policy',
        :'registration_type' => :'registrationType',
        :'name' => :'name',
        :'acronym' => :'acronym',
        :'description' => :'description',
        :'instance' => :'instance',
        :'owning_organization' => :'owningOrganization',
        :'secondary_organization' => :'secondaryOrganization',
        :'version_release_no' => :'versionReleaseNo',
        :'system_type' => :'systemType',
        :'is_nss' => :'isNSS',
        :'is_public_facing' => :'isPublicFacing',
        :'coams_id' => :'coamsId',
        :'is_type_authorization' => :'isTypeAuthorization',
        :'ditpr_id' => :'ditprId',
        :'apms_id' => :'apmsId',
        :'vasi_id' => :'vasiId',
        :'authorization_status' => :'authorizationStatus',
        :'authorization_date' => :'authorizationDate',
        :'authorization_termination_date' => :'authorizationTerminationDate',
        :'authorization_length' => :'authorizationLength',
        :'security_controls_assessor_executive_summary' => :'securityControlsAssessorExecutiveSummary',
        :'risk_review_executive_summary' => :'riskReviewExecutiveSummary',
        :'terms_for_auth' => :'termsForAuth',
        :'security_plan_approval_status' => :'securityPlanApprovalStatus',
        :'security_plan_approval_date' => :'securityPlanApprovalDate',
        :'mission_criticality' => :'missionCriticality',
        :'geographical_association' => :'geographicalAssociation',
        :'system_ownership_controlled' => :'systemOwnershipControlled',
        :'governing_mission_area' => :'governingMissionArea',
        :'primary_functional_area' => :'primaryFunctionalArea',
        :'secondary_functional_area' => :'secondaryFunctionalArea',
        :'primary_control_set' => :'primaryControlSet',
        :'confidentiality' => :'confidentiality',
        :'integrity' => :'integrity',
        :'availability' => :'availability',
        :'applied_overlays' => :'appliedOverlays',
        :'applied_stigs' => :'appliedStigs',
        :'rmf_activity' => :'rmfActivity',
        :'cross_domain_ticket' => :'crossDomainTicket',
        :'ditpr_don_id' => :'ditprDonId',
        :'mac' => :'mac',
        :'dod_confidentiality' => :'dodConfidentiality',
        :'contingency_plan_required' => :'contingencyPlanRequired',
        :'contingency_plan_artifact' => :'contingencyPlanArtifact',
        :'contingency_plan_tested' => :'contingencyPlanTested',
        :'contingency_plan_test_date' => :'contingencyPlanTestDate',
        :'security_review_required' => :'securityReviewRequired',
        :'security_review_completed' => :'securityReviewCompleted',
        :'security_review_completion_date' => :'securityReviewCompletionDate',
        :'next_security_review_due_date' => :'nextSecurityReviewDueDate',
        :'has_open_poam_item' => :'hasOpenPoamItem',
        :'has_open_poam_item90to120_past_scheduled_completion_date' => :'hasOpenPoamItem90to120PastScheduledCompletionDate',
        :'has_open_poam_item120_plus_past_scheudled_completion_date' => :'hasOpenPoamItem120PlusPastScheudledCompletionDate',
        :'impact' => :'impact',
        :'has_cui' => :'hasCUI',
        :'has_pii' => :'hasPII',
        :'has_phi' => :'hasPHI',
        :'ppsm_registration_required' => :'ppsmRegistrationRequired',
        :'ppsm_registry_number' => :'ppsmRegistryNumber',
        :'ppsm_registration_exemption_justification' => :'ppsmRegistrationExemptionJustification',
        :'interconnected_information_system_and_identifiers' => :'interconnectedInformationSystemAndIdentifiers',
        :'privacy_impact_assessment_required' => :'privacyImpactAssessmentRequired',
        :'privacy_impact_assessment_status' => :'privacyImpactAssessmentStatus',
        :'privacy_impact_assessment_date' => :'privacyImpactAssessmentDate',
        :'privacy_impact_assessment_artifact' => :'privacyImpactAssessmentArtifact',
        :'user_defined_field1' => :'userDefinedField1',
        :'user_defined_field2' => :'userDefinedField2',
        :'user_defined_field3' => :'userDefinedField3',
        :'user_defined_field4' => :'userDefinedField4',
        :'user_defined_field5' => :'userDefinedField5',
        :'current_rmf_lifecycle_step' => :'currentRmfLifecycleStep',
        :'other_information' => :'otherInformation',
        :'reports_for_scorecard' => :'reportsForScorecard',
        :'highest_system_data_classification' => :'highestSystemDataClassification',
        :'overall_classification' => :'overallClassification',
        :'is_hva' => :'isHVA',
        :'is_financial_management' => :'isFinancialManagement',
        :'is_reciprocity' => :'isReciprocity',
        :'reciprocity_exemption' => :'reciprocityExemption',
        :'cloud_computing' => :'cloudComputing',
        :'cloud_type' => :'cloudType',
        :'authorization_to_connect_status' => :'authorizationToConnectStatus',
        :'is_saa_s' => :'isSaaS',
        :'is_paa_s' => :'isPaaS',
        :'is_iaa_s' => :'isIaaS',
        :'other_service_models' => :'otherServiceModels',
        :'need_date' => :'needDate',
        :'overall_risk_score' => :'overallRiskScore',
        :'is_hrr' => :'isHRR',
        :'connectivity_authorization_date' => :'connectivityAuthorizationDate',
        :'connectivity_authorization_termination_date' => :'connectivityAuthorizationTerminationDate',
        :'system_development_life_cycle' => :'systemDevelopmentLifeCycle',
        :'is_fisma_reportable' => :'isFISMAReportable',
        :'group_tagging' => :'groupTagging',
        :'group_tag_descriptions' => :'groupTagDescriptions',
        :'dadms_id' => :'dadmsId',
        :'dadms_expiration_date' => :'dadmsExpirationDate',
        :'enclave_connectivity' => :'enclaveConnectivity',
        :'environment_type' => :'environmentType',
        :'navy_common_control_provider' => :'navyCommonControlProvider',
        :'navy_cloud_broker' => :'navyCloudBroker',
        :'cloud_broker_emass_id' => :'cloudBrokerEmassId',
        :'cloud_broker_provisional_authorization_atd' => :'cloudBrokerProvisionalAuthorizationAtd',
        :'navy_joint_authorization' => :'navyJointAuthorization',
        :'nmci_ngen_clins' => :'nmciNgenClins',
        :'enterprise_locations' => :'enterpriseLocations',
        :'whitelist_id' => :'whitelistId',
        :'whitelist_inventory' => :'whitelistInventory',
        :'acquisition_category' => :'acquisitionCategory',
        :'software_category' => :'softwareCategory',
        :'cybersecurity_service_provider' => :'cybersecurityServiceProvider',
        :'cybersecurity_service_provider_exception_justification' => :'cybersecurityServiceProviderExceptionJustification',
        :'maximum_tolerable_downtime' => :'maximumTolerableDowntime',
        :'recovery_time_objective' => :'recoveryTimeObjective',
        :'recovery_point_objective' => :'recoveryPointObjective',
        :'business_impact_analysis_required' => :'businessImpactAnalysisRequired',
        :'business_impact_analysis_artifact' => :'businessImpactAnalysisArtifact',
        :'incident_response_plan_required' => :'incidentResponsePlanRequired',
        :'incident_response_plan_artifact' => :'incidentResponsePlanArtifact',
        :'disaster_recovery_plan_required' => :'disasterRecoveryPlanRequired',
        :'disaster_recovery_plan_artifact' => :'disasterRecoveryPlanArtifact',
        :'privacy_threshold_analysis_completed' => :'privacyThresholdAnalysisCompleted',
        :'privacy_threshold_analysis_date' => :'privacyThresholdAnalysisDate',
        :'privacy_threshold_analysis_artifact' => :'privacyThresholdAnalysisArtifact',
        :'privacy_act_system_of_records_notice_required' => :'privacyActSystemOfRecordsNoticeRequired',
        :'e_authentication_risk_assessment_required' => :'eAuthenticationRiskAssessmentRequired',
        :'e_authentication_risk_assessment_date' => :'eAuthenticationRiskAssessmentDate',
        :'e_authentication_risk_assessment_artifact' => :'eAuthenticationRiskAssessmentArtifact',
        :'ipv4_only_assets' => :'ipv4OnlyAssets',
        :'ipv6_only_assets' => :'ipv6OnlyAssets',
        :'ipv4_ipv6_dual_stack_assets' => :'ipv4Ipv6DualStackAssets',
        :'total_ip_assets' => :'totalIpAssets',
        :'originating_organization' => :'originatingOrganization',
        :'system_use_justification' => :'systemUseJustification',
        :'system_use_justification_artifact' => :'systemUseJustificationArtifact',
        :'authorization_to_use_status' => :'authorizationToUseStatus',
        :'reciprocity_acceptance_status' => :'reciprocityAcceptanceStatus',
        :'use_authorization_date' => :'useAuthorizationDate',
        :'reciprocity_acceptance_date' => :'reciprocityAcceptanceDate',
        :'use_authorization_termination_date' => :'useAuthorizationTerminationDate',
        :'reciprocity_acceptance_termination_date' => :'reciprocityAcceptanceTerminationDate',
        :'terms_conditions_for_use_summary' => :'termsConditionsForUseSummary',
        :'terms_conditions_for_reciprocity_summary' => :'termsConditionsForReciprocitySummary',
        :'primary_mission_essential_function' => :'primaryMissionEssentialFunction',
        :'pmef_description' => :'pmefDescription',
        :'mission_essential_function' => :'missionEssentialFunction',
        :'mef_description' => :'mefDescription',
        :'administration' => :'administration',
        :'administration_other_justification' => :'administrationOtherJustification',
        :'atc_iatc_granted_date' => :'atcIatcGrantedDate',
        :'atc_iatc_expiration_date' => :'atcIatcExpirationDate',
        :'atc_iatc_pending_items' => :'atcIatcPendingItems',
        :'pending_items_due_date' => :'pendingItemsDueDate',
        :'dodinn_system_id' => :'dodinnSystemId',
        :'authorization_to_use_connect_status' => :'authorizationToUseConnectStatus',
        :'use_connect_authorization_date' => :'useConnectAuthorizationDate',
        :'use_connect_authorization_termination_date' => :'useConnectAuthorizationTerminationDate',
        :'terms_conditions_for_use_connect_summary' => :'termsConditionsForUseConnectSummary',
        :'workstations' => :'workstations',
        :'servers' => :'servers',
        :'connectivity_ccsd' => :'connectivityCcsd'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'registration_completion_date' => :'Integer',
        :'system_life_cycle_acquisition_phase' => :'String',
        :'special_type' => :'String',
        :'special_type_description' => :'String',
        :'mission_portfolio' => :'String',
        :'is_nnpi' => :'Boolean',
        :'is_rbc' => :'Boolean',
        :'is_waiver' => :'Boolean',
        :'program_office' => :'String',
        :'vram_id' => :'String',
        :'system_id' => :'Integer',
        :'policy' => :'String',
        :'registration_type' => :'String',
        :'name' => :'String',
        :'acronym' => :'String',
        :'description' => :'String',
        :'instance' => :'String',
        :'owning_organization' => :'String',
        :'secondary_organization' => :'String',
        :'version_release_no' => :'String',
        :'system_type' => :'String',
        :'is_nss' => :'Boolean',
        :'is_public_facing' => :'Boolean',
        :'coams_id' => :'Integer',
        :'is_type_authorization' => :'Boolean',
        :'ditpr_id' => :'String',
        :'apms_id' => :'String',
        :'vasi_id' => :'String',
        :'authorization_status' => :'String',
        :'authorization_date' => :'Integer',
        :'authorization_termination_date' => :'Integer',
        :'authorization_length' => :'Integer',
        :'security_controls_assessor_executive_summary' => :'String',
        :'risk_review_executive_summary' => :'String',
        :'terms_for_auth' => :'String',
        :'security_plan_approval_status' => :'String',
        :'security_plan_approval_date' => :'Integer',
        :'mission_criticality' => :'String',
        :'geographical_association' => :'String',
        :'system_ownership_controlled' => :'String',
        :'governing_mission_area' => :'String',
        :'primary_functional_area' => :'String',
        :'secondary_functional_area' => :'String',
        :'primary_control_set' => :'String',
        :'confidentiality' => :'String',
        :'integrity' => :'String',
        :'availability' => :'String',
        :'applied_overlays' => :'String',
        :'applied_stigs' => :'String',
        :'rmf_activity' => :'String',
        :'cross_domain_ticket' => :'String',
        :'ditpr_don_id' => :'String',
        :'mac' => :'String',
        :'dod_confidentiality' => :'String',
        :'contingency_plan_required' => :'Boolean',
        :'contingency_plan_artifact' => :'String',
        :'contingency_plan_tested' => :'Boolean',
        :'contingency_plan_test_date' => :'Integer',
        :'security_review_required' => :'Boolean',
        :'security_review_completed' => :'Boolean',
        :'security_review_completion_date' => :'Integer',
        :'next_security_review_due_date' => :'Integer',
        :'has_open_poam_item' => :'Boolean',
        :'has_open_poam_item90to120_past_scheduled_completion_date' => :'Boolean',
        :'has_open_poam_item120_plus_past_scheudled_completion_date' => :'Boolean',
        :'impact' => :'String',
        :'has_cui' => :'Boolean',
        :'has_pii' => :'Boolean',
        :'has_phi' => :'Boolean',
        :'ppsm_registration_required' => :'String',
        :'ppsm_registry_number' => :'String',
        :'ppsm_registration_exemption_justification' => :'String',
        :'interconnected_information_system_and_identifiers' => :'String',
        :'privacy_impact_assessment_required' => :'Boolean',
        :'privacy_impact_assessment_status' => :'String',
        :'privacy_impact_assessment_date' => :'Integer',
        :'privacy_impact_assessment_artifact' => :'String',
        :'user_defined_field1' => :'String',
        :'user_defined_field2' => :'String',
        :'user_defined_field3' => :'String',
        :'user_defined_field4' => :'String',
        :'user_defined_field5' => :'String',
        :'current_rmf_lifecycle_step' => :'String',
        :'other_information' => :'String',
        :'reports_for_scorecard' => :'Boolean',
        :'highest_system_data_classification' => :'String',
        :'overall_classification' => :'String',
        :'is_hva' => :'Boolean',
        :'is_financial_management' => :'Boolean',
        :'is_reciprocity' => :'Boolean',
        :'reciprocity_exemption' => :'String',
        :'cloud_computing' => :'Boolean',
        :'cloud_type' => :'String',
        :'authorization_to_connect_status' => :'String',
        :'is_saa_s' => :'Boolean',
        :'is_paa_s' => :'Boolean',
        :'is_iaa_s' => :'Boolean',
        :'other_service_models' => :'String',
        :'need_date' => :'Integer',
        :'overall_risk_score' => :'String',
        :'is_hrr' => :'Boolean',
        :'connectivity_authorization_date' => :'Integer',
        :'connectivity_authorization_termination_date' => :'Integer',
        :'system_development_life_cycle' => :'String',
        :'is_fisma_reportable' => :'Boolean',
        :'group_tagging' => :'String',
        :'group_tag_descriptions' => :'String',
        :'dadms_id' => :'String',
        :'dadms_expiration_date' => :'Integer',
        :'enclave_connectivity' => :'String',
        :'environment_type' => :'String',
        :'navy_common_control_provider' => :'Boolean',
        :'navy_cloud_broker' => :'String',
        :'cloud_broker_emass_id' => :'Integer',
        :'cloud_broker_provisional_authorization_atd' => :'Integer',
        :'navy_joint_authorization' => :'Boolean',
        :'nmci_ngen_clins' => :'String',
        :'enterprise_locations' => :'String',
        :'whitelist_id' => :'String',
        :'whitelist_inventory' => :'String',
        :'acquisition_category' => :'String',
        :'software_category' => :'String',
        :'cybersecurity_service_provider' => :'String',
        :'cybersecurity_service_provider_exception_justification' => :'String',
        :'maximum_tolerable_downtime' => :'String',
        :'recovery_time_objective' => :'String',
        :'recovery_point_objective' => :'String',
        :'business_impact_analysis_required' => :'Boolean',
        :'business_impact_analysis_artifact' => :'String',
        :'incident_response_plan_required' => :'Boolean',
        :'incident_response_plan_artifact' => :'String',
        :'disaster_recovery_plan_required' => :'Boolean',
        :'disaster_recovery_plan_artifact' => :'String',
        :'privacy_threshold_analysis_completed' => :'Boolean',
        :'privacy_threshold_analysis_date' => :'Integer',
        :'privacy_threshold_analysis_artifact' => :'String',
        :'privacy_act_system_of_records_notice_required' => :'Boolean',
        :'e_authentication_risk_assessment_required' => :'Boolean',
        :'e_authentication_risk_assessment_date' => :'Integer',
        :'e_authentication_risk_assessment_artifact' => :'String',
        :'ipv4_only_assets' => :'Integer',
        :'ipv6_only_assets' => :'Integer',
        :'ipv4_ipv6_dual_stack_assets' => :'Integer',
        :'total_ip_assets' => :'Integer',
        :'originating_organization' => :'String',
        :'system_use_justification' => :'String',
        :'system_use_justification_artifact' => :'String',
        :'authorization_to_use_status' => :'String',
        :'reciprocity_acceptance_status' => :'String',
        :'use_authorization_date' => :'Integer',
        :'reciprocity_acceptance_date' => :'Integer',
        :'use_authorization_termination_date' => :'Integer',
        :'reciprocity_acceptance_termination_date' => :'Integer',
        :'terms_conditions_for_use_summary' => :'String',
        :'terms_conditions_for_reciprocity_summary' => :'String',
        :'primary_mission_essential_function' => :'Boolean',
        :'pmef_description' => :'String',
        :'mission_essential_function' => :'Boolean',
        :'mef_description' => :'String',
        :'administration' => :'String',
        :'administration_other_justification' => :'String',
        :'atc_iatc_granted_date' => :'Integer',
        :'atc_iatc_expiration_date' => :'Integer',
        :'atc_iatc_pending_items' => :'String',
        :'pending_items_due_date' => :'Integer',
        :'dodinn_system_id' => :'Boolean',
        :'authorization_to_use_connect_status' => :'String',
        :'use_connect_authorization_date' => :'Integer',
        :'use_connect_authorization_termination_date' => :'Integer',
        :'terms_conditions_for_use_connect_summary' => :'String',
        :'workstations' => :'Integer',
        :'servers' => :'Integer',
        :'connectivity_ccsd' => :'Array<ConnectivityCcsd>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'registration_completion_date',
        :'system_life_cycle_acquisition_phase',
        :'special_type',
        :'special_type_description',
        :'mission_portfolio',
        :'is_nnpi',
        :'is_rbc',
        :'is_waiver',
        :'program_office',
        :'vram_id',
        :'policy',
        :'registration_type',
        :'name',
        :'acronym',
        :'description',
        :'instance',
        :'owning_organization',
        :'secondary_organization',
        :'version_release_no',
        :'system_type',
        :'is_nss',
        :'is_public_facing',
        :'coams_id',
        :'is_type_authorization',
        :'apms_id',
        :'vasi_id',
        :'authorization_status',
        :'authorization_date',
        :'authorization_termination_date',
        :'authorization_length',
        :'security_controls_assessor_executive_summary',
        :'risk_review_executive_summary',
        :'terms_for_auth',
        :'security_plan_approval_status',
        :'security_plan_approval_date',
        :'mission_criticality',
        :'geographical_association',
        :'system_ownership_controlled',
        :'governing_mission_area',
        :'primary_functional_area',
        :'secondary_functional_area',
        :'primary_control_set',
        :'confidentiality',
        :'integrity',
        :'availability',
        :'applied_overlays',
        :'applied_stigs',
        :'rmf_activity',
        :'cross_domain_ticket',
        :'ditpr_don_id',
        :'mac',
        :'dod_confidentiality',
        :'contingency_plan_required',
        :'contingency_plan_artifact',
        :'contingency_plan_tested',
        :'contingency_plan_test_date',
        :'security_review_required',
        :'security_review_completed',
        :'security_review_completion_date',
        :'next_security_review_due_date',
        :'has_open_poam_item',
        :'has_open_poam_item90to120_past_scheduled_completion_date',
        :'has_open_poam_item120_plus_past_scheudled_completion_date',
        :'impact',
        :'has_cui',
        :'has_pii',
        :'has_phi',
        :'ppsm_registration_required',
        :'ppsm_registry_number',
        :'ppsm_registration_exemption_justification',
        :'interconnected_information_system_and_identifiers',
        :'privacy_impact_assessment_required',
        :'privacy_impact_assessment_status',
        :'privacy_impact_assessment_date',
        :'privacy_impact_assessment_artifact',
        :'user_defined_field1',
        :'user_defined_field2',
        :'user_defined_field3',
        :'user_defined_field4',
        :'user_defined_field5',
        :'current_rmf_lifecycle_step',
        :'other_information',
        :'reports_for_scorecard',
        :'highest_system_data_classification',
        :'overall_classification',
        :'is_hva',
        :'is_financial_management',
        :'is_reciprocity',
        :'reciprocity_exemption',
        :'cloud_computing',
        :'cloud_type',
        :'authorization_to_connect_status',
        :'is_saa_s',
        :'is_paa_s',
        :'is_iaa_s',
        :'other_service_models',
        :'need_date',
        :'overall_risk_score',
        :'is_hrr',
        :'connectivity_authorization_date',
        :'connectivity_authorization_termination_date',
        :'system_development_life_cycle',
        :'is_fisma_reportable',
        :'group_tagging',
        :'group_tag_descriptions',
        :'dadms_id',
        :'dadms_expiration_date',
        :'enclave_connectivity',
        :'environment_type',
        :'navy_common_control_provider',
        :'navy_cloud_broker',
        :'cloud_broker_emass_id',
        :'cloud_broker_provisional_authorization_atd',
        :'navy_joint_authorization',
        :'nmci_ngen_clins',
        :'enterprise_locations',
        :'whitelist_id',
        :'whitelist_inventory',
        :'acquisition_category',
        :'software_category',
        :'cybersecurity_service_provider',
        :'cybersecurity_service_provider_exception_justification',
        :'maximum_tolerable_downtime',
        :'recovery_time_objective',
        :'recovery_point_objective',
        :'business_impact_analysis_required',
        :'business_impact_analysis_artifact',
        :'incident_response_plan_required',
        :'incident_response_plan_artifact',
        :'disaster_recovery_plan_required',
        :'disaster_recovery_plan_artifact',
        :'privacy_threshold_analysis_completed',
        :'privacy_threshold_analysis_date',
        :'privacy_threshold_analysis_artifact',
        :'privacy_act_system_of_records_notice_required',
        :'e_authentication_risk_assessment_required',
        :'e_authentication_risk_assessment_date',
        :'e_authentication_risk_assessment_artifact',
        :'ipv4_only_assets',
        :'ipv6_only_assets',
        :'ipv4_ipv6_dual_stack_assets',
        :'total_ip_assets',
        :'originating_organization',
        :'system_use_justification',
        :'system_use_justification_artifact',
        :'authorization_to_use_status',
        :'reciprocity_acceptance_status',
        :'use_authorization_date',
        :'reciprocity_acceptance_date',
        :'use_authorization_termination_date',
        :'reciprocity_acceptance_termination_date',
        :'terms_conditions_for_use_summary',
        :'terms_conditions_for_reciprocity_summary',
        :'primary_mission_essential_function',
        :'pmef_description',
        :'mission_essential_function',
        :'mef_description',
        :'administration',
        :'administration_other_justification',
        :'atc_iatc_granted_date',
        :'atc_iatc_expiration_date',
        :'atc_iatc_pending_items',
        :'pending_items_due_date',
        :'dodinn_system_id',
        :'authorization_to_use_connect_status',
        :'use_connect_authorization_date',
        :'use_connect_authorization_termination_date',
        :'terms_conditions_for_use_connect_summary',
        :'workstations',
        :'servers',
        :'connectivity_ccsd'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EmassClient::Systems` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EmassClient::Systems`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'registration_completion_date')
        self.registration_completion_date = attributes[:'registration_completion_date']
      end

      if attributes.key?(:'system_life_cycle_acquisition_phase')
        self.system_life_cycle_acquisition_phase = attributes[:'system_life_cycle_acquisition_phase']
      end

      if attributes.key?(:'special_type')
        self.special_type = attributes[:'special_type']
      end

      if attributes.key?(:'special_type_description')
        self.special_type_description = attributes[:'special_type_description']
      end

      if attributes.key?(:'mission_portfolio')
        self.mission_portfolio = attributes[:'mission_portfolio']
      end

      if attributes.key?(:'is_nnpi')
        self.is_nnpi = attributes[:'is_nnpi']
      end

      if attributes.key?(:'is_rbc')
        self.is_rbc = attributes[:'is_rbc']
      end

      if attributes.key?(:'is_waiver')
        self.is_waiver = attributes[:'is_waiver']
      end

      if attributes.key?(:'program_office')
        self.program_office = attributes[:'program_office']
      end

      if attributes.key?(:'vram_id')
        self.vram_id = attributes[:'vram_id']
      end

      if attributes.key?(:'system_id')
        self.system_id = attributes[:'system_id']
      end

      if attributes.key?(:'policy')
        self.policy = attributes[:'policy']
      end

      if attributes.key?(:'registration_type')
        self.registration_type = attributes[:'registration_type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'acronym')
        self.acronym = attributes[:'acronym']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'instance')
        self.instance = attributes[:'instance']
      end

      if attributes.key?(:'owning_organization')
        self.owning_organization = attributes[:'owning_organization']
      end

      if attributes.key?(:'secondary_organization')
        self.secondary_organization = attributes[:'secondary_organization']
      end

      if attributes.key?(:'version_release_no')
        self.version_release_no = attributes[:'version_release_no']
      end

      if attributes.key?(:'system_type')
        self.system_type = attributes[:'system_type']
      end

      if attributes.key?(:'is_nss')
        self.is_nss = attributes[:'is_nss']
      end

      if attributes.key?(:'is_public_facing')
        self.is_public_facing = attributes[:'is_public_facing']
      end

      if attributes.key?(:'coams_id')
        self.coams_id = attributes[:'coams_id']
      end

      if attributes.key?(:'is_type_authorization')
        self.is_type_authorization = attributes[:'is_type_authorization']
      end

      if attributes.key?(:'ditpr_id')
        self.ditpr_id = attributes[:'ditpr_id']
      end

      if attributes.key?(:'apms_id')
        self.apms_id = attributes[:'apms_id']
      end

      if attributes.key?(:'vasi_id')
        self.vasi_id = attributes[:'vasi_id']
      end

      if attributes.key?(:'authorization_status')
        self.authorization_status = attributes[:'authorization_status']
      end

      if attributes.key?(:'authorization_date')
        self.authorization_date = attributes[:'authorization_date']
      end

      if attributes.key?(:'authorization_termination_date')
        self.authorization_termination_date = attributes[:'authorization_termination_date']
      end

      if attributes.key?(:'authorization_length')
        self.authorization_length = attributes[:'authorization_length']
      end

      if attributes.key?(:'security_controls_assessor_executive_summary')
        self.security_controls_assessor_executive_summary = attributes[:'security_controls_assessor_executive_summary']
      end

      if attributes.key?(:'risk_review_executive_summary')
        self.risk_review_executive_summary = attributes[:'risk_review_executive_summary']
      end

      if attributes.key?(:'terms_for_auth')
        self.terms_for_auth = attributes[:'terms_for_auth']
      end

      if attributes.key?(:'security_plan_approval_status')
        self.security_plan_approval_status = attributes[:'security_plan_approval_status']
      end

      if attributes.key?(:'security_plan_approval_date')
        self.security_plan_approval_date = attributes[:'security_plan_approval_date']
      end

      if attributes.key?(:'mission_criticality')
        self.mission_criticality = attributes[:'mission_criticality']
      end

      if attributes.key?(:'geographical_association')
        self.geographical_association = attributes[:'geographical_association']
      end

      if attributes.key?(:'system_ownership_controlled')
        self.system_ownership_controlled = attributes[:'system_ownership_controlled']
      end

      if attributes.key?(:'governing_mission_area')
        self.governing_mission_area = attributes[:'governing_mission_area']
      end

      if attributes.key?(:'primary_functional_area')
        self.primary_functional_area = attributes[:'primary_functional_area']
      end

      if attributes.key?(:'secondary_functional_area')
        self.secondary_functional_area = attributes[:'secondary_functional_area']
      end

      if attributes.key?(:'primary_control_set')
        self.primary_control_set = attributes[:'primary_control_set']
      end

      if attributes.key?(:'confidentiality')
        self.confidentiality = attributes[:'confidentiality']
      end

      if attributes.key?(:'integrity')
        self.integrity = attributes[:'integrity']
      end

      if attributes.key?(:'availability')
        self.availability = attributes[:'availability']
      end

      if attributes.key?(:'applied_overlays')
        self.applied_overlays = attributes[:'applied_overlays']
      end

      if attributes.key?(:'applied_stigs')
        self.applied_stigs = attributes[:'applied_stigs']
      end

      if attributes.key?(:'rmf_activity')
        self.rmf_activity = attributes[:'rmf_activity']
      end

      if attributes.key?(:'cross_domain_ticket')
        self.cross_domain_ticket = attributes[:'cross_domain_ticket']
      end

      if attributes.key?(:'ditpr_don_id')
        self.ditpr_don_id = attributes[:'ditpr_don_id']
      end

      if attributes.key?(:'mac')
        self.mac = attributes[:'mac']
      end

      if attributes.key?(:'dod_confidentiality')
        self.dod_confidentiality = attributes[:'dod_confidentiality']
      end

      if attributes.key?(:'contingency_plan_required')
        self.contingency_plan_required = attributes[:'contingency_plan_required']
      end

      if attributes.key?(:'contingency_plan_artifact')
        self.contingency_plan_artifact = attributes[:'contingency_plan_artifact']
      end

      if attributes.key?(:'contingency_plan_tested')
        self.contingency_plan_tested = attributes[:'contingency_plan_tested']
      end

      if attributes.key?(:'contingency_plan_test_date')
        self.contingency_plan_test_date = attributes[:'contingency_plan_test_date']
      end

      if attributes.key?(:'security_review_required')
        self.security_review_required = attributes[:'security_review_required']
      end

      if attributes.key?(:'security_review_completed')
        self.security_review_completed = attributes[:'security_review_completed']
      end

      if attributes.key?(:'security_review_completion_date')
        self.security_review_completion_date = attributes[:'security_review_completion_date']
      end

      if attributes.key?(:'next_security_review_due_date')
        self.next_security_review_due_date = attributes[:'next_security_review_due_date']
      end

      if attributes.key?(:'has_open_poam_item')
        self.has_open_poam_item = attributes[:'has_open_poam_item']
      end

      if attributes.key?(:'has_open_poam_item90to120_past_scheduled_completion_date')
        self.has_open_poam_item90to120_past_scheduled_completion_date = attributes[:'has_open_poam_item90to120_past_scheduled_completion_date']
      end

      if attributes.key?(:'has_open_poam_item120_plus_past_scheudled_completion_date')
        self.has_open_poam_item120_plus_past_scheudled_completion_date = attributes[:'has_open_poam_item120_plus_past_scheudled_completion_date']
      end

      if attributes.key?(:'impact')
        self.impact = attributes[:'impact']
      end

      if attributes.key?(:'has_cui')
        self.has_cui = attributes[:'has_cui']
      end

      if attributes.key?(:'has_pii')
        self.has_pii = attributes[:'has_pii']
      end

      if attributes.key?(:'has_phi')
        self.has_phi = attributes[:'has_phi']
      end

      if attributes.key?(:'ppsm_registration_required')
        self.ppsm_registration_required = attributes[:'ppsm_registration_required']
      end

      if attributes.key?(:'ppsm_registry_number')
        self.ppsm_registry_number = attributes[:'ppsm_registry_number']
      end

      if attributes.key?(:'ppsm_registration_exemption_justification')
        self.ppsm_registration_exemption_justification = attributes[:'ppsm_registration_exemption_justification']
      end

      if attributes.key?(:'interconnected_information_system_and_identifiers')
        self.interconnected_information_system_and_identifiers = attributes[:'interconnected_information_system_and_identifiers']
      end

      if attributes.key?(:'privacy_impact_assessment_required')
        self.privacy_impact_assessment_required = attributes[:'privacy_impact_assessment_required']
      end

      if attributes.key?(:'privacy_impact_assessment_status')
        self.privacy_impact_assessment_status = attributes[:'privacy_impact_assessment_status']
      end

      if attributes.key?(:'privacy_impact_assessment_date')
        self.privacy_impact_assessment_date = attributes[:'privacy_impact_assessment_date']
      end

      if attributes.key?(:'privacy_impact_assessment_artifact')
        self.privacy_impact_assessment_artifact = attributes[:'privacy_impact_assessment_artifact']
      end

      if attributes.key?(:'user_defined_field1')
        self.user_defined_field1 = attributes[:'user_defined_field1']
      end

      if attributes.key?(:'user_defined_field2')
        self.user_defined_field2 = attributes[:'user_defined_field2']
      end

      if attributes.key?(:'user_defined_field3')
        self.user_defined_field3 = attributes[:'user_defined_field3']
      end

      if attributes.key?(:'user_defined_field4')
        self.user_defined_field4 = attributes[:'user_defined_field4']
      end

      if attributes.key?(:'user_defined_field5')
        self.user_defined_field5 = attributes[:'user_defined_field5']
      end

      if attributes.key?(:'current_rmf_lifecycle_step')
        self.current_rmf_lifecycle_step = attributes[:'current_rmf_lifecycle_step']
      end

      if attributes.key?(:'other_information')
        self.other_information = attributes[:'other_information']
      end

      if attributes.key?(:'reports_for_scorecard')
        self.reports_for_scorecard = attributes[:'reports_for_scorecard']
      end

      if attributes.key?(:'highest_system_data_classification')
        self.highest_system_data_classification = attributes[:'highest_system_data_classification']
      end

      if attributes.key?(:'overall_classification')
        self.overall_classification = attributes[:'overall_classification']
      end

      if attributes.key?(:'is_hva')
        self.is_hva = attributes[:'is_hva']
      end

      if attributes.key?(:'is_financial_management')
        self.is_financial_management = attributes[:'is_financial_management']
      end

      if attributes.key?(:'is_reciprocity')
        self.is_reciprocity = attributes[:'is_reciprocity']
      end

      if attributes.key?(:'reciprocity_exemption')
        self.reciprocity_exemption = attributes[:'reciprocity_exemption']
      end

      if attributes.key?(:'cloud_computing')
        self.cloud_computing = attributes[:'cloud_computing']
      end

      if attributes.key?(:'cloud_type')
        self.cloud_type = attributes[:'cloud_type']
      end

      if attributes.key?(:'authorization_to_connect_status')
        self.authorization_to_connect_status = attributes[:'authorization_to_connect_status']
      end

      if attributes.key?(:'is_saa_s')
        self.is_saa_s = attributes[:'is_saa_s']
      end

      if attributes.key?(:'is_paa_s')
        self.is_paa_s = attributes[:'is_paa_s']
      end

      if attributes.key?(:'is_iaa_s')
        self.is_iaa_s = attributes[:'is_iaa_s']
      end

      if attributes.key?(:'other_service_models')
        self.other_service_models = attributes[:'other_service_models']
      end

      if attributes.key?(:'need_date')
        self.need_date = attributes[:'need_date']
      end

      if attributes.key?(:'overall_risk_score')
        self.overall_risk_score = attributes[:'overall_risk_score']
      end

      if attributes.key?(:'is_hrr')
        self.is_hrr = attributes[:'is_hrr']
      end

      if attributes.key?(:'connectivity_authorization_date')
        self.connectivity_authorization_date = attributes[:'connectivity_authorization_date']
      end

      if attributes.key?(:'connectivity_authorization_termination_date')
        self.connectivity_authorization_termination_date = attributes[:'connectivity_authorization_termination_date']
      end

      if attributes.key?(:'system_development_life_cycle')
        self.system_development_life_cycle = attributes[:'system_development_life_cycle']
      end

      if attributes.key?(:'is_fisma_reportable')
        self.is_fisma_reportable = attributes[:'is_fisma_reportable']
      end

      if attributes.key?(:'group_tagging')
        self.group_tagging = attributes[:'group_tagging']
      end

      if attributes.key?(:'group_tag_descriptions')
        self.group_tag_descriptions = attributes[:'group_tag_descriptions']
      end

      if attributes.key?(:'dadms_id')
        self.dadms_id = attributes[:'dadms_id']
      end

      if attributes.key?(:'dadms_expiration_date')
        self.dadms_expiration_date = attributes[:'dadms_expiration_date']
      end

      if attributes.key?(:'enclave_connectivity')
        self.enclave_connectivity = attributes[:'enclave_connectivity']
      end

      if attributes.key?(:'environment_type')
        self.environment_type = attributes[:'environment_type']
      end

      if attributes.key?(:'navy_common_control_provider')
        self.navy_common_control_provider = attributes[:'navy_common_control_provider']
      end

      if attributes.key?(:'navy_cloud_broker')
        self.navy_cloud_broker = attributes[:'navy_cloud_broker']
      end

      if attributes.key?(:'cloud_broker_emass_id')
        self.cloud_broker_emass_id = attributes[:'cloud_broker_emass_id']
      end

      if attributes.key?(:'cloud_broker_provisional_authorization_atd')
        self.cloud_broker_provisional_authorization_atd = attributes[:'cloud_broker_provisional_authorization_atd']
      end

      if attributes.key?(:'navy_joint_authorization')
        self.navy_joint_authorization = attributes[:'navy_joint_authorization']
      end

      if attributes.key?(:'nmci_ngen_clins')
        self.nmci_ngen_clins = attributes[:'nmci_ngen_clins']
      end

      if attributes.key?(:'enterprise_locations')
        self.enterprise_locations = attributes[:'enterprise_locations']
      end

      if attributes.key?(:'whitelist_id')
        self.whitelist_id = attributes[:'whitelist_id']
      end

      if attributes.key?(:'whitelist_inventory')
        self.whitelist_inventory = attributes[:'whitelist_inventory']
      end

      if attributes.key?(:'acquisition_category')
        self.acquisition_category = attributes[:'acquisition_category']
      end

      if attributes.key?(:'software_category')
        self.software_category = attributes[:'software_category']
      end

      if attributes.key?(:'cybersecurity_service_provider')
        self.cybersecurity_service_provider = attributes[:'cybersecurity_service_provider']
      end

      if attributes.key?(:'cybersecurity_service_provider_exception_justification')
        self.cybersecurity_service_provider_exception_justification = attributes[:'cybersecurity_service_provider_exception_justification']
      end

      if attributes.key?(:'maximum_tolerable_downtime')
        self.maximum_tolerable_downtime = attributes[:'maximum_tolerable_downtime']
      end

      if attributes.key?(:'recovery_time_objective')
        self.recovery_time_objective = attributes[:'recovery_time_objective']
      end

      if attributes.key?(:'recovery_point_objective')
        self.recovery_point_objective = attributes[:'recovery_point_objective']
      end

      if attributes.key?(:'business_impact_analysis_required')
        self.business_impact_analysis_required = attributes[:'business_impact_analysis_required']
      end

      if attributes.key?(:'business_impact_analysis_artifact')
        self.business_impact_analysis_artifact = attributes[:'business_impact_analysis_artifact']
      end

      if attributes.key?(:'incident_response_plan_required')
        self.incident_response_plan_required = attributes[:'incident_response_plan_required']
      end

      if attributes.key?(:'incident_response_plan_artifact')
        self.incident_response_plan_artifact = attributes[:'incident_response_plan_artifact']
      end

      if attributes.key?(:'disaster_recovery_plan_required')
        self.disaster_recovery_plan_required = attributes[:'disaster_recovery_plan_required']
      end

      if attributes.key?(:'disaster_recovery_plan_artifact')
        self.disaster_recovery_plan_artifact = attributes[:'disaster_recovery_plan_artifact']
      end

      if attributes.key?(:'privacy_threshold_analysis_completed')
        self.privacy_threshold_analysis_completed = attributes[:'privacy_threshold_analysis_completed']
      end

      if attributes.key?(:'privacy_threshold_analysis_date')
        self.privacy_threshold_analysis_date = attributes[:'privacy_threshold_analysis_date']
      end

      if attributes.key?(:'privacy_threshold_analysis_artifact')
        self.privacy_threshold_analysis_artifact = attributes[:'privacy_threshold_analysis_artifact']
      end

      if attributes.key?(:'privacy_act_system_of_records_notice_required')
        self.privacy_act_system_of_records_notice_required = attributes[:'privacy_act_system_of_records_notice_required']
      end

      if attributes.key?(:'e_authentication_risk_assessment_required')
        self.e_authentication_risk_assessment_required = attributes[:'e_authentication_risk_assessment_required']
      end

      if attributes.key?(:'e_authentication_risk_assessment_date')
        self.e_authentication_risk_assessment_date = attributes[:'e_authentication_risk_assessment_date']
      end

      if attributes.key?(:'e_authentication_risk_assessment_artifact')
        self.e_authentication_risk_assessment_artifact = attributes[:'e_authentication_risk_assessment_artifact']
      end

      if attributes.key?(:'ipv4_only_assets')
        self.ipv4_only_assets = attributes[:'ipv4_only_assets']
      end

      if attributes.key?(:'ipv6_only_assets')
        self.ipv6_only_assets = attributes[:'ipv6_only_assets']
      end

      if attributes.key?(:'ipv4_ipv6_dual_stack_assets')
        self.ipv4_ipv6_dual_stack_assets = attributes[:'ipv4_ipv6_dual_stack_assets']
      end

      if attributes.key?(:'total_ip_assets')
        self.total_ip_assets = attributes[:'total_ip_assets']
      end

      if attributes.key?(:'originating_organization')
        self.originating_organization = attributes[:'originating_organization']
      end

      if attributes.key?(:'system_use_justification')
        self.system_use_justification = attributes[:'system_use_justification']
      end

      if attributes.key?(:'system_use_justification_artifact')
        self.system_use_justification_artifact = attributes[:'system_use_justification_artifact']
      end

      if attributes.key?(:'authorization_to_use_status')
        self.authorization_to_use_status = attributes[:'authorization_to_use_status']
      end

      if attributes.key?(:'reciprocity_acceptance_status')
        self.reciprocity_acceptance_status = attributes[:'reciprocity_acceptance_status']
      end

      if attributes.key?(:'use_authorization_date')
        self.use_authorization_date = attributes[:'use_authorization_date']
      end

      if attributes.key?(:'reciprocity_acceptance_date')
        self.reciprocity_acceptance_date = attributes[:'reciprocity_acceptance_date']
      end

      if attributes.key?(:'use_authorization_termination_date')
        self.use_authorization_termination_date = attributes[:'use_authorization_termination_date']
      end

      if attributes.key?(:'reciprocity_acceptance_termination_date')
        self.reciprocity_acceptance_termination_date = attributes[:'reciprocity_acceptance_termination_date']
      end

      if attributes.key?(:'terms_conditions_for_use_summary')
        self.terms_conditions_for_use_summary = attributes[:'terms_conditions_for_use_summary']
      end

      if attributes.key?(:'terms_conditions_for_reciprocity_summary')
        self.terms_conditions_for_reciprocity_summary = attributes[:'terms_conditions_for_reciprocity_summary']
      end

      if attributes.key?(:'primary_mission_essential_function')
        self.primary_mission_essential_function = attributes[:'primary_mission_essential_function']
      end

      if attributes.key?(:'pmef_description')
        self.pmef_description = attributes[:'pmef_description']
      end

      if attributes.key?(:'mission_essential_function')
        self.mission_essential_function = attributes[:'mission_essential_function']
      end

      if attributes.key?(:'mef_description')
        self.mef_description = attributes[:'mef_description']
      end

      if attributes.key?(:'administration')
        self.administration = attributes[:'administration']
      end

      if attributes.key?(:'administration_other_justification')
        self.administration_other_justification = attributes[:'administration_other_justification']
      end

      if attributes.key?(:'atc_iatc_granted_date')
        self.atc_iatc_granted_date = attributes[:'atc_iatc_granted_date']
      end

      if attributes.key?(:'atc_iatc_expiration_date')
        self.atc_iatc_expiration_date = attributes[:'atc_iatc_expiration_date']
      end

      if attributes.key?(:'atc_iatc_pending_items')
        self.atc_iatc_pending_items = attributes[:'atc_iatc_pending_items']
      end

      if attributes.key?(:'pending_items_due_date')
        self.pending_items_due_date = attributes[:'pending_items_due_date']
      end

      if attributes.key?(:'dodinn_system_id')
        self.dodinn_system_id = attributes[:'dodinn_system_id']
      end

      if attributes.key?(:'authorization_to_use_connect_status')
        self.authorization_to_use_connect_status = attributes[:'authorization_to_use_connect_status']
      end

      if attributes.key?(:'use_connect_authorization_date')
        self.use_connect_authorization_date = attributes[:'use_connect_authorization_date']
      end

      if attributes.key?(:'use_connect_authorization_termination_date')
        self.use_connect_authorization_termination_date = attributes[:'use_connect_authorization_termination_date']
      end

      if attributes.key?(:'terms_conditions_for_use_connect_summary')
        self.terms_conditions_for_use_connect_summary = attributes[:'terms_conditions_for_use_connect_summary']
      end

      if attributes.key?(:'workstations')
        self.workstations = attributes[:'workstations']
      end

      if attributes.key?(:'servers')
        self.servers = attributes[:'servers']
      end

      if attributes.key?(:'connectivity_ccsd')
        if (value = attributes[:'connectivity_ccsd']).is_a?(Array)
          self.connectivity_ccsd = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@authorization_length.nil? && @authorization_length > 1825
        invalid_properties.push('invalid value for "authorization_length", must be smaller than or equal to 1825.')
      end

      if !@authorization_length.nil? && @authorization_length < 28
        invalid_properties.push('invalid value for "authorization_length", must be greater than or equal to 28.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      policy_validator = EnumAttributeValidator.new('String', ["RMF", "DIACAP", "unknown_default_open_api"])
      return false unless policy_validator.valid?(@policy)
      registration_type_validator = EnumAttributeValidator.new('String', ["Assess and Authorize", "Assess Only", "Guest", "Regular", "Functional", "Cloud Service Provider", "Authorization To Use", "unknown_default_open_api"])
      return false unless registration_type_validator.valid?(@registration_type)
      system_type_validator = EnumAttributeValidator.new('String', ["IS Major Application", "IS Enclave", "Platform IT", "Platform IT System", "Platform IT Interconnection", "AIS Application", "Outsourced IT-Based Process (DoD-controlled)", "Enclave", "Outsourced IT-Based Process (service provider shared)", "unknown_default_open_api"])
      return false unless system_type_validator.valid?(@system_type)
      return false if !@authorization_length.nil? && @authorization_length > 1825
      return false if !@authorization_length.nil? && @authorization_length < 28
      security_plan_approval_status_validator = EnumAttributeValidator.new('String', ["Approved", "Not Yet Approved", "Denied", "unknown_default_open_api"])
      return false unless security_plan_approval_status_validator.valid?(@security_plan_approval_status)
      primary_control_set_validator = EnumAttributeValidator.new('String', ["NIST SP 800-53 Revision 4", "DoDI 8500.2", "unknown_default_open_api"])
      return false unless primary_control_set_validator.valid?(@primary_control_set)
      confidentiality_validator = EnumAttributeValidator.new('String', ["High", "Moderate", "Low", "unknown_default_open_api"])
      return false unless confidentiality_validator.valid?(@confidentiality)
      integrity_validator = EnumAttributeValidator.new('String', ["High", "Moderate", "Low", "unknown_default_open_api"])
      return false unless integrity_validator.valid?(@integrity)
      availability_validator = EnumAttributeValidator.new('String', ["High", "Moderate", "Low", "unknown_default_open_api"])
      return false unless availability_validator.valid?(@availability)
      mac_validator = EnumAttributeValidator.new('String', ["I", "II", "III", "unknown_default_open_api"])
      return false unless mac_validator.valid?(@mac)
      dod_confidentiality_validator = EnumAttributeValidator.new('String', ["Public", "Sensitive", "Classified", "unknown_default_open_api"])
      return false unless dod_confidentiality_validator.valid?(@dod_confidentiality)
      impact_validator = EnumAttributeValidator.new('String', ["Low", "Moderate", "High", "unknown_default_open_api"])
      return false unless impact_validator.valid?(@impact)
      privacy_impact_assessment_status_validator = EnumAttributeValidator.new('String', ["Not Started", "In Progress", "Completed", "unknown_default_open_api"])
      return false unless privacy_impact_assessment_status_validator.valid?(@privacy_impact_assessment_status)
      current_rmf_lifecycle_step_validator = EnumAttributeValidator.new('String', ["1 - Categorize", "2 - Select", "3 - Implement", "4 - Assess", "5 - Authorize", "6 - Monitor", "unknown_default_open_api"])
      return false unless current_rmf_lifecycle_step_validator.valid?(@current_rmf_lifecycle_step)
      cloud_type_validator = EnumAttributeValidator.new('String', ["Hybrid", "Private", "Public", "unknown_default_open_api"])
      return false unless cloud_type_validator.valid?(@cloud_type)
      authorization_to_connect_status_validator = EnumAttributeValidator.new('String', ["Authority to Connect (ATC)", "Denial of Authority to Connect (DATC)", "Not Yet Connected", "Decommissioned", "unknown_default_open_api"])
      return false unless authorization_to_connect_status_validator.valid?(@authorization_to_connect_status)
      maximum_tolerable_downtime_validator = EnumAttributeValidator.new('String', ["Immediate", "Less than 2 hours", "Less than 4 hours", "Less than 6 hours", "unknown_default_open_api"])
      return false unless maximum_tolerable_downtime_validator.valid?(@maximum_tolerable_downtime)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] policy Object to be assigned
    def policy=(policy)
      validator = EnumAttributeValidator.new('String', ["RMF", "DIACAP", "unknown_default_open_api"])
      unless validator.valid?(policy)
        fail ArgumentError, "invalid value for \"policy\", must be one of #{validator.allowable_values}."
      end
      @policy = policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] registration_type Object to be assigned
    def registration_type=(registration_type)
      validator = EnumAttributeValidator.new('String', ["Assess and Authorize", "Assess Only", "Guest", "Regular", "Functional", "Cloud Service Provider", "Authorization To Use", "unknown_default_open_api"])
      unless validator.valid?(registration_type)
        fail ArgumentError, "invalid value for \"registration_type\", must be one of #{validator.allowable_values}."
      end
      @registration_type = registration_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] system_type Object to be assigned
    def system_type=(system_type)
      validator = EnumAttributeValidator.new('String', ["IS Major Application", "IS Enclave", "Platform IT", "Platform IT System", "Platform IT Interconnection", "AIS Application", "Outsourced IT-Based Process (DoD-controlled)", "Enclave", "Outsourced IT-Based Process (service provider shared)", "unknown_default_open_api"])
      unless validator.valid?(system_type)
        fail ArgumentError, "invalid value for \"system_type\", must be one of #{validator.allowable_values}."
      end
      @system_type = system_type
    end

    # Custom attribute writer method with validation
    # @param [Object] authorization_length Value to be assigned
    def authorization_length=(authorization_length)
      if !authorization_length.nil? && authorization_length > 1825
        fail ArgumentError, 'invalid value for "authorization_length", must be smaller than or equal to 1825.'
      end

      if !authorization_length.nil? && authorization_length < 28
        fail ArgumentError, 'invalid value for "authorization_length", must be greater than or equal to 28.'
      end

      @authorization_length = authorization_length
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_plan_approval_status Object to be assigned
    def security_plan_approval_status=(security_plan_approval_status)
      validator = EnumAttributeValidator.new('String', ["Approved", "Not Yet Approved", "Denied", "unknown_default_open_api"])
      unless validator.valid?(security_plan_approval_status)
        fail ArgumentError, "invalid value for \"security_plan_approval_status\", must be one of #{validator.allowable_values}."
      end
      @security_plan_approval_status = security_plan_approval_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_control_set Object to be assigned
    def primary_control_set=(primary_control_set)
      validator = EnumAttributeValidator.new('String', ["NIST SP 800-53 Revision 4", "DoDI 8500.2", "unknown_default_open_api"])
      unless validator.valid?(primary_control_set)
        fail ArgumentError, "invalid value for \"primary_control_set\", must be one of #{validator.allowable_values}."
      end
      @primary_control_set = primary_control_set
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confidentiality Object to be assigned
    def confidentiality=(confidentiality)
      validator = EnumAttributeValidator.new('String', ["High", "Moderate", "Low", "unknown_default_open_api"])
      unless validator.valid?(confidentiality)
        fail ArgumentError, "invalid value for \"confidentiality\", must be one of #{validator.allowable_values}."
      end
      @confidentiality = confidentiality
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] integrity Object to be assigned
    def integrity=(integrity)
      validator = EnumAttributeValidator.new('String', ["High", "Moderate", "Low", "unknown_default_open_api"])
      unless validator.valid?(integrity)
        fail ArgumentError, "invalid value for \"integrity\", must be one of #{validator.allowable_values}."
      end
      @integrity = integrity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability Object to be assigned
    def availability=(availability)
      validator = EnumAttributeValidator.new('String', ["High", "Moderate", "Low", "unknown_default_open_api"])
      unless validator.valid?(availability)
        fail ArgumentError, "invalid value for \"availability\", must be one of #{validator.allowable_values}."
      end
      @availability = availability
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mac Object to be assigned
    def mac=(mac)
      validator = EnumAttributeValidator.new('String', ["I", "II", "III", "unknown_default_open_api"])
      unless validator.valid?(mac)
        fail ArgumentError, "invalid value for \"mac\", must be one of #{validator.allowable_values}."
      end
      @mac = mac
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dod_confidentiality Object to be assigned
    def dod_confidentiality=(dod_confidentiality)
      validator = EnumAttributeValidator.new('String', ["Public", "Sensitive", "Classified", "unknown_default_open_api"])
      unless validator.valid?(dod_confidentiality)
        fail ArgumentError, "invalid value for \"dod_confidentiality\", must be one of #{validator.allowable_values}."
      end
      @dod_confidentiality = dod_confidentiality
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] impact Object to be assigned
    def impact=(impact)
      validator = EnumAttributeValidator.new('String', ["Low", "Moderate", "High", "unknown_default_open_api"])
      unless validator.valid?(impact)
        fail ArgumentError, "invalid value for \"impact\", must be one of #{validator.allowable_values}."
      end
      @impact = impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] privacy_impact_assessment_status Object to be assigned
    def privacy_impact_assessment_status=(privacy_impact_assessment_status)
      validator = EnumAttributeValidator.new('String', ["Not Started", "In Progress", "Completed", "unknown_default_open_api"])
      unless validator.valid?(privacy_impact_assessment_status)
        fail ArgumentError, "invalid value for \"privacy_impact_assessment_status\", must be one of #{validator.allowable_values}."
      end
      @privacy_impact_assessment_status = privacy_impact_assessment_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_rmf_lifecycle_step Object to be assigned
    def current_rmf_lifecycle_step=(current_rmf_lifecycle_step)
      validator = EnumAttributeValidator.new('String', ["1 - Categorize", "2 - Select", "3 - Implement", "4 - Assess", "5 - Authorize", "6 - Monitor", "unknown_default_open_api"])
      unless validator.valid?(current_rmf_lifecycle_step)
        fail ArgumentError, "invalid value for \"current_rmf_lifecycle_step\", must be one of #{validator.allowable_values}."
      end
      @current_rmf_lifecycle_step = current_rmf_lifecycle_step
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cloud_type Object to be assigned
    def cloud_type=(cloud_type)
      validator = EnumAttributeValidator.new('String', ["Hybrid", "Private", "Public", "unknown_default_open_api"])
      unless validator.valid?(cloud_type)
        fail ArgumentError, "invalid value for \"cloud_type\", must be one of #{validator.allowable_values}."
      end
      @cloud_type = cloud_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_to_connect_status Object to be assigned
    def authorization_to_connect_status=(authorization_to_connect_status)
      validator = EnumAttributeValidator.new('String', ["Authority to Connect (ATC)", "Denial of Authority to Connect (DATC)", "Not Yet Connected", "Decommissioned", "unknown_default_open_api"])
      unless validator.valid?(authorization_to_connect_status)
        fail ArgumentError, "invalid value for \"authorization_to_connect_status\", must be one of #{validator.allowable_values}."
      end
      @authorization_to_connect_status = authorization_to_connect_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maximum_tolerable_downtime Object to be assigned
    def maximum_tolerable_downtime=(maximum_tolerable_downtime)
      validator = EnumAttributeValidator.new('String', ["Immediate", "Less than 2 hours", "Less than 4 hours", "Less than 6 hours", "unknown_default_open_api"])
      unless validator.valid?(maximum_tolerable_downtime)
        fail ArgumentError, "invalid value for \"maximum_tolerable_downtime\", must be one of #{validator.allowable_values}."
      end
      @maximum_tolerable_downtime = maximum_tolerable_downtime
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          registration_completion_date == o.registration_completion_date &&
          system_life_cycle_acquisition_phase == o.system_life_cycle_acquisition_phase &&
          special_type == o.special_type &&
          special_type_description == o.special_type_description &&
          mission_portfolio == o.mission_portfolio &&
          is_nnpi == o.is_nnpi &&
          is_rbc == o.is_rbc &&
          is_waiver == o.is_waiver &&
          program_office == o.program_office &&
          vram_id == o.vram_id &&
          system_id == o.system_id &&
          policy == o.policy &&
          registration_type == o.registration_type &&
          name == o.name &&
          acronym == o.acronym &&
          description == o.description &&
          instance == o.instance &&
          owning_organization == o.owning_organization &&
          secondary_organization == o.secondary_organization &&
          version_release_no == o.version_release_no &&
          system_type == o.system_type &&
          is_nss == o.is_nss &&
          is_public_facing == o.is_public_facing &&
          coams_id == o.coams_id &&
          is_type_authorization == o.is_type_authorization &&
          ditpr_id == o.ditpr_id &&
          apms_id == o.apms_id &&
          vasi_id == o.vasi_id &&
          authorization_status == o.authorization_status &&
          authorization_date == o.authorization_date &&
          authorization_termination_date == o.authorization_termination_date &&
          authorization_length == o.authorization_length &&
          security_controls_assessor_executive_summary == o.security_controls_assessor_executive_summary &&
          risk_review_executive_summary == o.risk_review_executive_summary &&
          terms_for_auth == o.terms_for_auth &&
          security_plan_approval_status == o.security_plan_approval_status &&
          security_plan_approval_date == o.security_plan_approval_date &&
          mission_criticality == o.mission_criticality &&
          geographical_association == o.geographical_association &&
          system_ownership_controlled == o.system_ownership_controlled &&
          governing_mission_area == o.governing_mission_area &&
          primary_functional_area == o.primary_functional_area &&
          secondary_functional_area == o.secondary_functional_area &&
          primary_control_set == o.primary_control_set &&
          confidentiality == o.confidentiality &&
          integrity == o.integrity &&
          availability == o.availability &&
          applied_overlays == o.applied_overlays &&
          applied_stigs == o.applied_stigs &&
          rmf_activity == o.rmf_activity &&
          cross_domain_ticket == o.cross_domain_ticket &&
          ditpr_don_id == o.ditpr_don_id &&
          mac == o.mac &&
          dod_confidentiality == o.dod_confidentiality &&
          contingency_plan_required == o.contingency_plan_required &&
          contingency_plan_artifact == o.contingency_plan_artifact &&
          contingency_plan_tested == o.contingency_plan_tested &&
          contingency_plan_test_date == o.contingency_plan_test_date &&
          security_review_required == o.security_review_required &&
          security_review_completed == o.security_review_completed &&
          security_review_completion_date == o.security_review_completion_date &&
          next_security_review_due_date == o.next_security_review_due_date &&
          has_open_poam_item == o.has_open_poam_item &&
          has_open_poam_item90to120_past_scheduled_completion_date == o.has_open_poam_item90to120_past_scheduled_completion_date &&
          has_open_poam_item120_plus_past_scheudled_completion_date == o.has_open_poam_item120_plus_past_scheudled_completion_date &&
          impact == o.impact &&
          has_cui == o.has_cui &&
          has_pii == o.has_pii &&
          has_phi == o.has_phi &&
          ppsm_registration_required == o.ppsm_registration_required &&
          ppsm_registry_number == o.ppsm_registry_number &&
          ppsm_registration_exemption_justification == o.ppsm_registration_exemption_justification &&
          interconnected_information_system_and_identifiers == o.interconnected_information_system_and_identifiers &&
          privacy_impact_assessment_required == o.privacy_impact_assessment_required &&
          privacy_impact_assessment_status == o.privacy_impact_assessment_status &&
          privacy_impact_assessment_date == o.privacy_impact_assessment_date &&
          privacy_impact_assessment_artifact == o.privacy_impact_assessment_artifact &&
          user_defined_field1 == o.user_defined_field1 &&
          user_defined_field2 == o.user_defined_field2 &&
          user_defined_field3 == o.user_defined_field3 &&
          user_defined_field4 == o.user_defined_field4 &&
          user_defined_field5 == o.user_defined_field5 &&
          current_rmf_lifecycle_step == o.current_rmf_lifecycle_step &&
          other_information == o.other_information &&
          reports_for_scorecard == o.reports_for_scorecard &&
          highest_system_data_classification == o.highest_system_data_classification &&
          overall_classification == o.overall_classification &&
          is_hva == o.is_hva &&
          is_financial_management == o.is_financial_management &&
          is_reciprocity == o.is_reciprocity &&
          reciprocity_exemption == o.reciprocity_exemption &&
          cloud_computing == o.cloud_computing &&
          cloud_type == o.cloud_type &&
          authorization_to_connect_status == o.authorization_to_connect_status &&
          is_saa_s == o.is_saa_s &&
          is_paa_s == o.is_paa_s &&
          is_iaa_s == o.is_iaa_s &&
          other_service_models == o.other_service_models &&
          need_date == o.need_date &&
          overall_risk_score == o.overall_risk_score &&
          is_hrr == o.is_hrr &&
          connectivity_authorization_date == o.connectivity_authorization_date &&
          connectivity_authorization_termination_date == o.connectivity_authorization_termination_date &&
          system_development_life_cycle == o.system_development_life_cycle &&
          is_fisma_reportable == o.is_fisma_reportable &&
          group_tagging == o.group_tagging &&
          group_tag_descriptions == o.group_tag_descriptions &&
          dadms_id == o.dadms_id &&
          dadms_expiration_date == o.dadms_expiration_date &&
          enclave_connectivity == o.enclave_connectivity &&
          environment_type == o.environment_type &&
          navy_common_control_provider == o.navy_common_control_provider &&
          navy_cloud_broker == o.navy_cloud_broker &&
          cloud_broker_emass_id == o.cloud_broker_emass_id &&
          cloud_broker_provisional_authorization_atd == o.cloud_broker_provisional_authorization_atd &&
          navy_joint_authorization == o.navy_joint_authorization &&
          nmci_ngen_clins == o.nmci_ngen_clins &&
          enterprise_locations == o.enterprise_locations &&
          whitelist_id == o.whitelist_id &&
          whitelist_inventory == o.whitelist_inventory &&
          acquisition_category == o.acquisition_category &&
          software_category == o.software_category &&
          cybersecurity_service_provider == o.cybersecurity_service_provider &&
          cybersecurity_service_provider_exception_justification == o.cybersecurity_service_provider_exception_justification &&
          maximum_tolerable_downtime == o.maximum_tolerable_downtime &&
          recovery_time_objective == o.recovery_time_objective &&
          recovery_point_objective == o.recovery_point_objective &&
          business_impact_analysis_required == o.business_impact_analysis_required &&
          business_impact_analysis_artifact == o.business_impact_analysis_artifact &&
          incident_response_plan_required == o.incident_response_plan_required &&
          incident_response_plan_artifact == o.incident_response_plan_artifact &&
          disaster_recovery_plan_required == o.disaster_recovery_plan_required &&
          disaster_recovery_plan_artifact == o.disaster_recovery_plan_artifact &&
          privacy_threshold_analysis_completed == o.privacy_threshold_analysis_completed &&
          privacy_threshold_analysis_date == o.privacy_threshold_analysis_date &&
          privacy_threshold_analysis_artifact == o.privacy_threshold_analysis_artifact &&
          privacy_act_system_of_records_notice_required == o.privacy_act_system_of_records_notice_required &&
          e_authentication_risk_assessment_required == o.e_authentication_risk_assessment_required &&
          e_authentication_risk_assessment_date == o.e_authentication_risk_assessment_date &&
          e_authentication_risk_assessment_artifact == o.e_authentication_risk_assessment_artifact &&
          ipv4_only_assets == o.ipv4_only_assets &&
          ipv6_only_assets == o.ipv6_only_assets &&
          ipv4_ipv6_dual_stack_assets == o.ipv4_ipv6_dual_stack_assets &&
          total_ip_assets == o.total_ip_assets &&
          originating_organization == o.originating_organization &&
          system_use_justification == o.system_use_justification &&
          system_use_justification_artifact == o.system_use_justification_artifact &&
          authorization_to_use_status == o.authorization_to_use_status &&
          reciprocity_acceptance_status == o.reciprocity_acceptance_status &&
          use_authorization_date == o.use_authorization_date &&
          reciprocity_acceptance_date == o.reciprocity_acceptance_date &&
          use_authorization_termination_date == o.use_authorization_termination_date &&
          reciprocity_acceptance_termination_date == o.reciprocity_acceptance_termination_date &&
          terms_conditions_for_use_summary == o.terms_conditions_for_use_summary &&
          terms_conditions_for_reciprocity_summary == o.terms_conditions_for_reciprocity_summary &&
          primary_mission_essential_function == o.primary_mission_essential_function &&
          pmef_description == o.pmef_description &&
          mission_essential_function == o.mission_essential_function &&
          mef_description == o.mef_description &&
          administration == o.administration &&
          administration_other_justification == o.administration_other_justification &&
          atc_iatc_granted_date == o.atc_iatc_granted_date &&
          atc_iatc_expiration_date == o.atc_iatc_expiration_date &&
          atc_iatc_pending_items == o.atc_iatc_pending_items &&
          pending_items_due_date == o.pending_items_due_date &&
          dodinn_system_id == o.dodinn_system_id &&
          authorization_to_use_connect_status == o.authorization_to_use_connect_status &&
          use_connect_authorization_date == o.use_connect_authorization_date &&
          use_connect_authorization_termination_date == o.use_connect_authorization_termination_date &&
          terms_conditions_for_use_connect_summary == o.terms_conditions_for_use_connect_summary &&
          workstations == o.workstations &&
          servers == o.servers &&
          connectivity_ccsd == o.connectivity_ccsd
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [registration_completion_date, system_life_cycle_acquisition_phase, special_type, special_type_description, mission_portfolio, is_nnpi, is_rbc, is_waiver, program_office, vram_id, system_id, policy, registration_type, name, acronym, description, instance, owning_organization, secondary_organization, version_release_no, system_type, is_nss, is_public_facing, coams_id, is_type_authorization, ditpr_id, apms_id, vasi_id, authorization_status, authorization_date, authorization_termination_date, authorization_length, security_controls_assessor_executive_summary, risk_review_executive_summary, terms_for_auth, security_plan_approval_status, security_plan_approval_date, mission_criticality, geographical_association, system_ownership_controlled, governing_mission_area, primary_functional_area, secondary_functional_area, primary_control_set, confidentiality, integrity, availability, applied_overlays, applied_stigs, rmf_activity, cross_domain_ticket, ditpr_don_id, mac, dod_confidentiality, contingency_plan_required, contingency_plan_artifact, contingency_plan_tested, contingency_plan_test_date, security_review_required, security_review_completed, security_review_completion_date, next_security_review_due_date, has_open_poam_item, has_open_poam_item90to120_past_scheduled_completion_date, has_open_poam_item120_plus_past_scheudled_completion_date, impact, has_cui, has_pii, has_phi, ppsm_registration_required, ppsm_registry_number, ppsm_registration_exemption_justification, interconnected_information_system_and_identifiers, privacy_impact_assessment_required, privacy_impact_assessment_status, privacy_impact_assessment_date, privacy_impact_assessment_artifact, user_defined_field1, user_defined_field2, user_defined_field3, user_defined_field4, user_defined_field5, current_rmf_lifecycle_step, other_information, reports_for_scorecard, highest_system_data_classification, overall_classification, is_hva, is_financial_management, is_reciprocity, reciprocity_exemption, cloud_computing, cloud_type, authorization_to_connect_status, is_saa_s, is_paa_s, is_iaa_s, other_service_models, need_date, overall_risk_score, is_hrr, connectivity_authorization_date, connectivity_authorization_termination_date, system_development_life_cycle, is_fisma_reportable, group_tagging, group_tag_descriptions, dadms_id, dadms_expiration_date, enclave_connectivity, environment_type, navy_common_control_provider, navy_cloud_broker, cloud_broker_emass_id, cloud_broker_provisional_authorization_atd, navy_joint_authorization, nmci_ngen_clins, enterprise_locations, whitelist_id, whitelist_inventory, acquisition_category, software_category, cybersecurity_service_provider, cybersecurity_service_provider_exception_justification, maximum_tolerable_downtime, recovery_time_objective, recovery_point_objective, business_impact_analysis_required, business_impact_analysis_artifact, incident_response_plan_required, incident_response_plan_artifact, disaster_recovery_plan_required, disaster_recovery_plan_artifact, privacy_threshold_analysis_completed, privacy_threshold_analysis_date, privacy_threshold_analysis_artifact, privacy_act_system_of_records_notice_required, e_authentication_risk_assessment_required, e_authentication_risk_assessment_date, e_authentication_risk_assessment_artifact, ipv4_only_assets, ipv6_only_assets, ipv4_ipv6_dual_stack_assets, total_ip_assets, originating_organization, system_use_justification, system_use_justification_artifact, authorization_to_use_status, reciprocity_acceptance_status, use_authorization_date, reciprocity_acceptance_date, use_authorization_termination_date, reciprocity_acceptance_termination_date, terms_conditions_for_use_summary, terms_conditions_for_reciprocity_summary, primary_mission_essential_function, pmef_description, mission_essential_function, mef_description, administration, administration_other_justification, atc_iatc_granted_date, atc_iatc_expiration_date, atc_iatc_pending_items, pending_items_due_date, dodinn_system_id, authorization_to_use_connect_status, use_connect_authorization_date, use_connect_authorization_termination_date, terms_conditions_for_use_connect_summary, workstations, servers, connectivity_ccsd].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EmassClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
