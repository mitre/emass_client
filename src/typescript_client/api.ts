/* tslint:disable */
/* eslint-disable */
/**
 * Enterprise Mission Assurance Support Service (eMASS)
 * The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 
 *
 * The version of the OpenAPI document: v3.22
 * Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface APIRuleFailed
 */
export interface APIRuleFailed {
    /**
     * 
     * @type {APIRuleFailedMeta}
     * @memberof APIRuleFailed
     */
    'meta'?: APIRuleFailedMeta;
}
/**
 * 
 * @export
 * @interface APIRuleFailedMeta
 */
export interface APIRuleFailedMeta {
    /**
     * 
     * @type {number}
     * @memberof APIRuleFailedMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIRuleFailedMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface ArtifactsIds
 */
export interface ArtifactsIds {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof ArtifactsIds
     */
    'systemId'?: number;
}
/**
 * 
 * @export
 * @interface ArtifactsOptionalFields
 */
export interface ArtifactsOptionalFields {
    /**
     * [Optional] Artifact name. Character Limit = 100.
     * @type {string}
     * @memberof ArtifactsOptionalFields
     */
    'name'?: string | null;
    /**
     * [Optional] Artifact description. 10,000 Characters.
     * @type {string}
     * @memberof ArtifactsOptionalFields
     */
    'description'?: string | null;
    /**
     * [Optional] Artifact reference page number. 50 Characters.
     * @type {string}
     * @memberof ArtifactsOptionalFields
     */
    'referencePageNumber'?: string | null;
    /**
     * [Optional] The Security Control Assessment Procedure being associated with the artifact.
     * @type {string}
     * @memberof ArtifactsOptionalFields
     */
    'assessmentProcedures'?: string;
    /**
     * [Optional] Control acronym associated with the artifact. NIST SP 800-53 Revision 4 defined.
     * @type {string}
     * @memberof ArtifactsOptionalFields
     */
    'controls'?: string | null;
    /**
     * [Optional] Date Artifact expires and requires review. In Unix Date format.
     * @type {number}
     * @memberof ArtifactsOptionalFields
     */
    'expirationDate'?: number | null;
    /**
     * [Optional] Date Artifact was last reviewed. Unix time format.
     * @type {number}
     * @memberof ArtifactsOptionalFields
     */
    'lastReviewedDate'?: number | null;
    /**
     * [Optional] Date artifact was signed. Unix time format.
     * @type {number}
     * @memberof ArtifactsOptionalFields
     */
    'signedDate'?: number | null;
}
/**
 * 
 * @export
 * @interface ArtifactsReadOnlyFields
 */
export interface ArtifactsReadOnlyFields {
    /**
     * [Read-only] Indicates whether an artifact is inherited.
     * @type {boolean}
     * @memberof ArtifactsReadOnlyFields
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-Only] CCI mapping for Assessment Procedures associated with the artifact.
     * @type {string}
     * @memberof ArtifactsReadOnlyFields
     */
    'ccis'?: string | null;
    /**
     * [Read-Only] Standard MIME content type derived from file extension.
     * @type {string}
     * @memberof ArtifactsReadOnlyFields
     */
    'mimeContentType'?: string | null;
    /**
     * [Read-Only] File size of attached artifact.
     * @type {string}
     * @memberof ArtifactsReadOnlyFields
     */
    'fileSize'?: string | null;
}
/**
 * 
 * @export
 * @interface ArtifactsRequestDeleteBodyInner
 */
export interface ArtifactsRequestDeleteBodyInner {
    /**
     * [Required] File name should match exactly one file within the provided zip file. 1000 Characters.
     * @type {string}
     * @memberof ArtifactsRequestDeleteBodyInner
     */
    'filename'?: string;
}
/**
 * 
 * @export
 * @interface ArtifactsRequiredFields
 */
export interface ArtifactsRequiredFields {
    /**
     * [Required] File name should match exactly one file within the provided zip file. 1000 Characters. or Application/zip file. Max 30MB per artifact. 
     * @type {string}
     * @memberof ArtifactsRequiredFields
     */
    'filename'?: string;
    /**
     * [Required] Indicates whether an artifact template.
     * @type {boolean}
     * @memberof ArtifactsRequiredFields
     */
    'isTemplate'?: boolean | null;
    /**
     * [Required] Artifact type options
     * @type {string}
     * @memberof ArtifactsRequiredFields
     */
    'type'?: string;
    /**
     * [Required] Artifact category options
     * @type {string}
     * @memberof ArtifactsRequiredFields
     */
    'category'?: string;
}
/**
 * 
 * @export
 * @interface ArtifactsResponseDel
 */
export interface ArtifactsResponseDel {
    /**
     * 
     * @type {Response200}
     * @memberof ArtifactsResponseDel
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ArtifactsResponseDelDataInner>}
     * @memberof ArtifactsResponseDel
     */
    'data'?: Array<ArtifactsResponseDelDataInner>;
}
/**
 * 
 * @export
 * @interface ArtifactsResponseDelDataInner
 */
export interface ArtifactsResponseDelDataInner {
    /**
     * [Required] File name should match exactly one file within the provided zip file. 1000 Characters.
     * @type {string}
     * @memberof ArtifactsResponseDelDataInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArtifactsResponseDelDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ArtifactsResponseDelDataInner
     */
    'systemId'?: number;
}
/**
 * 
 * @export
 * @interface ArtifactsResponseGet
 */
export interface ArtifactsResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof ArtifactsResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ArtifactsResponseGetDataInner>}
     * @memberof ArtifactsResponseGet
     */
    'data'?: Array<ArtifactsResponseGetDataInner>;
}
/**
 * 
 * @export
 * @interface ArtifactsResponseGetDataInner
 */
export interface ArtifactsResponseGetDataInner {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof ArtifactsResponseGetDataInner
     */
    'systemId'?: number;
    /**
     * [Required] File name should match exactly one file within the provided zip file. 1000 Characters. or Application/zip file. Max 30MB per artifact. 
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'filename'?: string;
    /**
     * [Required] Indicates whether an artifact template.
     * @type {boolean}
     * @memberof ArtifactsResponseGetDataInner
     */
    'isTemplate'?: boolean | null;
    /**
     * [Required] Artifact type options
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'type'?: string;
    /**
     * [Required] Artifact category options
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'category'?: string;
    /**
     * [Read-only] Indicates whether an artifact is inherited.
     * @type {boolean}
     * @memberof ArtifactsResponseGetDataInner
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-Only] CCI mapping for Assessment Procedures associated with the artifact.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'ccis'?: string | null;
    /**
     * [Read-Only] Standard MIME content type derived from file extension.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'mimeContentType'?: string | null;
    /**
     * [Read-Only] File size of attached artifact.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'fileSize'?: string | null;
    /**
     * [Optional] Artifact name. Character Limit = 100.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'name'?: string | null;
    /**
     * [Optional] Artifact description. 10,000 Characters.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'description'?: string | null;
    /**
     * [Optional] Artifact reference page number. 50 Characters.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'referencePageNumber'?: string | null;
    /**
     * [Optional] The Security Control Assessment Procedure being associated with the artifact.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'assessmentProcedures'?: string;
    /**
     * [Optional] Control acronym associated with the artifact. NIST SP 800-53 Revision 4 defined.
     * @type {string}
     * @memberof ArtifactsResponseGetDataInner
     */
    'controls'?: string | null;
    /**
     * [Optional] Date Artifact expires and requires review. In Unix Date format.
     * @type {number}
     * @memberof ArtifactsResponseGetDataInner
     */
    'expirationDate'?: number | null;
    /**
     * [Optional] Date Artifact was last reviewed. Unix time format.
     * @type {number}
     * @memberof ArtifactsResponseGetDataInner
     */
    'lastReviewedDate'?: number | null;
    /**
     * [Optional] Date artifact was signed. Unix time format.
     * @type {number}
     * @memberof ArtifactsResponseGetDataInner
     */
    'signedDate'?: number | null;
}
/**
 * 
 * @export
 * @interface ArtifactsResponsePutPost
 */
export interface ArtifactsResponsePutPost {
    /**
     * 
     * @type {Response200}
     * @memberof ArtifactsResponsePutPost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ArtifactsResponsePutPostDataInner>}
     * @memberof ArtifactsResponsePutPost
     */
    'data'?: Array<ArtifactsResponsePutPostDataInner>;
}
/**
 * 
 * @export
 * @interface ArtifactsResponsePutPostDataInner
 */
export interface ArtifactsResponsePutPostDataInner {
    /**
     * [Required] File name should match exactly one file within the provided zip file. 1000 Characters.
     * @type {string}
     * @memberof ArtifactsResponsePutPostDataInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArtifactsResponsePutPostDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ArtifactsResponsePutPostDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof ArtifactsResponsePutPostDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * 
     * @type {BadRequestMeta}
     * @memberof BadRequest
     */
    'meta'?: BadRequestMeta;
}
/**
 * 
 * @export
 * @interface BadRequestMeta
 */
export interface BadRequestMeta {
    /**
     * 
     * @type {number}
     * @memberof BadRequestMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof BadRequestMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface CacGet
 */
export interface CacGet {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof CacGet
     */
    'systemId'?: number;
    /**
     * [Required] System acronym name.
     * @type {string}
     * @memberof CacGet
     */
    'controlAcronym'?: string;
    /**
     * [Read-only] Compliance status of the control.
     * @type {string}
     * @memberof CacGet
     */
    'complianceStatus'?: string | null;
    /**
     * [Read-Only] Role in current stage.
     * @type {string}
     * @memberof CacGet
     */
    'currentStageName'?: string | null;
    /**
     * [Read-Only] Current step in the Control Approval Chain.
     * @type {number}
     * @memberof CacGet
     */
    'currentStage'?: number | null;
    /**
     * [Read-Only] Total number of steps in Control Approval Chain.
     * @type {number}
     * @memberof CacGet
     */
    'totalStages'?: number | null;
    /**
     * [Conditional] Control Approval Chain comments - 2000 Characters.
     * @type {string}
     * @memberof CacGet
     */
    'comments'?: string | null;
}
/**
 * 
 * @export
 * @interface CacResponseGet
 */
export interface CacResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof CacResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<CacGet>}
     * @memberof CacResponseGet
     */
    'data'?: Array<CacGet>;
}
/**
 * 
 * @export
 * @interface CacResponsePost
 */
export interface CacResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof CacResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<CacResponsePostDataInner>}
     * @memberof CacResponsePost
     */
    'data'?: Array<CacResponsePostDataInner>;
}
/**
 * 
 * @export
 * @interface CacResponsePostDataInner
 */
export interface CacResponsePostDataInner {
    /**
     * [Required] System acronym name.
     * @type {string}
     * @memberof CacResponsePostDataInner
     */
    'controlAcronym'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CacResponsePostDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CacResponsePostDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof CacResponsePostDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface CloudResourcesDelete
 */
export interface CloudResourcesDelete {
    /**
     * 
     * @type {Response200}
     * @memberof CloudResourcesDelete
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<CloudResourcesPostDelete>}
     * @memberof CloudResourcesDelete
     */
    'data'?: Array<CloudResourcesPostDelete>;
}
/**
 * 
 * @export
 * @interface CloudResourcesDeleteBodyInner
 */
export interface CloudResourcesDeleteBodyInner {
    /**
     * [Required] Unique item identifier
     * @type {string}
     * @memberof CloudResourcesDeleteBodyInner
     */
    'resourceId'?: string;
}
/**
 * 
 * @export
 * @interface CloudResourcesPostDelete
 */
export interface CloudResourcesPostDelete {
    /**
     * [Required] Unique identifier/resource namespace for policy compliance result
     * @type {string}
     * @memberof CloudResourcesPostDelete
     */
    'resourceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CloudResourcesPostDelete
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CloudResourcesPostDelete
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof CloudResourcesPostDelete
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface CloudResourcesResponsePost
 */
export interface CloudResourcesResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof CloudResourcesResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<CloudResourcesPostDelete>}
     * @memberof CloudResourcesResponsePost
     */
    'data'?: Array<CloudResourcesPostDelete>;
}
/**
 * 
 * @export
 * @interface CmmcGet
 */
export interface CmmcGet {
    /**
     * [Read-Only] Indicates the action that should be taken on the assessment record since the provided sinceDate.
     * @type {string}
     * @memberof CmmcGet
     */
    'operation'?: CmmcGetOperationEnum | null;
    /**
     * [Read-Only] The name of the DIB Company.
     * @type {string}
     * @memberof CmmcGet
     */
    'hqOrganizationName'?: string | null;
    /**
     * [Read-Only] The Unique Entity Identifier assigned to the DIB Company.
     * @type {string}
     * @memberof CmmcGet
     */
    'uei'?: string | null;
    /**
     * [Read-Only] The name of the Organization Seeking Certification.
     * @type {string}
     * @memberof CmmcGet
     */
    'oscName'?: string | null;
    /**
     * [Read-Only] Identifies the highest-level CAGE Code associated with a given organization.
     * @type {string}
     * @memberof CmmcGet
     */
    'highestLevelOwnerCageCode'?: string | null;
    /**
     * [Read-Only] The five position code(s) associated with the Organization Seeking Certification (OSC).
     * @type {string}
     * @memberof CmmcGet
     */
    'cageCodesInScope'?: string | null;
    /**
     * [Read-Only] The number of employees affiliated with the Organization Seeking Certification.
     * @type {number}
     * @memberof CmmcGet
     */
    'numberOfEmployees'?: number | null;
    /**
     * [Read-Only] The scope of the OSC assessment.
     * @type {string}
     * @memberof CmmcGet
     */
    'scope'?: string | null;
    /**
     * [Read-Only] Brief description of the scope of the OSC assessment
     * @type {string}
     * @memberof CmmcGet
     */
    'scopeDescription'?: string | null;
    /**
     * [Read-Only] Version of the CMMC Model used as part of the assessment.
     * @type {string}
     * @memberof CmmcGet
     */
    'assessmentStandard'?: string | null;
    /**
     * [Read-Only] Unique identifier for the assessment/certificate.
     * @type {string}
     * @memberof CmmcGet
     */
    'assessmentId'?: string | null;
    /**
     * [Read-Only] Identifies the unique ID that is associated with a given CMMC certification for an organization.
     * @type {string}
     * @memberof CmmcGet
     */
    'cmmcUid'?: string | null;
    /**
     * [Read-Only] Identifies the overall calculated score for the assessment based on the assigned values to each applicable security requirement.
     * @type {number}
     * @memberof CmmcGet
     */
    'overallScore'?: number;
    /**
     * [Read-Only] The status of the CMMC certification.
     * @type {string}
     * @memberof CmmcGet
     */
    'cmmcStatus'?: string | null;
    /**
     * [Read-Only] Date of the CMMC status.
     * @type {number}
     * @memberof CmmcGet
     */
    'cmmcStatusDate'?: number | null;
    /**
     * [Read-Only] Expiration date of the CMMC status.
     * @type {number}
     * @memberof CmmcGet
     */
    'cmmcStatusExpirationDate'?: number | null;
}

export const CmmcGetOperationEnum = {
    Added: 'ADDED',
    Updated: 'UPDATED',
    Deleted: 'DELETED',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type CmmcGetOperationEnum = typeof CmmcGetOperationEnum[keyof typeof CmmcGetOperationEnum];

/**
 * 
 * @export
 * @interface CmmcResponseGet
 */
export interface CmmcResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof CmmcResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<CmmcGet>}
     * @memberof CmmcResponseGet
     */
    'data'?: Array<CmmcGet>;
}
/**
 * 
 * @export
 * @interface ConnectivityCcsd
 */
export interface ConnectivityCcsd {
    /**
     * [Read-Only] Identifier for specific connections to the system.
     * @type {string}
     * @memberof ConnectivityCcsd
     */
    'ccsdNumber'?: string | null;
    /**
     * [Read-Only] Choose connection type for the system.
     * @type {string}
     * @memberof ConnectivityCcsd
     */
    'connectivity'?: string | null;
}
/**
 * 
 * @export
 * @interface ContainerResourcesDeleteBodyInner
 */
export interface ContainerResourcesDeleteBodyInner {
    /**
     * [Required] Unique item identifier
     * @type {string}
     * @memberof ContainerResourcesDeleteBodyInner
     */
    'containerId'?: string;
}
/**
 * 
 * @export
 * @interface ContainersResourcesPostDelete
 */
export interface ContainersResourcesPostDelete {
    /**
     * [Required] Unique identifier of the container
     * @type {string}
     * @memberof ContainersResourcesPostDelete
     */
    'containerId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContainersResourcesPostDelete
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ContainersResourcesPostDelete
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof ContainersResourcesPostDelete
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface ContainersResponseDelete
 */
export interface ContainersResponseDelete {
    /**
     * 
     * @type {Response200}
     * @memberof ContainersResponseDelete
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ContainersResourcesPostDelete>}
     * @memberof ContainersResponseDelete
     */
    'data'?: Array<ContainersResourcesPostDelete>;
}
/**
 * 
 * @export
 * @interface ContainersResponsePost
 */
export interface ContainersResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof ContainersResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ContainersResourcesPostDelete>}
     * @memberof ContainersResponsePost
     */
    'data'?: Array<ContainersResourcesPostDelete>;
}
/**
 * 
 * @export
 * @interface ControlsConditionalFields
 */
export interface ControlsConditionalFields {
    /**
     * [Conditional] Indicate the type of Common Control Provider for an Inherited Security Control.
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'commonControlProvider'?: ControlsConditionalFieldsCommonControlProviderEnum | null;
    /**
     * [Conditional] Provide justification for Security Controls deemed Not Applicable to the system.
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'naJustification'?: string | null;
    /**
     * [Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'slcmCriticality'?: string | null;
    /**
     * [Conditional] SLCM frequency
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'slcmFrequency'?: ControlsConditionalFieldsSlcmFrequencyEnum | null;
    /**
     * [Conditional] SLCM method utilized
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'slcmMethod'?: ControlsConditionalFieldsSlcmMethodEnum | null;
    /**
     * [Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'slcmReporting'?: string | null;
    /**
     * [Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'slcmTracking'?: string | null;
    /**
     * [Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000.
     * @type {string}
     * @memberof ControlsConditionalFields
     */
    'slcmComments'?: string | null;
}

export const ControlsConditionalFieldsCommonControlProviderEnum = {
    DoD: 'DoD',
    Component: 'Component',
    Enclave: 'Enclave',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsConditionalFieldsCommonControlProviderEnum = typeof ControlsConditionalFieldsCommonControlProviderEnum[keyof typeof ControlsConditionalFieldsCommonControlProviderEnum];
export const ControlsConditionalFieldsSlcmFrequencyEnum = {
    Constantly: 'Constantly',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    SemiAnnually: 'Semi-Annually',
    Annually: 'Annually',
    EveryTwoYears: 'Every Two Years',
    EveryThreeYears: 'Every Three Years',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsConditionalFieldsSlcmFrequencyEnum = typeof ControlsConditionalFieldsSlcmFrequencyEnum[keyof typeof ControlsConditionalFieldsSlcmFrequencyEnum];
export const ControlsConditionalFieldsSlcmMethodEnum = {
    Automated: 'Automated',
    SemiAutomated: 'Semi-Automated',
    Manual: 'Manual',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsConditionalFieldsSlcmMethodEnum = typeof ControlsConditionalFieldsSlcmMethodEnum[keyof typeof ControlsConditionalFieldsSlcmMethodEnum];

/**
 * 
 * @export
 * @interface ControlsIds
 */
export interface ControlsIds {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof ControlsIds
     */
    'systemId'?: number;
}
/**
 * 
 * @export
 * @interface ControlsOptionalFields
 */
export interface ControlsOptionalFields {
    /**
     * [Optional] Implementation Status of the Security Control for the information system.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'implementationStatus'?: ControlsOptionalFieldsImplementationStatusEnum | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'severity'?: ControlsOptionalFieldsSeverityEnum | null;
    /**
     * [Optional] Include vulnerability summary. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'vulnerabiltySummary'?: string | null;
    /**
     * [Optional] Include recommendations. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'recommendations'?: string | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'relevanceOfThreat'?: ControlsOptionalFieldsRelevanceOfThreatEnum | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'likelihood'?: ControlsOptionalFieldsLikelihoodEnum | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'impact'?: ControlsOptionalFieldsImpactEnum | null;
    /**
     * [Optional] Include description of Security Control\'s impact.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'impactDescription'?: string | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'residualRiskLevel'?: ControlsOptionalFieldsResidualRiskLevelEnum | null;
    /**
     * [Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'testMethod'?: ControlsOptionalFieldsTestMethodEnum | null;
    /**
     * [Optional] Identify any mitigations in place for the Non-Compliant Security Control\'s vulnerabilities. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'mitigations'?: string | null;
    /**
     * [Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Character Limit = 2,000. Navy only.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'applicationLayer'?: string | null;
    /**
     * [Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Navy only.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'databaseLayer'?: string | null;
    /**
     * [Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Navy only.
     * @type {string}
     * @memberof ControlsOptionalFields
     */
    'operatingSystemLayer'?: string | null;
}

export const ControlsOptionalFieldsImplementationStatusEnum = {
    Planned: 'Planned',
    Implemented: 'Implemented',
    Inherited: 'Inherited',
    NotApplicable: 'Not Applicable',
    ManuallyInherited: 'Manually Inherited',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsImplementationStatusEnum = typeof ControlsOptionalFieldsImplementationStatusEnum[keyof typeof ControlsOptionalFieldsImplementationStatusEnum];
export const ControlsOptionalFieldsSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsSeverityEnum = typeof ControlsOptionalFieldsSeverityEnum[keyof typeof ControlsOptionalFieldsSeverityEnum];
export const ControlsOptionalFieldsRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsRelevanceOfThreatEnum = typeof ControlsOptionalFieldsRelevanceOfThreatEnum[keyof typeof ControlsOptionalFieldsRelevanceOfThreatEnum];
export const ControlsOptionalFieldsLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsLikelihoodEnum = typeof ControlsOptionalFieldsLikelihoodEnum[keyof typeof ControlsOptionalFieldsLikelihoodEnum];
export const ControlsOptionalFieldsImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsImpactEnum = typeof ControlsOptionalFieldsImpactEnum[keyof typeof ControlsOptionalFieldsImpactEnum];
export const ControlsOptionalFieldsResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsResidualRiskLevelEnum = typeof ControlsOptionalFieldsResidualRiskLevelEnum[keyof typeof ControlsOptionalFieldsResidualRiskLevelEnum];
export const ControlsOptionalFieldsTestMethodEnum = {
    Test: 'Test',
    Interview: 'Interview',
    Examine: 'Examine',
    TestInterview: 'Test, Interview',
    TestExamine: 'Test, Examine',
    InterviewExamine: 'Interview, Examine',
    TestInterviewExamine: 'Test, Interview, Examine',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsOptionalFieldsTestMethodEnum = typeof ControlsOptionalFieldsTestMethodEnum[keyof typeof ControlsOptionalFieldsTestMethodEnum];

/**
 * 
 * @export
 * @interface ControlsPut
 */
export interface ControlsPut {
    /**
     * Acronym of the system record.
     * @type {string}
     * @memberof ControlsPut
     */
    'acronym'?: string;
    /**
     * Indicates if operations result (success/fail)
     * @type {boolean}
     * @memberof ControlsPut
     */
    'success'?: boolean;
    /**
     * The system identifier for the system being updated.
     * @type {number}
     * @memberof ControlsPut
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof ControlsPut
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface ControlsReadOnlyFields
 */
export interface ControlsReadOnlyFields {
    /**
     * [Read-only] Name of the system record.
     * @type {string}
     * @memberof ControlsReadOnlyFields
     */
    'name'?: string | null;
    /**
     * [Read-only] Comma separated list of CCIs associated with the control.
     * @type {string}
     * @memberof ControlsReadOnlyFields
     */
    'ccis'?: string | null;
    /**
     * [Read-only] Indicates whether a control is inherited.
     * @type {boolean}
     * @memberof ControlsReadOnlyFields
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-only] List of overlays that affect the control.
     * @type {string}
     * @memberof ControlsReadOnlyFields
     */
    'modifiedByOverlays'?: string | null;
    /**
     * [Read-only] Indicates the manner by which a control was included in the system\'s categorization.
     * @type {string}
     * @memberof ControlsReadOnlyFields
     */
    'includedStatus'?: string | null;
    /**
     * [Read-only] Compliance of the control.
     * @type {string}
     * @memberof ControlsReadOnlyFields
     */
    'complianceStatus'?: string | null;
}
/**
 * 
 * @export
 * @interface ControlsRequiredFields
 */
export interface ControlsRequiredFields {
    /**
     * [Required] Acronym of the system record.
     * @type {string}
     * @memberof ControlsRequiredFields
     */
    'acronym'?: string;
    /**
     * [Required] Include written description of Responsible Entities that are responsible for the Security Control. Character Limit 2,000.
     * @type {string}
     * @memberof ControlsRequiredFields
     */
    'responsibleEntities'?: string;
    /**
     * [Required] Control designations
     * @type {string}
     * @memberof ControlsRequiredFields
     */
    'controlDesignation'?: ControlsRequiredFieldsControlDesignationEnum;
    /**
     * [Required] Field is required for Implementation Plan. Unix time format.
     * @type {number}
     * @memberof ControlsRequiredFields
     */
    'estimatedCompletionDate'?: number;
    /**
     * [Required] Includes security control comments. Character Limit 2,000.
     * @type {string}
     * @memberof ControlsRequiredFields
     */
    'implementationNarrative'?: string;
}

export const ControlsRequiredFieldsControlDesignationEnum = {
    Common: 'Common',
    SystemSpecific: 'System-Specific',
    Hybrid: 'Hybrid',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsRequiredFieldsControlDesignationEnum = typeof ControlsRequiredFieldsControlDesignationEnum[keyof typeof ControlsRequiredFieldsControlDesignationEnum];

/**
 * 
 * @export
 * @interface ControlsResponseGet
 */
export interface ControlsResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof ControlsResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ControlsResponseGetDataInner>}
     * @memberof ControlsResponseGet
     */
    'data'?: Array<ControlsResponseGetDataInner> | null;
}
/**
 * 
 * @export
 * @interface ControlsResponseGetDataInner
 */
export interface ControlsResponseGetDataInner {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof ControlsResponseGetDataInner
     */
    'systemId'?: number;
    /**
     * [Required] Acronym of the system record.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'acronym'?: string;
    /**
     * [Required] Include written description of Responsible Entities that are responsible for the Security Control. Character Limit 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'responsibleEntities'?: string;
    /**
     * [Required] Control designations
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'controlDesignation'?: ControlsResponseGetDataInnerControlDesignationEnum;
    /**
     * [Required] Field is required for Implementation Plan. Unix time format.
     * @type {number}
     * @memberof ControlsResponseGetDataInner
     */
    'estimatedCompletionDate'?: number;
    /**
     * [Required] Includes security control comments. Character Limit 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'implementationNarrative'?: string;
    /**
     * [Conditional] Indicate the type of Common Control Provider for an Inherited Security Control.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'commonControlProvider'?: ControlsResponseGetDataInnerCommonControlProviderEnum | null;
    /**
     * [Conditional] Provide justification for Security Controls deemed Not Applicable to the system.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'naJustification'?: string | null;
    /**
     * [Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'slcmCriticality'?: string | null;
    /**
     * [Conditional] SLCM frequency
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'slcmFrequency'?: ControlsResponseGetDataInnerSlcmFrequencyEnum | null;
    /**
     * [Conditional] SLCM method utilized
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'slcmMethod'?: ControlsResponseGetDataInnerSlcmMethodEnum | null;
    /**
     * [Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'slcmReporting'?: string | null;
    /**
     * [Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'slcmTracking'?: string | null;
    /**
     * [Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'slcmComments'?: string | null;
    /**
     * [Optional] Implementation Status of the Security Control for the information system.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'implementationStatus'?: ControlsResponseGetDataInnerImplementationStatusEnum | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'severity'?: ControlsResponseGetDataInnerSeverityEnum | null;
    /**
     * [Optional] Include vulnerability summary. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'vulnerabiltySummary'?: string | null;
    /**
     * [Optional] Include recommendations. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'recommendations'?: string | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'relevanceOfThreat'?: ControlsResponseGetDataInnerRelevanceOfThreatEnum | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'likelihood'?: ControlsResponseGetDataInnerLikelihoodEnum | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'impact'?: ControlsResponseGetDataInnerImpactEnum | null;
    /**
     * [Optional] Include description of Security Control\'s impact.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'impactDescription'?: string | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'residualRiskLevel'?: ControlsResponseGetDataInnerResidualRiskLevelEnum | null;
    /**
     * [Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'testMethod'?: ControlsResponseGetDataInnerTestMethodEnum | null;
    /**
     * [Optional] Identify any mitigations in place for the Non-Compliant Security Control\'s vulnerabilities. Character Limit = 2,000.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'mitigations'?: string | null;
    /**
     * [Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Character Limit = 2,000. Navy only.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'applicationLayer'?: string | null;
    /**
     * [Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Navy only.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'databaseLayer'?: string | null;
    /**
     * [Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Navy only.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'operatingSystemLayer'?: string | null;
    /**
     * [Read-only] Name of the system record.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'name'?: string | null;
    /**
     * [Read-only] Comma separated list of CCIs associated with the control.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'ccis'?: string | null;
    /**
     * [Read-only] Indicates whether a control is inherited.
     * @type {boolean}
     * @memberof ControlsResponseGetDataInner
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-only] List of overlays that affect the control.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'modifiedByOverlays'?: string | null;
    /**
     * [Read-only] Indicates the manner by which a control was included in the system\'s categorization.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'includedStatus'?: string | null;
    /**
     * [Read-only] Compliance of the control.
     * @type {string}
     * @memberof ControlsResponseGetDataInner
     */
    'complianceStatus'?: string | null;
}

export const ControlsResponseGetDataInnerControlDesignationEnum = {
    Common: 'Common',
    SystemSpecific: 'System-Specific',
    Hybrid: 'Hybrid',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerControlDesignationEnum = typeof ControlsResponseGetDataInnerControlDesignationEnum[keyof typeof ControlsResponseGetDataInnerControlDesignationEnum];
export const ControlsResponseGetDataInnerCommonControlProviderEnum = {
    DoD: 'DoD',
    Component: 'Component',
    Enclave: 'Enclave',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerCommonControlProviderEnum = typeof ControlsResponseGetDataInnerCommonControlProviderEnum[keyof typeof ControlsResponseGetDataInnerCommonControlProviderEnum];
export const ControlsResponseGetDataInnerSlcmFrequencyEnum = {
    Constantly: 'Constantly',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    SemiAnnually: 'Semi-Annually',
    Annually: 'Annually',
    EveryTwoYears: 'Every Two Years',
    EveryThreeYears: 'Every Three Years',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerSlcmFrequencyEnum = typeof ControlsResponseGetDataInnerSlcmFrequencyEnum[keyof typeof ControlsResponseGetDataInnerSlcmFrequencyEnum];
export const ControlsResponseGetDataInnerSlcmMethodEnum = {
    Automated: 'Automated',
    SemiAutomated: 'Semi-Automated',
    Manual: 'Manual',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerSlcmMethodEnum = typeof ControlsResponseGetDataInnerSlcmMethodEnum[keyof typeof ControlsResponseGetDataInnerSlcmMethodEnum];
export const ControlsResponseGetDataInnerImplementationStatusEnum = {
    Planned: 'Planned',
    Implemented: 'Implemented',
    Inherited: 'Inherited',
    NotApplicable: 'Not Applicable',
    ManuallyInherited: 'Manually Inherited',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerImplementationStatusEnum = typeof ControlsResponseGetDataInnerImplementationStatusEnum[keyof typeof ControlsResponseGetDataInnerImplementationStatusEnum];
export const ControlsResponseGetDataInnerSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerSeverityEnum = typeof ControlsResponseGetDataInnerSeverityEnum[keyof typeof ControlsResponseGetDataInnerSeverityEnum];
export const ControlsResponseGetDataInnerRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerRelevanceOfThreatEnum = typeof ControlsResponseGetDataInnerRelevanceOfThreatEnum[keyof typeof ControlsResponseGetDataInnerRelevanceOfThreatEnum];
export const ControlsResponseGetDataInnerLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerLikelihoodEnum = typeof ControlsResponseGetDataInnerLikelihoodEnum[keyof typeof ControlsResponseGetDataInnerLikelihoodEnum];
export const ControlsResponseGetDataInnerImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerImpactEnum = typeof ControlsResponseGetDataInnerImpactEnum[keyof typeof ControlsResponseGetDataInnerImpactEnum];
export const ControlsResponseGetDataInnerResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerResidualRiskLevelEnum = typeof ControlsResponseGetDataInnerResidualRiskLevelEnum[keyof typeof ControlsResponseGetDataInnerResidualRiskLevelEnum];
export const ControlsResponseGetDataInnerTestMethodEnum = {
    Test: 'Test',
    Interview: 'Interview',
    Examine: 'Examine',
    TestInterview: 'Test, Interview',
    TestExamine: 'Test, Examine',
    InterviewExamine: 'Interview, Examine',
    TestInterviewExamine: 'Test, Interview, Examine',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type ControlsResponseGetDataInnerTestMethodEnum = typeof ControlsResponseGetDataInnerTestMethodEnum[keyof typeof ControlsResponseGetDataInnerTestMethodEnum];

/**
 * 
 * @export
 * @interface ControlsResponsePut
 */
export interface ControlsResponsePut {
    /**
     * 
     * @type {Response200}
     * @memberof ControlsResponsePut
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<ControlsPut>}
     * @memberof ControlsResponsePut
     */
    'data'?: Array<ControlsPut>;
}
/**
 * 
 * @export
 * @interface Created
 */
export interface Created {
    /**
     * 
     * @type {CreatedMeta}
     * @memberof Created
     */
    'meta'?: CreatedMeta;
}
/**
 * 
 * @export
 * @interface CreatedMeta
 */
export interface CreatedMeta {
    /**
     * 
     * @type {number}
     * @memberof CreatedMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatedMeta
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface DefinitionTransitions
 */
export interface DefinitionTransitions {
    /**
     * [Read-Only] The landing stage that is active after performing a transition.
     * @type {string}
     * @memberof DefinitionTransitions
     */
    'endStage'?: string | null;
    /**
     * [Read-Only] Description that matches the action dropdown that appears for PAC users.
     * @type {string}
     * @memberof DefinitionTransitions
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof DefinitionTransitions
     */
    'roles'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface DeviceScanResultsResponsePost
 */
export interface DeviceScanResultsResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof DeviceScanResultsResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<DeviceScanResultsResponsePostDataInner>}
     * @memberof DeviceScanResultsResponsePost
     */
    'data'?: Array<DeviceScanResultsResponsePostDataInner>;
}
/**
 * 
 * @export
 * @interface DeviceScanResultsResponsePostDataInner
 */
export interface DeviceScanResultsResponsePostDataInner {
    /**
     * [Required] single binary file. Specific file extensions are expected depending upon the scanType parameter.
     * @type {string}
     * @memberof DeviceScanResultsResponsePostDataInner
     */
    'filename'?: string;
    /**
     * Number of assets imported from the scan file.
     * @type {number}
     * @memberof DeviceScanResultsResponsePostDataInner
     */
    'assetsImported'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceScanResultsResponsePostDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceScanResultsResponsePostDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof DeviceScanResultsResponsePostDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
    /**
     * 
     * @type {ForbiddenMeta}
     * @memberof Forbidden
     */
    'meta'?: ForbiddenMeta;
}
/**
 * 
 * @export
 * @interface ForbiddenMeta
 */
export interface ForbiddenMeta {
    /**
     * 
     * @type {number}
     * @memberof ForbiddenMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ForbiddenMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface GetSystemStatusDetails200Response
 */
export interface GetSystemStatusDetails200Response {
    /**
     * 
     * @type {Response200}
     * @memberof GetSystemStatusDetails200Response
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetSystemStatusDetails200Response
     */
    'data'?: Array<object>;
    /**
     * 
     * @type {Pagination}
     * @memberof GetSystemStatusDetails200Response
     */
    'pagination'?: Pagination;
}
/**
 * 
 * @export
 * @interface HwBaselineConditionalFields
 */
export interface HwBaselineConditionalFields {
    /**
     * [Conditional] Public facing FQDN. Only applicable if Public Facing is set to true.
     * @type {string}
     * @memberof HwBaselineConditionalFields
     */
    'publicFacingFqdn'?: string | null;
    /**
     * [Conditional] Public facing IP address. Only applicable if Public Facing is set to true.
     * @type {string}
     * @memberof HwBaselineConditionalFields
     */
    'publicFacingIpAddress'?: string | null;
    /**
     * [Conditional] Public facing URLs. Only applicable if Public Facing is set to true.
     * @type {string}
     * @memberof HwBaselineConditionalFields
     */
    'publicFacingUrls'?: string | null;
}
/**
 * 
 * @export
 * @interface HwBaselineIds
 */
export interface HwBaselineIds {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof HwBaselineIds
     */
    'systemId'?: number;
}
/**
 * 
 * @export
 * @interface HwBaselineOptionalFields
 */
export interface HwBaselineOptionalFields {
    /**
     * [Optional] Type of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'componentType'?: string | null;
    /**
     * [Optional] Nickname of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'nickname'?: string | null;
    /**
     * [Optional] IP address of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'assetIpAddress'?: string | null;
    /**
     * [Optional] Public facing is defined as any asset that is accessible from a commercial connection.
     * @type {boolean}
     * @memberof HwBaselineOptionalFields
     */
    'publicFacing'?: boolean | null;
    /**
     * [Optional] Determine if this is a virtual hardware asset.
     * @type {boolean}
     * @memberof HwBaselineOptionalFields
     */
    'virtualAsset'?: boolean | null;
    /**
     * [Optional] Manufacturer of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'manufacturer'?: string | null;
    /**
     * [Optional] Model number of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'modelNumber'?: string | null;
    /**
     * [Optional] Serial number of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'serialNumber'?: string | null;
    /**
     * [Optional] Operating System, IOS, or Firmware version of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'OsIosFwVersion'?: string | null;
    /**
     * [Optional] Memory size / type of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'memorySizeType'?: string | null;
    /**
     * [Optional] Location of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'location'?: string | null;
    /**
     * [Optional] Approval status of the hardware asset.
     * @type {string}
     * @memberof HwBaselineOptionalFields
     */
    'approvalStatus'?: string | null;
    /**
     * [Optional] Indicates whether the asset is a critical information system asset.
     * @type {boolean}
     * @memberof HwBaselineOptionalFields
     */
    'criticalAsset'?: boolean | null;
}
/**
 * 
 * @export
 * @interface HwBaselineReadOnlyFields
 */
export interface HwBaselineReadOnlyFields {
    /**
     * [Read-Only] GUID identifying the specific hardware asset. Required for a PUT call.
     * @type {string}
     * @memberof HwBaselineReadOnlyFields
     */
    'hardwareId'?: string | null;
}
/**
 * 
 * @export
 * @interface HwBaselineRequestDeleteBodyInner
 */
export interface HwBaselineRequestDeleteBodyInner {
    /**
     * 
     * @type {string}
     * @memberof HwBaselineRequestDeleteBodyInner
     */
    'hardwareId'?: string;
}
/**
 * 
 * @export
 * @interface HwBaselineRequiredFields
 */
export interface HwBaselineRequiredFields {
    /**
     * [Required] Name of the hardware asset.
     * @type {string}
     * @memberof HwBaselineRequiredFields
     */
    'assetName'?: string;
}
/**
 * 
 * @export
 * @interface HwBaselineResponseDelete
 */
export interface HwBaselineResponseDelete {
    /**
     * 
     * @type {Response200}
     * @memberof HwBaselineResponseDelete
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<HwBaselineResponseDeleteDataInner>}
     * @memberof HwBaselineResponseDelete
     */
    'data'?: Array<HwBaselineResponseDeleteDataInner>;
}
/**
 * 
 * @export
 * @interface HwBaselineResponseDeleteDataInner
 */
export interface HwBaselineResponseDeleteDataInner {
    /**
     * 
     * @type {number}
     * @memberof HwBaselineResponseDeleteDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof HwBaselineResponseDeleteDataInner
     */
    'hardwareId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HwBaselineResponseDeleteDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof HwBaselineResponseDeleteDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface HwBaselineResponseGet
 */
export interface HwBaselineResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof HwBaselineResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<HwBaselineResponseGetDataInner>}
     * @memberof HwBaselineResponseGet
     */
    'data'?: Array<HwBaselineResponseGetDataInner>;
    /**
     * 
     * @type {Pagination}
     * @memberof HwBaselineResponseGet
     */
    'pagination'?: Pagination;
}
/**
 * 
 * @export
 * @interface HwBaselineResponseGetDataInner
 */
export interface HwBaselineResponseGetDataInner {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof HwBaselineResponseGetDataInner
     */
    'systemId'?: number;
    /**
     * [Read-Only] GUID identifying the specific hardware asset. Required for a PUT call.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'hardwareId'?: string | null;
    /**
     * [Required] Name of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'assetName'?: string;
    /**
     * [Optional] Type of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'componentType'?: string | null;
    /**
     * [Optional] Nickname of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'nickname'?: string | null;
    /**
     * [Optional] IP address of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'assetIpAddress'?: string | null;
    /**
     * [Optional] Public facing is defined as any asset that is accessible from a commercial connection.
     * @type {boolean}
     * @memberof HwBaselineResponseGetDataInner
     */
    'publicFacing'?: boolean | null;
    /**
     * [Optional] Determine if this is a virtual hardware asset.
     * @type {boolean}
     * @memberof HwBaselineResponseGetDataInner
     */
    'virtualAsset'?: boolean | null;
    /**
     * [Optional] Manufacturer of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'manufacturer'?: string | null;
    /**
     * [Optional] Model number of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'modelNumber'?: string | null;
    /**
     * [Optional] Serial number of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'serialNumber'?: string | null;
    /**
     * [Optional] Operating System, IOS, or Firmware version of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'OsIosFwVersion'?: string | null;
    /**
     * [Optional] Memory size / type of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'memorySizeType'?: string | null;
    /**
     * [Optional] Location of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'location'?: string | null;
    /**
     * [Optional] Approval status of the hardware asset.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'approvalStatus'?: string | null;
    /**
     * [Optional] Indicates whether the asset is a critical information system asset.
     * @type {boolean}
     * @memberof HwBaselineResponseGetDataInner
     */
    'criticalAsset'?: boolean | null;
    /**
     * [Conditional] Public facing FQDN. Only applicable if Public Facing is set to true.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'publicFacingFqdn'?: string | null;
    /**
     * [Conditional] Public facing IP address. Only applicable if Public Facing is set to true.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'publicFacingIpAddress'?: string | null;
    /**
     * [Conditional] Public facing URLs. Only applicable if Public Facing is set to true.
     * @type {string}
     * @memberof HwBaselineResponseGetDataInner
     */
    'publicFacingUrls'?: string | null;
}
/**
 * 
 * @export
 * @interface HwBaselineResponsePostPut
 */
export interface HwBaselineResponsePostPut {
    /**
     * 
     * @type {Response200}
     * @memberof HwBaselineResponsePostPut
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<HwBaselineResponsePostPutDataInner>}
     * @memberof HwBaselineResponsePostPut
     */
    'data'?: Array<HwBaselineResponsePostPutDataInner>;
}
/**
 * 
 * @export
 * @interface HwBaselineResponsePostPutDataInner
 */
export interface HwBaselineResponsePostPutDataInner {
    /**
     * 
     * @type {number}
     * @memberof HwBaselineResponsePostPutDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof HwBaselineResponsePostPutDataInner
     */
    'hardwareId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HwBaselineResponsePostPutDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof HwBaselineResponsePostPutDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface InstanceTransitions
 */
export interface InstanceTransitions {
    /**
     * [Read-Only] Comments entered by the user when performing the transition.
     * @type {string}
     * @memberof InstanceTransitions
     */
    'comments'?: string | null;
    /**
     * [Read-Only] User that performed the workflow transition.
     * @type {string}
     * @memberof InstanceTransitions
     */
    'createdBy'?: string | null;
    /**
     * [Read-Only] Date the workflow instance or the workflow transition was created.
     * @type {number}
     * @memberof InstanceTransitions
     */
    'createdDate'?: number | null;
    /**
     * [Read-Only] Description of the stage transition. This matches the action dropdown that appears for PAC users.
     * @type {string}
     * @memberof InstanceTransitions
     */
    'description'?: string | null;
    /**
     * [Read-Only] The landing stage that is active after performing a transition.
     * @type {string}
     * @memberof InstanceTransitions
     */
    'endStage'?: string | null;
    /**
     * [Read-Only] The beginning stage that is active before performing a transition.
     * @type {string}
     * @memberof InstanceTransitions
     */
    'startStage'?: string | null;
}
/**
 * 
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {InternalServerErrorMeta}
     * @memberof InternalServerError
     */
    'meta'?: InternalServerErrorMeta;
}
/**
 * 
 * @export
 * @interface InternalServerErrorMeta
 */
export interface InternalServerErrorMeta {
    /**
     * 
     * @type {number}
     * @memberof InternalServerErrorMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface LengthRequired
 */
export interface LengthRequired {
    /**
     * 
     * @type {LengthRequiredMeta}
     * @memberof LengthRequired
     */
    'meta'?: LengthRequiredMeta;
}
/**
 * 
 * @export
 * @interface LengthRequiredMeta
 */
export interface LengthRequiredMeta {
    /**
     * 
     * @type {number}
     * @memberof LengthRequiredMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof LengthRequiredMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface MethodNotAllowed
 */
export interface MethodNotAllowed {
    /**
     * 
     * @type {MethodNotAllowedMeta}
     * @memberof MethodNotAllowed
     */
    'meta'?: MethodNotAllowedMeta;
}
/**
 * 
 * @export
 * @interface MethodNotAllowedMeta
 */
export interface MethodNotAllowedMeta {
    /**
     * 
     * @type {number}
     * @memberof MethodNotAllowedMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof MethodNotAllowedMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface MilestoneResponseDelete
 */
export interface MilestoneResponseDelete {
    /**
     * 
     * @type {Response200}
     * @memberof MilestoneResponseDelete
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<MilestonesPutPostDelete>}
     * @memberof MilestoneResponseDelete
     */
    'data'?: Array<MilestonesPutPostDelete>;
}
/**
 * 
 * @export
 * @interface MilestoneResponseGet
 */
export interface MilestoneResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof MilestoneResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<MilestonesGet>}
     * @memberof MilestoneResponseGet
     */
    'data'?: Array<MilestonesGet>;
}
/**
 * 
 * @export
 * @interface MilestoneResponseGetMilestone
 */
export interface MilestoneResponseGetMilestone {
    /**
     * 
     * @type {Response200}
     * @memberof MilestoneResponseGetMilestone
     */
    'meta'?: Response200;
    /**
     * 
     * @type {MilestonesGet}
     * @memberof MilestoneResponseGetMilestone
     */
    'data'?: MilestonesGet;
}
/**
 * 
 * @export
 * @interface MilestoneResponsePost
 */
export interface MilestoneResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof MilestoneResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<MilestonesPutPostDelete>}
     * @memberof MilestoneResponsePost
     */
    'data'?: Array<MilestonesPutPostDelete>;
}
/**
 * 
 * @export
 * @interface MilestoneResponsePut
 */
export interface MilestoneResponsePut {
    /**
     * 
     * @type {Response200}
     * @memberof MilestoneResponsePut
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<MilestonesPutPostDelete>}
     * @memberof MilestoneResponsePut
     */
    'data'?: Array<MilestonesPutPostDelete>;
}
/**
 * 
 * @export
 * @interface MilestonesFields
 */
export interface MilestonesFields {
    /**
     * 
     * @type {Array<MilestonesGet>}
     * @memberof MilestonesFields
     */
    'milestones'?: Array<MilestonesGet>;
}
/**
 * 
 * @export
 * @interface MilestonesGet
 */
export interface MilestonesGet {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof MilestonesGet
     */
    'systemId'?: number;
    /**
     * [Required] Unique item identifier.
     * @type {number}
     * @memberof MilestonesGet
     */
    'milestoneId'?: number;
    /**
     * [Required] Unique item identifier.
     * @type {number}
     * @memberof MilestonesGet
     */
    'poamId'?: number;
    /**
     * [Required] Include milestone description.
     * @type {string}
     * @memberof MilestonesGet
     */
    'description'?: string;
    /**
     * [Required] Required for ongoing and completed POA&M items. Unix time format.
     * @type {number}
     * @memberof MilestonesGet
     */
    'scheduledCompletionDate'?: number;
    /**
     * [Read-Only] Values include the following options: (Not Approved,Under Review,Approved).
     * @type {string}
     * @memberof MilestonesGet
     */
    'reviewStatus'?: MilestonesGetReviewStatusEnum | null;
    /**
     * [Read-Only] Last, first name of the user that created the milestone.
     * @type {string}
     * @memberof MilestonesGet
     */
    'createdBy'?: string | null;
    /**
     * [Read-Only] Timestamp representing when the milestone was entered into the database.
     * @type {number}
     * @memberof MilestonesGet
     */
    'createdDate'?: number;
}

export const MilestonesGetReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type MilestonesGetReviewStatusEnum = typeof MilestonesGetReviewStatusEnum[keyof typeof MilestonesGetReviewStatusEnum];

/**
 * 
 * @export
 * @interface MilestonesPutPostDelete
 */
export interface MilestonesPutPostDelete {
    /**
     * The system identifier that the POAM was added.
     * @type {number}
     * @memberof MilestonesPutPostDelete
     */
    'systemId'?: number;
    /**
     * The newly created POAM identifier
     * @type {number}
     * @memberof MilestonesPutPostDelete
     */
    'poamId'?: number;
    /**
     * The Milestone unique item identifier
     * @type {number}
     * @memberof MilestonesPutPostDelete
     */
    'milestoneId'?: number;
    /**
     * The unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.
     * @type {string}
     * @memberof MilestonesPutPostDelete
     */
    'externalUid'?: string;
    /**
     * Indicates if operations result (success/fail)
     * @type {boolean}
     * @memberof MilestonesPutPostDelete
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof MilestonesPutPostDelete
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface MilestonesRequestDeleteBodyInner
 */
export interface MilestonesRequestDeleteBodyInner {
    /**
     * [Required] Unique item identifier
     * @type {number}
     * @memberof MilestonesRequestDeleteBodyInner
     */
    'milestoneId'?: number;
}
/**
 * 
 * @export
 * @interface MilestonesRequiredPost
 */
export interface MilestonesRequiredPost {
    /**
     * 
     * @type {Array<MilestonesRequiredPostMilestonesInner>}
     * @memberof MilestonesRequiredPost
     */
    'milestones'?: Array<MilestonesRequiredPostMilestonesInner>;
}
/**
 * 
 * @export
 * @interface MilestonesRequiredPostMilestonesInner
 */
export interface MilestonesRequiredPostMilestonesInner {
    /**
     * [Required] Include milestone description.
     * @type {string}
     * @memberof MilestonesRequiredPostMilestonesInner
     */
    'description': string;
    /**
     * [Required] Required for ongoing and completed POA&M items. Unix time format.
     * @type {number}
     * @memberof MilestonesRequiredPostMilestonesInner
     */
    'scheduledCompletionDate': number;
}
/**
 * 
 * @export
 * @interface MilestonesRequiredPut
 */
export interface MilestonesRequiredPut {
    /**
     * 
     * @type {Array<MilestonesRequiredPutMilestonesInner>}
     * @memberof MilestonesRequiredPut
     */
    'milestones'?: Array<MilestonesRequiredPutMilestonesInner>;
}
/**
 * 
 * @export
 * @interface MilestonesRequiredPutMilestonesInner
 */
export interface MilestonesRequiredPutMilestonesInner {
    /**
     * [Required] Include milestone description.
     * @type {string}
     * @memberof MilestonesRequiredPutMilestonesInner
     */
    'description': string;
    /**
     * [Required] Required for ongoing and completed POA&M items. Unix time format.
     * @type {number}
     * @memberof MilestonesRequiredPutMilestonesInner
     */
    'scheduledCompletionDate': number;
    /**
     * [Conditional] Optionally used in PUT to delete milestones when updating a POA&M.
     * @type {boolean}
     * @memberof MilestonesRequiredPutMilestonesInner
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     * 
     * @type {number}
     * @memberof NotFound
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface PacGet
 */
export interface PacGet {
    /**
     * [Required] Values include the following:(Assess and Authorize, Assess Only, Security Plan Approval)
     * @type {string}
     * @memberof PacGet
     */
    'workflow'?: PacGetWorkflowEnum;
    /**
     * [Required] Package name. 100 Characters.
     * @type {string}
     * @memberof PacGet
     */
    'name'?: string;
    /**
     * [Read-Only] Name of the current stage in the active workflow.
     * @type {string}
     * @memberof PacGet
     */
    'currentStageName'?: string | null;
    /**
     * [Read-Only] Number of the current stage in the active workflow.
     * @type {number}
     * @memberof PacGet
     */
    'currentStage'?: number | null;
    /**
     * [Read-Only] Total number of stages in the active workflow.
     * @type {number}
     * @memberof PacGet
     */
    'totalStages'?: number | null;
    /**
     * [Read-Only] Indicates the number of days at current workflow stage.
     * @type {number}
     * @memberof PacGet
     */
    'daysAtCurrentStage'?: number | null;
    /**
     * [Required]] Comments submitted upon initiation of the indicated workflow. Character Limit = 4,000.
     * @type {string}
     * @memberof PacGet
     */
    'comments'?: string | null;
}

export const PacGetWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PacGetWorkflowEnum = typeof PacGetWorkflowEnum[keyof typeof PacGetWorkflowEnum];

/**
 * 
 * @export
 * @interface PacPost
 */
export interface PacPost {
    /**
     * [Required] Values include the following:(Assess and Authorize, Assess Only, Security Plan Approval)
     * @type {string}
     * @memberof PacPost
     */
    'workflow'?: PacPostWorkflowEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PacPost
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PacPost
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof PacPost
     */
    'errors'?: Array<any> | null;
}

export const PacPostWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PacPostWorkflowEnum = typeof PacPostWorkflowEnum[keyof typeof PacPostWorkflowEnum];

/**
 * 
 * @export
 * @interface PacResponseGet
 */
export interface PacResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof PacResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<PacGet>}
     * @memberof PacResponseGet
     */
    'data'?: Array<PacGet> | null;
}
/**
 * 
 * @export
 * @interface PacResponsePost
 */
export interface PacResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof PacResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<PacPost>}
     * @memberof PacResponsePost
     */
    'data'?: Array<PacPost>;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'pageIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'totalPages'?: number;
    /**
     * 
     * @type {string}
     * @memberof Pagination
     */
    'prevPageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pagination
     */
    'nextPageUrl'?: string;
}
/**
 * 
 * @export
 * @interface PoamConditionalFields
 */
export interface PoamConditionalFields {
    /**
     * [Conditional] First name of POC. 100 Characters.
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'pocFirstName'?: string;
    /**
     * [Conditional] Last name of POC. 100 Characters.
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'pocLastName'?: string;
    /**
     * [Conditional] Email address of POC. 100 Characters.
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'pocEmail'?: string;
    /**
     * [Conditional] Phone number of POC (area code) ***-**** format. 100 Characters.
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'pocPhoneNumber'?: string;
    /**
     * [Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'severity'?: string;
    /**
     * [Conditional] Required for ongoing and completed POA&M items. Unix time format.
     * @type {number}
     * @memberof PoamConditionalFields
     */
    'scheduledCompletionDate'?: number | null;
    /**
     * [Conditional] Field is required for completed POA&M items. Unix time format.
     * @type {number}
     * @memberof PoamConditionalFields
     */
    'completionDate'?: number;
    /**
     * [Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'comments'?: string;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamConditionalFields
     */
    'personnelResourcesFundedBaseHours'?: number | null;
    /**
     * [Conditional] Required if Personnel Resources: Funded Base Hours is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'personnelResourcesCostCode'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamConditionalFields
     */
    'personnelResourcesUnfundedBaseHours'?: number | null;
    /**
     * [Conditional] Required if Personnel Resources: Unfunded Base Hours is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'personnelResourcesNonfundingObstacle'?: string | null;
    /**
     * [Conditional] Required if the value \"Other\" is populated for the field Personnel Resources: Non-Funding Obstacle. VA only.
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'personnelResourcesNonfundingObstacleOtherReason'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamConditionalFields
     */
    'nonPersonnelResourcesFundedAmount'?: number | null;
    /**
     * [Conditional] Required if Non-Personnel Resources: Funded Amount is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'nonPersonnelResourcesCostCode'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamConditionalFields
     */
    'nonPersonnelResourcesUnfundedAmount'?: number | null;
    /**
     * [Conditional] Required if Non-Personnel Resources: Unfunded Amount is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'nonPersonnelResourcesNonfundingObstacle'?: string | null;
    /**
     * [Conditional] Required if the value \"Other\" is populated for the field Non-Personnel Resources: Non-Funding Obstacle. VA only.
     * @type {string}
     * @memberof PoamConditionalFields
     */
    'nonPersonnelResourcesNonfundingObstacleOtherReason'?: string | null;
}
/**
 * 
 * @export
 * @interface PoamIds
 */
export interface PoamIds {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof PoamIds
     */
    'systemId'?: number;
    /**
     * [Required] Unique item identifier
     * @type {number}
     * @memberof PoamIds
     */
    'poamId'?: number;
    /**
     * [Required] Globally unique identifier for individual POA&M Items, seen on the front-end as ID.
     * @type {number}
     * @memberof PoamIds
     */
    'displayPoamId'?: number;
}
/**
 * 
 * @export
 * @interface PoamOptionalFields
 */
export interface PoamOptionalFields {
    /**
     * [Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'externalUid'?: string;
    /**
     * [Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'controlAcronym'?: string;
    /**
     * [Optional] The Security Control Assessment Procedure being associated with the POA&M Item.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'assessmentProcedure'?: string;
    /**
     * [Optional] Security Checks that are associated with the POA&M.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'securityChecks'?: string;
    /**
     * [Optional] Scan vulnerability ratting Values include the following options: (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'rawSeverity'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'relevanceOfThreat'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'likelihood'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'impact'?: string;
    /**
     * [Optional] Include description of Security Control\'s impact.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'impactDescription'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'residualRiskLevel'?: string;
    /**
     * [Optional] Include recommendations. Character Limit = 2,000.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'recommendations'?: string;
    /**
     * [Optional] Include mitigation explanation. 2000 Characters.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'mitigations'?: string;
    /**
     * [Optional] Indicate the risk level expected after any proposed mitigations are implemented. Proposed mitigations should be appropriately documented as POA&M milestones. Navy only.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'resultingResidualRiskLevelAfterProposedMitigations'?: PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum | null;
    /**
     * [Optional] A predisposing condition is a condition existing within an organization, a mission or business process, enterprise architecture, information system/PIT, or environment of operation, which affects (i.e., increases or decreases) the likelihood that threat events, once initiated, result in adverse impacts. Navy only.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'predisposingConditions'?: string | null;
    /**
     * [Optional] Describe the identified threat(s) and relevance to the information system. Navy only.
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'threatDescription'?: string | null;
    /**
     * [Optional] List any affected devices by hostname. If all devices in the information system are affected, state \'system\' or \'all\'. Navy only
     * @type {string}
     * @memberof PoamOptionalFields
     */
    'devicesAffected'?: string | null;
}

export const PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum = typeof PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum[keyof typeof PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum];

/**
 * 
 * @export
 * @interface PoamPostPutDel
 */
export interface PoamPostPutDel {
    /**
     * The system identifier for the system being updated.
     * @type {number}
     * @memberof PoamPostPutDel
     */
    'systemId'?: number;
    /**
     * The newly created POAM identifier
     * @type {number}
     * @memberof PoamPostPutDel
     */
    'poamId'?: number;
    /**
     * The unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.
     * @type {string}
     * @memberof PoamPostPutDel
     */
    'externalUid'?: string;
    /**
     * Indicates if operations result (success/fail)
     * @type {boolean}
     * @memberof PoamPostPutDel
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof PoamPostPutDel
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface PoamReadOnlyFields
 */
export interface PoamReadOnlyFields {
    /**
     * [Read-Only] Unique identifier of the authorization term/condition linked to the POA&M Item.
     * @type {string}
     * @memberof PoamReadOnlyFields
     */
    'conditionId'?: string | null;
    /**
     * [Read-only] Indicates whether a test result is inherited.
     * @type {boolean}
     * @memberof PoamReadOnlyFields
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-Only] CCI associated with POA&M Item.
     * @type {string}
     * @memberof PoamReadOnlyFields
     */
    'cci'?: string | null;
    /**
     * [Read-Only] Values include the following options: (Not Approved,Under Review,Approved)
     * @type {string}
     * @memberof PoamReadOnlyFields
     */
    'reviewStatus'?: PoamReadOnlyFieldsReviewStatusEnum | null;
    /**
     * [Read-Only] Timestamp representing when the POA&M Item was entered into the database.
     * @type {number}
     * @memberof PoamReadOnlyFields
     */
    'createdDate'?: number;
    /**
     * [Read-Only] Value returned for a POA&M Item with review status \"Approved\" and has a milestone with a scheduled completion date that extends beyond the POA&M Item\'s scheduled completion date. 
     * @type {number}
     * @memberof PoamReadOnlyFields
     */
    'extensionDate'?: number | null;
    /**
     * [Read-Only] Value returned for a POA&M Item with a review status of \"Approved\" and an unapproved milestone with a scheduled completion date that extends beyond the POA&M Item\'s scheduled completion date. 
     * @type {number}
     * @memberof PoamReadOnlyFields
     */
    'pendingExtensionDate'?: number | null;
    /**
     * [Read-Only] Lists the filenames of any artifact files attached to the POA&M Item. Multiple values are separated by “; ”.
     * @type {string}
     * @memberof PoamReadOnlyFields
     */
    'artifacts'?: string | null;
}

export const PoamReadOnlyFieldsReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamReadOnlyFieldsReviewStatusEnum = typeof PoamReadOnlyFieldsReviewStatusEnum[keyof typeof PoamReadOnlyFieldsReviewStatusEnum];

/**
 * 
 * @export
 * @interface PoamRequestDeleteBodyInner
 */
export interface PoamRequestDeleteBodyInner {
    /**
     * [Required] Unique item identifier
     * @type {number}
     * @memberof PoamRequestDeleteBodyInner
     */
    'poamId'?: number;
}
/**
 * 
 * @export
 * @interface PoamRequiredFields
 */
export interface PoamRequiredFields {
    /**
     * [Required] The POA&M status
     * @type {string}
     * @memberof PoamRequiredFields
     */
    'status'?: PoamRequiredFieldsStatusEnum;
    /**
     * [Required] Provide a description of the POA&M Item. 2000 Characters.
     * @type {string}
     * @memberof PoamRequiredFields
     */
    'vulnerabilityDescription'?: string;
    /**
     * [Required] Include Source Identifying Vulnerability text. 2000 Characters.
     * @type {string}
     * @memberof PoamRequiredFields
     */
    'sourceIdentifyingVulnerability'?: string;
    /**
     * [Required] Organization/Office represented. 100 Characters.
     * @type {string}
     * @memberof PoamRequiredFields
     */
    'pocOrganization'?: string;
    /**
     * [Required] List of resources used. 250 Characters.
     * @type {string}
     * @memberof PoamRequiredFields
     */
    'resources'?: string;
    /**
     * [Required] If not specified, this field will be set to false because it does not accept a null value. VA only
     * @type {boolean}
     * @memberof PoamRequiredFields
     */
    'identifiedInCFOAuditOrOtherReview'?: boolean;
}

export const PoamRequiredFieldsStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamRequiredFieldsStatusEnum = typeof PoamRequiredFieldsStatusEnum[keyof typeof PoamRequiredFieldsStatusEnum];

/**
 * 
 * @export
 * @interface PoamResponseGetPoams
 */
export interface PoamResponseGetPoams {
    /**
     * 
     * @type {Response200}
     * @memberof PoamResponseGetPoams
     */
    'meta'?: Response200;
    /**
     * 
     * @type {PoamResponseGetPoamsData}
     * @memberof PoamResponseGetPoams
     */
    'data'?: PoamResponseGetPoamsData;
}
/**
 * 
 * @export
 * @interface PoamResponseGetPoamsData
 */
export interface PoamResponseGetPoamsData {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'systemId'?: number;
    /**
     * [Required] Unique item identifier
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'poamId'?: number;
    /**
     * [Required] Globally unique identifier for individual POA&M Items, seen on the front-end as ID.
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'displayPoamId'?: number;
    /**
     * [Required] The POA&M status
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'status'?: PoamResponseGetPoamsDataStatusEnum;
    /**
     * [Required] Provide a description of the POA&M Item. 2000 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'vulnerabilityDescription'?: string;
    /**
     * [Required] Include Source Identifying Vulnerability text. 2000 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'sourceIdentifyingVulnerability'?: string;
    /**
     * [Required] Organization/Office represented. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'pocOrganization'?: string;
    /**
     * [Required] List of resources used. 250 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'resources'?: string;
    /**
     * [Required] If not specified, this field will be set to false because it does not accept a null value. VA only
     * @type {boolean}
     * @memberof PoamResponseGetPoamsData
     */
    'identifiedInCFOAuditOrOtherReview'?: boolean;
    /**
     * [Read-Only] Unique identifier of the authorization term/condition linked to the POA&M Item.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'conditionId'?: string | null;
    /**
     * [Read-only] Indicates whether a test result is inherited.
     * @type {boolean}
     * @memberof PoamResponseGetPoamsData
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-Only] CCI associated with POA&M Item.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'cci'?: string | null;
    /**
     * [Read-Only] Values include the following options: (Not Approved,Under Review,Approved)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'reviewStatus'?: PoamResponseGetPoamsDataReviewStatusEnum | null;
    /**
     * [Read-Only] Timestamp representing when the POA&M Item was entered into the database.
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'createdDate'?: number;
    /**
     * [Read-Only] Value returned for a POA&M Item with review status \"Approved\" and has a milestone with a scheduled completion date that extends beyond the POA&M Item\'s scheduled completion date. 
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'extensionDate'?: number | null;
    /**
     * [Read-Only] Value returned for a POA&M Item with a review status of \"Approved\" and an unapproved milestone with a scheduled completion date that extends beyond the POA&M Item\'s scheduled completion date. 
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'pendingExtensionDate'?: number | null;
    /**
     * [Read-Only] Lists the filenames of any artifact files attached to the POA&M Item. Multiple values are separated by “; ”.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'artifacts'?: string | null;
    /**
     * [Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'externalUid'?: string;
    /**
     * [Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'controlAcronym'?: string;
    /**
     * [Optional] The Security Control Assessment Procedure being associated with the POA&M Item.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'assessmentProcedure'?: string;
    /**
     * [Optional] Security Checks that are associated with the POA&M.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'securityChecks'?: string;
    /**
     * [Optional] Scan vulnerability ratting Values include the following options: (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'rawSeverity'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'relevanceOfThreat'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'likelihood'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'impact'?: string;
    /**
     * [Optional] Include description of Security Control\'s impact.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'impactDescription'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'residualRiskLevel'?: string;
    /**
     * [Optional] Include recommendations. Character Limit = 2,000.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'recommendations'?: string;
    /**
     * [Optional] Include mitigation explanation. 2000 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'mitigations'?: string;
    /**
     * [Optional] Indicate the risk level expected after any proposed mitigations are implemented. Proposed mitigations should be appropriately documented as POA&M milestones. Navy only.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'resultingResidualRiskLevelAfterProposedMitigations'?: PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum | null;
    /**
     * [Optional] A predisposing condition is a condition existing within an organization, a mission or business process, enterprise architecture, information system/PIT, or environment of operation, which affects (i.e., increases or decreases) the likelihood that threat events, once initiated, result in adverse impacts. Navy only.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'predisposingConditions'?: string | null;
    /**
     * [Optional] Describe the identified threat(s) and relevance to the information system. Navy only.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'threatDescription'?: string | null;
    /**
     * [Optional] List any affected devices by hostname. If all devices in the information system are affected, state \'system\' or \'all\'. Navy only
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'devicesAffected'?: string | null;
    /**
     * [Conditional] First name of POC. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'pocFirstName'?: string;
    /**
     * [Conditional] Last name of POC. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'pocLastName'?: string;
    /**
     * [Conditional] Email address of POC. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'pocEmail'?: string;
    /**
     * [Conditional] Phone number of POC (area code) ***-**** format. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'pocPhoneNumber'?: string;
    /**
     * [Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'severity'?: string;
    /**
     * [Conditional] Required for ongoing and completed POA&M items. Unix time format.
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'scheduledCompletionDate'?: number | null;
    /**
     * [Conditional] Field is required for completed POA&M items. Unix time format.
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'completionDate'?: number;
    /**
     * [Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'comments'?: string;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'personnelResourcesFundedBaseHours'?: number | null;
    /**
     * [Conditional] Required if Personnel Resources: Funded Base Hours is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'personnelResourcesCostCode'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'personnelResourcesUnfundedBaseHours'?: number | null;
    /**
     * [Conditional] Required if Personnel Resources: Unfunded Base Hours is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'personnelResourcesNonfundingObstacle'?: string | null;
    /**
     * [Conditional] Required if the value \"Other\" is populated for the field Personnel Resources: Non-Funding Obstacle. VA only.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'personnelResourcesNonfundingObstacleOtherReason'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'nonPersonnelResourcesFundedAmount'?: number | null;
    /**
     * [Conditional] Required if Non-Personnel Resources: Funded Amount is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'nonPersonnelResourcesCostCode'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetPoamsData
     */
    'nonPersonnelResourcesUnfundedAmount'?: number | null;
    /**
     * [Conditional] Required if Non-Personnel Resources: Unfunded Amount is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'nonPersonnelResourcesNonfundingObstacle'?: string | null;
    /**
     * [Conditional] Required if the value \"Other\" is populated for the field Non-Personnel Resources: Non-Funding Obstacle. VA only.
     * @type {string}
     * @memberof PoamResponseGetPoamsData
     */
    'nonPersonnelResourcesNonfundingObstacleOtherReason'?: string | null;
    /**
     * 
     * @type {Array<MilestonesGet>}
     * @memberof PoamResponseGetPoamsData
     */
    'milestones'?: Array<MilestonesGet>;
}

export const PoamResponseGetPoamsDataStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamResponseGetPoamsDataStatusEnum = typeof PoamResponseGetPoamsDataStatusEnum[keyof typeof PoamResponseGetPoamsDataStatusEnum];
export const PoamResponseGetPoamsDataReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamResponseGetPoamsDataReviewStatusEnum = typeof PoamResponseGetPoamsDataReviewStatusEnum[keyof typeof PoamResponseGetPoamsDataReviewStatusEnum];
export const PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum = typeof PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum[keyof typeof PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum];

/**
 * 
 * @export
 * @interface PoamResponseGetSystems
 */
export interface PoamResponseGetSystems {
    /**
     * 
     * @type {Response200}
     * @memberof PoamResponseGetSystems
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<PoamResponseGetSystemsDataInner>}
     * @memberof PoamResponseGetSystems
     */
    'data'?: Array<PoamResponseGetSystemsDataInner>;
}
/**
 * 
 * @export
 * @interface PoamResponseGetSystemsDataInner
 */
export interface PoamResponseGetSystemsDataInner {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'systemId'?: number;
    /**
     * [Required] Unique item identifier
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'poamId'?: number;
    /**
     * [Required] Globally unique identifier for individual POA&M Items, seen on the front-end as ID.
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'displayPoamId'?: number;
    /**
     * [Required] The POA&M status
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'status'?: PoamResponseGetSystemsDataInnerStatusEnum;
    /**
     * [Required] Provide a description of the POA&M Item. 2000 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'vulnerabilityDescription'?: string;
    /**
     * [Required] Include Source Identifying Vulnerability text. 2000 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'sourceIdentifyingVulnerability'?: string;
    /**
     * [Required] Organization/Office represented. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'pocOrganization'?: string;
    /**
     * [Required] List of resources used. 250 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'resources'?: string;
    /**
     * [Required] If not specified, this field will be set to false because it does not accept a null value. VA only
     * @type {boolean}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'identifiedInCFOAuditOrOtherReview'?: boolean;
    /**
     * [Conditional] First name of POC. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'pocFirstName'?: string;
    /**
     * [Conditional] Last name of POC. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'pocLastName'?: string;
    /**
     * [Conditional] Email address of POC. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'pocEmail'?: string;
    /**
     * [Conditional] Phone number of POC (area code) ***-**** format. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'pocPhoneNumber'?: string;
    /**
     * [Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'severity'?: string;
    /**
     * [Conditional] Required for ongoing and completed POA&M items. Unix time format.
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'scheduledCompletionDate'?: number | null;
    /**
     * [Conditional] Field is required for completed POA&M items. Unix time format.
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'completionDate'?: number;
    /**
     * [Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'comments'?: string;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'personnelResourcesFundedBaseHours'?: number | null;
    /**
     * [Conditional] Required if Personnel Resources: Funded Base Hours is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'personnelResourcesCostCode'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'personnelResourcesUnfundedBaseHours'?: number | null;
    /**
     * [Conditional] Required if Personnel Resources: Unfunded Base Hours is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'personnelResourcesNonfundingObstacle'?: string | null;
    /**
     * [Conditional] Required if the value \"Other\" is populated for the field Personnel Resources: Non-Funding Obstacle. VA only.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'personnelResourcesNonfundingObstacleOtherReason'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'nonPersonnelResourcesFundedAmount'?: number | null;
    /**
     * [Conditional] Required if Non-Personnel Resources: Funded Amount is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'nonPersonnelResourcesCostCode'?: string | null;
    /**
     * [Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. 
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'nonPersonnelResourcesUnfundedAmount'?: number | null;
    /**
     * [Conditional] Required if Non-Personnel Resources: Unfunded Amount is populated. Only accepts values present in the field\'s lookup table (modifiable by eMASS System Admins). VA only. 
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'nonPersonnelResourcesNonfundingObstacle'?: string | null;
    /**
     * [Conditional] Required if the value \"Other\" is populated for the field Non-Personnel Resources: Non-Funding Obstacle. VA only.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'nonPersonnelResourcesNonfundingObstacleOtherReason'?: string | null;
    /**
     * 
     * @type {Array<MilestonesGet>}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'milestones'?: Array<MilestonesGet>;
    /**
     * [Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'externalUid'?: string;
    /**
     * [Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'controlAcronym'?: string;
    /**
     * [Optional] The Security Control Assessment Procedure being associated with the POA&M Item.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'assessmentProcedure'?: string;
    /**
     * [Optional] Security Checks that are associated with the POA&M.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'securityChecks'?: string;
    /**
     * [Optional] Scan vulnerability ratting Values include the following options: (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'rawSeverity'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'relevanceOfThreat'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'likelihood'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'impact'?: string;
    /**
     * [Optional] Include description of Security Control\'s impact.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'impactDescription'?: string;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'residualRiskLevel'?: string;
    /**
     * [Optional] Include recommendations. Character Limit = 2,000.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'recommendations'?: string;
    /**
     * [Optional] Include mitigation explanation. 2000 Characters.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'mitigations'?: string;
    /**
     * [Optional] Indicate the risk level expected after any proposed mitigations are implemented. Proposed mitigations should be appropriately documented as POA&M milestones. Navy only.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'resultingResidualRiskLevelAfterProposedMitigations'?: PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum | null;
    /**
     * [Optional] A predisposing condition is a condition existing within an organization, a mission or business process, enterprise architecture, information system/PIT, or environment of operation, which affects (i.e., increases or decreases) the likelihood that threat events, once initiated, result in adverse impacts. Navy only.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'predisposingConditions'?: string | null;
    /**
     * [Optional] Describe the identified threat(s) and relevance to the information system. Navy only.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'threatDescription'?: string | null;
    /**
     * [Optional] List any affected devices by hostname. If all devices in the information system are affected, state \'system\' or \'all\'. Navy only
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'devicesAffected'?: string | null;
    /**
     * [Read-Only] Unique identifier of the authorization term/condition linked to the POA&M Item.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'conditionId'?: string | null;
    /**
     * [Read-only] Indicates whether a test result is inherited.
     * @type {boolean}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'isInherited'?: boolean | null;
    /**
     * [Read-Only] CCI associated with POA&M Item.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'cci'?: string | null;
    /**
     * [Read-Only] Values include the following options: (Not Approved,Under Review,Approved)
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'reviewStatus'?: PoamResponseGetSystemsDataInnerReviewStatusEnum | null;
    /**
     * [Read-Only] Timestamp representing when the POA&M Item was entered into the database.
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'createdDate'?: number;
    /**
     * [Read-Only] Value returned for a POA&M Item with review status \"Approved\" and has a milestone with a scheduled completion date that extends beyond the POA&M Item\'s scheduled completion date. 
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'extensionDate'?: number | null;
    /**
     * [Read-Only] Value returned for a POA&M Item with a review status of \"Approved\" and an unapproved milestone with a scheduled completion date that extends beyond the POA&M Item\'s scheduled completion date. 
     * @type {number}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'pendingExtensionDate'?: number | null;
    /**
     * [Read-Only] Lists the filenames of any artifact files attached to the POA&M Item. Multiple values are separated by “; ”.
     * @type {string}
     * @memberof PoamResponseGetSystemsDataInner
     */
    'artifacts'?: string | null;
}

export const PoamResponseGetSystemsDataInnerStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamResponseGetSystemsDataInnerStatusEnum = typeof PoamResponseGetSystemsDataInnerStatusEnum[keyof typeof PoamResponseGetSystemsDataInnerStatusEnum];
export const PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum = typeof PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum[keyof typeof PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum];
export const PoamResponseGetSystemsDataInnerReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type PoamResponseGetSystemsDataInnerReviewStatusEnum = typeof PoamResponseGetSystemsDataInnerReviewStatusEnum[keyof typeof PoamResponseGetSystemsDataInnerReviewStatusEnum];

/**
 * 
 * @export
 * @interface PoamResponsePostPutDelete
 */
export interface PoamResponsePostPutDelete {
    /**
     * 
     * @type {Response200}
     * @memberof PoamResponsePostPutDelete
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<PoamPostPutDel>}
     * @memberof PoamResponsePostPutDelete
     */
    'data'?: Array<PoamPostPutDel>;
}
/**
 * 
 * @export
 * @interface Register
 */
export interface Register {
    /**
     * 
     * @type {Response200}
     * @memberof Register
     */
    'meta'?: Response200;
    /**
     * 
     * @type {RegisterData}
     * @memberof Register
     */
    'data'?: RegisterData;
}
/**
 * 
 * @export
 * @interface RegisterData
 */
export interface RegisterData {
    /**
     * 
     * @type {string}
     * @memberof RegisterData
     */
    'apikey'?: string;
}
/**
 * 
 * @export
 * @interface RegisterUserRequestPostBody
 */
export interface RegisterUserRequestPostBody {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequestPostBody
     */
    'user-uid': string;
}
/**
 * 
 * @export
 * @interface Response200
 */
export interface Response200 {
    /**
     * 
     * @type {number}
     * @memberof Response200
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface RoleCategory
 */
export interface RoleCategory {
    /**
     * [Read-only] Unique system record identifier.
     * @type {number}
     * @memberof RoleCategory
     */
    'systemId'?: number;
    /**
     * [Read-only] Name of the system record.
     * @type {string}
     * @memberof RoleCategory
     */
    'systemName'?: string | null;
    /**
     * [Read-only] Acronym of the system record.
     * @type {string}
     * @memberof RoleCategory
     */
    'systemAcronym'?: string | null;
    /**
     * 
     * @type {Array<Roles>}
     * @memberof RoleCategory
     */
    'roles'?: Array<Roles> | null;
}
/**
 * 
 * @export
 * @interface Roles
 */
export interface Roles {
    /**
     * [Required] System role categories
     * @type {string}
     * @memberof Roles
     */
    'roleCategory'?: string;
    /**
     * [Required] System role description
     * @type {string}
     * @memberof Roles
     */
    'role'?: string;
    /**
     * 
     * @type {Array<Users>}
     * @memberof Roles
     */
    'users'?: Array<Users> | null;
}
/**
 * 
 * @export
 * @interface Stage
 */
export interface Stage {
    /**
     * [Read-Only] Name of the stage. For older workflows, this will match the user assigned to the stage.
     * @type {string}
     * @memberof Stage
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<DefinitionTransitions>}
     * @memberof Stage
     */
    'transitions'?: Array<DefinitionTransitions> | null;
}
/**
 * 
 * @export
 * @interface StaticCodeApplicationPost
 */
export interface StaticCodeApplicationPost {
    /**
     * [Optional] Scan vulnerability ratting
     * @type {string}
     * @memberof StaticCodeApplicationPost
     */
    'rawSeverity'?: StaticCodeApplicationPostRawSeverityEnum;
    /**
     * [Required] Name of the software vulnerability or weakness.
     * @type {string}
     * @memberof StaticCodeApplicationPost
     */
    'codeCheckName'?: string;
    /**
     * [Required] Number of instances observed for a specified finding.
     * @type {number}
     * @memberof StaticCodeApplicationPost
     */
    'count'?: number;
    /**
     * [Required] The date of the scan. Unix date format.
     * @type {number}
     * @memberof StaticCodeApplicationPost
     */
    'scanDate'?: number;
    /**
     * [Required] The Common Weakness Enumerator (CWE) identifier.
     * @type {string}
     * @memberof StaticCodeApplicationPost
     */
    'cweId'?: string;
    /**
     * [Optional] When used by itself, can clear out all application findings for a single application/version pairing.
     * @type {boolean}
     * @memberof StaticCodeApplicationPost
     */
    'clearFindings'?: boolean;
}

export const StaticCodeApplicationPostRawSeverityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    Moderate: 'Moderate',
    High: 'High',
    Critical: 'Critical',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type StaticCodeApplicationPostRawSeverityEnum = typeof StaticCodeApplicationPostRawSeverityEnum[keyof typeof StaticCodeApplicationPostRawSeverityEnum];

/**
 * 
 * @export
 * @interface StaticCodePost
 */
export interface StaticCodePost {
    /**
     * [Required] Name of the software application that was assessed.
     * @type {string}
     * @memberof StaticCodePost
     */
    'applicationName'?: string;
    /**
     * [Required] The version of the application.
     * @type {string}
     * @memberof StaticCodePost
     */
    'version'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StaticCodePost
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StaticCodePost
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof StaticCodePost
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface StaticCodeRequestPostBody
 */
export interface StaticCodeRequestPostBody {
    /**
     * 
     * @type {StaticCodeRequestPostBodyApplication}
     * @memberof StaticCodeRequestPostBody
     */
    'application'?: StaticCodeRequestPostBodyApplication;
    /**
     * 
     * @type {Array<StaticCodeApplicationPost>}
     * @memberof StaticCodeRequestPostBody
     */
    'applicationFindings'?: Array<StaticCodeApplicationPost>;
}
/**
 * 
 * @export
 * @interface StaticCodeRequestPostBodyApplication
 */
export interface StaticCodeRequestPostBodyApplication {
    /**
     * [Required] Name of the software application that was assessed.
     * @type {string}
     * @memberof StaticCodeRequestPostBodyApplication
     */
    'applicationName'?: string;
    /**
     * [Required] The version of the application.
     * @type {string}
     * @memberof StaticCodeRequestPostBodyApplication
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface StaticCodeResponsePost
 */
export interface StaticCodeResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof StaticCodeResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<StaticCodePost>}
     * @memberof StaticCodeResponsePost
     */
    'data'?: Array<StaticCodePost>;
}
/**
 * 
 * @export
 * @interface SwBaselineConditionalFields
 */
export interface SwBaselineConditionalFields {
    /**
     * [Conditional] Approval date of the software asset. If Approval Status is set to \"Unapproved\" or \"In Progress\", Approval Date will be set to null.
     * @type {number}
     * @memberof SwBaselineConditionalFields
     */
    'approvalDate'?: number | null;
}
/**
 * 
 * @export
 * @interface SwBaselineIds
 */
export interface SwBaselineIds {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof SwBaselineIds
     */
    'systemId'?: number;
}
/**
 * 
 * @export
 * @interface SwBaselineOptionalFields
 */
export interface SwBaselineOptionalFields {
    /**
     * [Optional] Type of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'softwareType'?: string | null;
    /**
     * [Optional] Parent system of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'parentSystem'?: string | null;
    /**
     * [Optional] Subsystem of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'subsystem'?: string | null;
    /**
     * [Optional] Network of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'network'?: string | null;
    /**
     * [Optional] Hosting environment of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'hostingEnvironment'?: string | null;
    /**
     * [Optional] Dependencies of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'softwareDependencies'?: string | null;
    /**
     * [Optional] Cryptographic hash of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'cryptographicHash'?: string | null;
    /**
     * [Optional] In-service data of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'inServiceData'?: string | null;
    /**
     * [Optional] IT budget UII of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'itBudgetUii'?: string | null;
    /**
     * [Optional] Fiscal year (FY) of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'fiscalYear'?: string | null;
    /**
     * [Optional] Period of performance (POP) end date of the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'popEndDate'?: number | null;
    /**
     * [Optional] License or contract number of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'licenseOrContract'?: string | null;
    /**
     * [Optional] License term of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'licenseTerm'?: string | null;
    /**
     * [Optional] Cost per license of the software asset. Number will be converted to display 2 decimal points.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'costPerLicense'?: number | null;
    /**
     * [Optional] Total licenses of the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'totalLicenses'?: number | null;
    /**
     * [Optional] Total license cost of the software asset. Number will be converted to display 2 decimal points.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'totalLicenseCost'?: number | null;
    /**
     * [Optional] Number of licenses used for the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'licensesUsed'?: number | null;
    /**
     * [Optional] Point of contact (POC) for the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'licensePoc'?: string | null;
    /**
     * [Optional] License renewal date for the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'licenseRenewalDate'?: number | null;
    /**
     * [Optional] License expiration date for the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'licenseExpirationDate'?: number | null;
    /**
     * [Optional] Approval status of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'approvalStatus'?: string | null;
    /**
     * [Optional] Release date of the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'releaseDate'?: number | null;
    /**
     * [Optional] Maintenance date of the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'maintenanceDate'?: number | null;
    /**
     * [Optional] Retirement date of the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'retirementDate'?: number | null;
    /**
     * [Optional] End of life support date of the software asset.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'endOfLifeSupportDate'?: number | null;
    /**
     * [Optional] If set, the Extended End of Life/Support Date cannot occur prior to the End of Life/Support Date.
     * @type {number}
     * @memberof SwBaselineOptionalFields
     */
    'extendedEndOfLifeSupportDate'?: number | null;
    /**
     * [Optional] Indicates whether the asset is a critical information system asset.
     * @type {boolean}
     * @memberof SwBaselineOptionalFields
     */
    'criticalAsset'?: boolean | null;
    /**
     * [Optional] Location of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'location'?: string | null;
    /**
     * [Optional] Purpose of the software asset.
     * @type {string}
     * @memberof SwBaselineOptionalFields
     */
    'purpose'?: string | null;
    /**
     * [Optional] Unsupported operating system. VA only.
     * @type {boolean}
     * @memberof SwBaselineOptionalFields
     */
    'unsupportedOperatingSystem'?: boolean | null;
    /**
     * [Optional] Unapproved software from TRM. VA only
     * @type {boolean}
     * @memberof SwBaselineOptionalFields
     */
    'unapprovedSoftwareFromTrm'?: boolean | null;
    /**
     * [Optional] Approved waiver. VA only
     * @type {boolean}
     * @memberof SwBaselineOptionalFields
     */
    'approvedWaiver'?: boolean | null;
}
/**
 * 
 * @export
 * @interface SwBaselineReadOnlyFields
 */
export interface SwBaselineReadOnlyFields {
    /**
     * [Read-Only] GUID identifying the specific software asset.
     * @type {string}
     * @memberof SwBaselineReadOnlyFields
     */
    'softwareId'?: string | null;
}
/**
 * 
 * @export
 * @interface SwBaselineRequestDeleteBodyInner
 */
export interface SwBaselineRequestDeleteBodyInner {
    /**
     * 
     * @type {string}
     * @memberof SwBaselineRequestDeleteBodyInner
     */
    'softwareId'?: string;
}
/**
 * 
 * @export
 * @interface SwBaselineRequiredFields
 */
export interface SwBaselineRequiredFields {
    /**
     * [Required] Vendor of the software asset.
     * @type {string}
     * @memberof SwBaselineRequiredFields
     */
    'softwareVendor'?: string;
    /**
     * [Required] Name of the software asset.
     * @type {string}
     * @memberof SwBaselineRequiredFields
     */
    'softwareName'?: string;
    /**
     * [Required] Version of the software asset.
     * @type {string}
     * @memberof SwBaselineRequiredFields
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface SwBaselineResponseDelete
 */
export interface SwBaselineResponseDelete {
    /**
     * 
     * @type {Response200}
     * @memberof SwBaselineResponseDelete
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<SwBaselineResponseDeleteDataInner>}
     * @memberof SwBaselineResponseDelete
     */
    'data'?: Array<SwBaselineResponseDeleteDataInner>;
}
/**
 * 
 * @export
 * @interface SwBaselineResponseDeleteDataInner
 */
export interface SwBaselineResponseDeleteDataInner {
    /**
     * 
     * @type {number}
     * @memberof SwBaselineResponseDeleteDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SwBaselineResponseDeleteDataInner
     */
    'softwareId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SwBaselineResponseDeleteDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof SwBaselineResponseDeleteDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface SwBaselineResponseGet
 */
export interface SwBaselineResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof SwBaselineResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<SwBaselineResponseGetDataInner>}
     * @memberof SwBaselineResponseGet
     */
    'data'?: Array<SwBaselineResponseGetDataInner>;
    /**
     * 
     * @type {Pagination}
     * @memberof SwBaselineResponseGet
     */
    'pagination'?: Pagination;
}
/**
 * 
 * @export
 * @interface SwBaselineResponseGetDataInner
 */
export interface SwBaselineResponseGetDataInner {
    /**
     * [Required] Unique eMASS system identifier.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'systemId'?: number;
    /**
     * [Read-Only] GUID identifying the specific software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'softwareId'?: string | null;
    /**
     * [Required] Vendor of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'softwareVendor'?: string;
    /**
     * [Required] Name of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'softwareName'?: string;
    /**
     * [Required] Version of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'version'?: string;
    /**
     * [Optional] Type of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'softwareType'?: string | null;
    /**
     * [Optional] Parent system of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'parentSystem'?: string | null;
    /**
     * [Optional] Subsystem of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'subsystem'?: string | null;
    /**
     * [Optional] Network of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'network'?: string | null;
    /**
     * [Optional] Hosting environment of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'hostingEnvironment'?: string | null;
    /**
     * [Optional] Dependencies of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'softwareDependencies'?: string | null;
    /**
     * [Optional] Cryptographic hash of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'cryptographicHash'?: string | null;
    /**
     * [Optional] In-service data of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'inServiceData'?: string | null;
    /**
     * [Optional] IT budget UII of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'itBudgetUii'?: string | null;
    /**
     * [Optional] Fiscal year (FY) of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'fiscalYear'?: string | null;
    /**
     * [Optional] Period of performance (POP) end date of the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'popEndDate'?: number | null;
    /**
     * [Optional] License or contract number of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'licenseOrContract'?: string | null;
    /**
     * [Optional] License term of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'licenseTerm'?: string | null;
    /**
     * [Optional] Cost per license of the software asset. Number will be converted to display 2 decimal points.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'costPerLicense'?: number | null;
    /**
     * [Optional] Total licenses of the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'totalLicenses'?: number | null;
    /**
     * [Optional] Total license cost of the software asset. Number will be converted to display 2 decimal points.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'totalLicenseCost'?: number | null;
    /**
     * [Optional] Number of licenses used for the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'licensesUsed'?: number | null;
    /**
     * [Optional] Point of contact (POC) for the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'licensePoc'?: string | null;
    /**
     * [Optional] License renewal date for the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'licenseRenewalDate'?: number | null;
    /**
     * [Optional] License expiration date for the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'licenseExpirationDate'?: number | null;
    /**
     * [Optional] Approval status of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'approvalStatus'?: string | null;
    /**
     * [Optional] Release date of the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'releaseDate'?: number | null;
    /**
     * [Optional] Maintenance date of the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'maintenanceDate'?: number | null;
    /**
     * [Optional] Retirement date of the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'retirementDate'?: number | null;
    /**
     * [Optional] End of life support date of the software asset.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'endOfLifeSupportDate'?: number | null;
    /**
     * [Optional] If set, the Extended End of Life/Support Date cannot occur prior to the End of Life/Support Date.
     * @type {number}
     * @memberof SwBaselineResponseGetDataInner
     */
    'extendedEndOfLifeSupportDate'?: number | null;
    /**
     * [Optional] Indicates whether the asset is a critical information system asset.
     * @type {boolean}
     * @memberof SwBaselineResponseGetDataInner
     */
    'criticalAsset'?: boolean | null;
    /**
     * [Optional] Location of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'location'?: string | null;
    /**
     * [Optional] Purpose of the software asset.
     * @type {string}
     * @memberof SwBaselineResponseGetDataInner
     */
    'purpose'?: string | null;
    /**
     * [Optional] Unsupported operating system. VA only.
     * @type {boolean}
     * @memberof SwBaselineResponseGetDataInner
     */
    'unsupportedOperatingSystem'?: boolean | null;
    /**
     * [Optional] Unapproved software from TRM. VA only
     * @type {boolean}
     * @memberof SwBaselineResponseGetDataInner
     */
    'unapprovedSoftwareFromTrm'?: boolean | null;
    /**
     * [Optional] Approved waiver. VA only
     * @type {boolean}
     * @memberof SwBaselineResponseGetDataInner
     */
    'approvedWaiver'?: boolean | null;
}
/**
 * 
 * @export
 * @interface SwBaselineResponsePostPut
 */
export interface SwBaselineResponsePostPut {
    /**
     * 
     * @type {Response200}
     * @memberof SwBaselineResponsePostPut
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<SwBaselineResponsePostPutDataInner>}
     * @memberof SwBaselineResponsePostPut
     */
    'data'?: Array<SwBaselineResponsePostPutDataInner>;
}
/**
 * 
 * @export
 * @interface SwBaselineResponsePostPutDataInner
 */
export interface SwBaselineResponsePostPutDataInner {
    /**
     * 
     * @type {number}
     * @memberof SwBaselineResponsePostPutDataInner
     */
    'systemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SwBaselineResponsePostPutDataInner
     */
    'softwareId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SwBaselineResponsePostPutDataInner
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof SwBaselineResponsePostPutDataInner
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface SystemResponse
 */
export interface SystemResponse {
    /**
     * 
     * @type {Response200}
     * @memberof SystemResponse
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Systems}
     * @memberof SystemResponse
     */
    'data'?: Systems;
}
/**
 * 
 * @export
 * @interface SystemRolesCategoryResponse
 */
export interface SystemRolesCategoryResponse {
    /**
     * 
     * @type {Response200}
     * @memberof SystemRolesCategoryResponse
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<RoleCategory>}
     * @memberof SystemRolesCategoryResponse
     */
    'data'?: Array<RoleCategory> | null;
}
/**
 * 
 * @export
 * @interface SystemRolesResponse
 */
export interface SystemRolesResponse {
    /**
     * 
     * @type {Response200}
     * @memberof SystemRolesResponse
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<SystemRolesResponseDataInner>}
     * @memberof SystemRolesResponse
     */
    'data'?: Array<SystemRolesResponseDataInner>;
}
/**
 * 
 * @export
 * @interface SystemRolesResponseDataInner
 */
export interface SystemRolesResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof SystemRolesResponseDataInner
     */
    'roleCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemRolesResponseDataInner
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface Systems
 */
export interface Systems {
    /**
     * [Read-Only] Date the system was registered into eMASS.
     * @type {number}
     * @memberof Systems
     */
    'registrationCompletionDate'?: number | null;
    /**
     * [Read-Only] Identifies the current System Acquisition Phase for programs of record.
     * @type {string}
     * @memberof Systems
     */
    'systemLifeCycleAcquisitionPhase'?: string | null;
    /**
     * [Read-Only] Lists applicable tracking indicator(s).
     * @type {string}
     * @memberof Systems
     */
    'specialType'?: string | null;
    /**
     * [Read-Only] Provides a brief reason for any tracking indicator(s) selected.
     * @type {string}
     * @memberof Systems
     */
    'specialTypeDescription'?: string | null;
    /**
     * [Read-Only] Identifies the appropriate portfolio or capability area. Navy only.
     * @type {string}
     * @memberof Systems
     */
    'missionPortfolio'?: string | null;
    /**
     * [Read-Only] Indicates whether Naval Nuclear Propulsion Information (NNPI) is stored, disseminated, or processed through this system. Navy only.
     * @type {boolean}
     * @memberof Systems
     */
    'isNNPI'?: boolean | null;
    /**
     * [Read-Only] Indicates whether the system is pursuing an RBC authorization. Navy only.
     * @type {boolean}
     * @memberof Systems
     */
    'isRBC'?: boolean | null;
    /**
     * [Read-Only] Indicates if the system has a waiver from OPNAV N2N6G (DDCIO(N)) to proceed with a DIACAP accreditation. Navy and DIACAP only.
     * @type {boolean}
     * @memberof Systems
     */
    'isWaiver'?: boolean | null;
    /**
     * [Read-Only] The system record\'s Program Office. Navy only.
     * @type {string}
     * @memberof Systems
     */
    'programOffice'?: string | null;
    /**
     * [Read-Only] Vulnerability Remediation Asset Manager (VRAM) identification number. \"N/A\" indicates the system record is not currently registered in VRAM.  Navy only.
     * @type {string}
     * @memberof Systems
     */
    'vramId'?: string | null;
    /**
     * [Read-only] Unique system record identifier.
     * @type {number}
     * @memberof Systems
     */
    'systemId'?: number;
    /**
     * [Read-only] RMF/DIACAP Policy identifier for the system record.
     * @type {string}
     * @memberof Systems
     */
    'policy'?: SystemsPolicyEnum | null;
    /**
     * [Read-Only] Registration type of the system record. Values include (assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider.)
     * @type {string}
     * @memberof Systems
     */
    'registrationType'?: SystemsRegistrationTypeEnum | null;
    /**
     * [Read-only] Name of the system record.
     * @type {string}
     * @memberof Systems
     */
    'name'?: string | null;
    /**
     * [Read-only] Acronym of the system record.
     * @type {string}
     * @memberof Systems
     */
    'acronym'?: string | null;
    /**
     * [Read-only] Description of the system record.
     * @type {string}
     * @memberof Systems
     */
    'description'?: string | null;
    /**
     * [Read-Only] Name of the top-level component that owns the system.
     * @type {string}
     * @memberof Systems
     */
    'instance'?: string | null;
    /**
     * [Read-Only] Owning organization of the system record. Values match the eMASS instance Organizational Hierarchy.
     * @type {string}
     * @memberof Systems
     */
    'owningOrganization'?: string | null;
    /**
     * [Read-only] Secondary organization that owns the system record (i.e. Sub-Organization-level.
     * @type {string}
     * @memberof Systems
     */
    'secondaryOrganization'?: string | null;
    /**
     * [Read-only] Version/Release Number of system record.
     * @type {string}
     * @memberof Systems
     */
    'versionReleaseNo'?: string | null;
    /**
     * [Read-only] Type of the system record. RMF values include the following options (IS Major Application, IS Enclave, Platform IT System). DIACAP values include the following options (Platform IT Interconnection, AIS Application, Outsourced IT-Based Process (DoD-controlled), Enclave, Outsourced IT-Based Process (service provider shared))
     * @type {string}
     * @memberof Systems
     */
    'systemType'?: SystemsSystemTypeEnum | null;
    /**
     * [Read-only] Is the system record a National Security System?
     * @type {boolean}
     * @memberof Systems
     */
    'isNSS'?: boolean | null;
    /**
     * [Read-only] Does the system record have a public facing component/presence.
     * @type {boolean}
     * @memberof Systems
     */
    'isPublicFacing'?: boolean | null;
    /**
     * [Read-only] Corresponding Cyber Operational Attributes Management System (COAMS) identifier for the system record.
     * @type {number}
     * @memberof Systems
     */
    'coamsId'?: number | null;
    /**
     * [Read-only] Identifies if system is a Type Authorization.
     * @type {boolean}
     * @memberof Systems
     */
    'isTypeAuthorization'?: boolean | null;
    /**
     * [Read-only] DITPR ID of the system record.
     * @type {string}
     * @memberof Systems
     */
    'ditprId'?: string;
    /**
     * [Read-Only] Same field as ditprId but displays as apmsId for Army only.
     * @type {string}
     * @memberof Systems
     */
    'apmsId'?: string | null;
    /**
     * [Read-Only] Same field as ditprId but displays as vasiId for VA only.
     * @type {string}
     * @memberof Systems
     */
    'vasiId'?: string | null;
    /**
     * [Read-only] Authorization Status of the system record.
     * @type {string}
     * @memberof Systems
     */
    'authorizationStatus'?: string | null;
    /**
     * [Read-only] Authorization Date of the system record.
     * @type {number}
     * @memberof Systems
     */
    'authorizationDate'?: number | null;
    /**
     * [Read-only] Authorization Termination Date of the system record.
     * @type {number}
     * @memberof Systems
     */
    'authorizationTerminationDate'?: number | null;
    /**
     * [Read-only] Length of system\'s Authorization. Calculated based off of Authorization Date & Authorization Termination Date.
     * @type {number}
     * @memberof Systems
     */
    'authorizationLength'?: number | null;
    /**
     * [Read-Only] Document an assessment of overall cybersecurity risk (Very Low, Low, Moderate, High, Very High) and identify the key drivers for assessment.
     * @type {string}
     * @memberof Systems
     */
    'securityControlsAssessorExecutiveSummary'?: string | null;
    /**
     * [Read-Only] Document an assessment of overall cybersecurity risk (Very Low, Low, Moderate, High, Very High) and identify the key drivers for assessment. VA only
     * @type {string}
     * @memberof Systems
     */
    'riskReviewExecutiveSummary'?: string | null;
    /**
     * [Read-only] Terms/Conditions for receiving and maintaining the system\'s Authorization. Assigned by the Authorizing Official.
     * @type {string}
     * @memberof Systems
     */
    'termsForAuth'?: string | null;
    /**
     * [Read-only] Status of the approval of the system\'s RMF Security Plan. Values include the following options (Approved, Denied, Not Yet Approved).
     * @type {string}
     * @memberof Systems
     */
    'securityPlanApprovalStatus'?: SystemsSecurityPlanApprovalStatusEnum | null;
    /**
     * [Read-only] Approval date of the system\'s RMF Security Plan.
     * @type {number}
     * @memberof Systems
     */
    'securityPlanApprovalDate'?: number | null;
    /**
     * [Read-only] Mission Criticality of the system record.
     * @type {string}
     * @memberof Systems
     */
    'missionCriticality'?: string | null;
    /**
     * [Read-only] Geographical Association of the system record.
     * @type {string}
     * @memberof Systems
     */
    'geographicalAssociation'?: string | null;
    /**
     * [Read-only] Ownership of the system record.
     * @type {string}
     * @memberof Systems
     */
    'systemOwnershipControlled'?: string | null;
    /**
     * [Read-only] Governing Mission Area of the system record.
     * @type {string}
     * @memberof Systems
     */
    'governingMissionArea'?: string | null;
    /**
     * [Read-only] Primary functional area of the system record.
     * @type {string}
     * @memberof Systems
     */
    'primaryFunctionalArea'?: string | null;
    /**
     * [Read-only] Secondary functional area of the system record.
     * @type {string}
     * @memberof Systems
     */
    'secondaryFunctionalArea'?: string | null;
    /**
     * [Read-only] Primary Control Set of the system record. RMF values include the following options (NIST SP 800-53 Revision 4), DIACAP values include the following options (DoDI 8500.2)
     * @type {string}
     * @memberof Systems
     */
    'primaryControlSet'?: SystemsPrimaryControlSetEnum | null;
    /**
     * [Read-only] Confidentiality of the system record. RMF values include the following options (High, Moderate, Low)
     * @type {string}
     * @memberof Systems
     */
    'confidentiality'?: SystemsConfidentialityEnum | null;
    /**
     * [Read-only] Integrity of the system record. RMF values include the following options (High, Moderate, Low)
     * @type {string}
     * @memberof Systems
     */
    'integrity'?: SystemsIntegrityEnum | null;
    /**
     * [Read-only] Availability of the system record. RMF values include the following options (High, Moderate, Low)
     * @type {string}
     * @memberof Systems
     */
    'availability'?: SystemsAvailabilityEnum | null;
    /**
     * [Read-only] Overlays applied to the system record. Multiple values are separated by semi-colon \';\'.
     * @type {string}
     * @memberof Systems
     */
    'appliedOverlays'?: string | null;
    /**
     * [Read-only] The STIG\'s applied to the system record.
     * @type {string}
     * @memberof Systems
     */
    'appliedStigs'?: string | null;
    /**
     * [Read-only] RMF Activity of the system record.
     * @type {string}
     * @memberof Systems
     */
    'rmfActivity'?: string | null;
    /**
     * [Read-only] Cross Domain Tickets of the system record.
     * @type {string}
     * @memberof Systems
     */
    'crossDomainTicket'?: string | null;
    /**
     * [Read-Only] DITPR-DON identifier of the system record.
     * @type {string}
     * @memberof Systems
     */
    'ditprDonId'?: string | null;
    /**
     * [Read-Only] MAC level of the system record.
     * @type {string}
     * @memberof Systems
     */
    'mac'?: SystemsMacEnum | null;
    /**
     * [Read-Only] DoD Confidentiality level of the system record.
     * @type {string}
     * @memberof Systems
     */
    'dodConfidentiality'?: SystemsDodConfidentialityEnum | null;
    /**
     * [Read-Only] Is there a Contingency Plan in place for this system that addresses disruptions in operations?
     * @type {boolean}
     * @memberof Systems
     */
    'contingencyPlanRequired'?: boolean | null;
    /**
     * [Read-Only] Filename of the system\'s Contingency Plan artifact.
     * @type {string}
     * @memberof Systems
     */
    'contingencyPlanArtifact'?: string | null;
    /**
     * [Read-only] Has the system record\'s Contingency Plan been tested?
     * @type {boolean}
     * @memberof Systems
     */
    'contingencyPlanTested'?: boolean | null;
    /**
     * [Read-only] Date the system record\'s Contingency Plan was tested.
     * @type {number}
     * @memberof Systems
     */
    'contingencyPlanTestDate'?: number | null;
    /**
     * [Read-Only] Is the system required to complete a Security Review?
     * @type {boolean}
     * @memberof Systems
     */
    'securityReviewRequired'?: boolean | null;
    /**
     * [Read-Only] Has a Security Review been completed for this system?
     * @type {boolean}
     * @memberof Systems
     */
    'securityReviewCompleted'?: boolean | null;
    /**
     * [Read-Only] Date of the system\'s latest security review or annual assessment.
     * @type {number}
     * @memberof Systems
     */
    'securityReviewCompletionDate'?: number | null;
    /**
     * [Read-Only] Date when the system\'s next security review or annual assessment is due by.
     * @type {number}
     * @memberof Systems
     */
    'nextSecurityReviewDueDate'?: number | null;
    /**
     * [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item?
     * @type {boolean}
     * @memberof Systems
     */
    'hasOpenPoamItem'?: boolean | null;
    /**
     * [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 90 to 120 days past its Scheduled Completion Date?
     * @type {boolean}
     * @memberof Systems
     */
    'hasOpenPoamItem90to120PastScheduledCompletionDate'?: boolean | null;
    /**
     * [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 120 days past its Scheduled Completion Date?
     * @type {boolean}
     * @memberof Systems
     */
    'hasOpenPoamItem120PlusPastScheudledCompletionDate'?: boolean | null;
    /**
     * [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)
     * @type {string}
     * @memberof Systems
     */
    'impact'?: SystemsImpactEnum | null;
    /**
     * [Read-only] Does the system record contain and/or process Controlled Unclassified information?
     * @type {boolean}
     * @memberof Systems
     */
    'hasCUI'?: boolean | null;
    /**
     * [Read-only] Does the system record contain and/or process Personally Identifiable Information?
     * @type {boolean}
     * @memberof Systems
     */
    'hasPII'?: boolean | null;
    /**
     * [Read-only] Does the system record contain and/or process Personal Health Information?
     * @type {boolean}
     * @memberof Systems
     */
    'hasPHI'?: boolean | null;
    /**
     * [Read-Only] Determine if a PPSM registration is required.
     * @type {string}
     * @memberof Systems
     */
    'ppsmRegistrationRequired'?: string | null;
    /**
     * [Read-only] Unique identifier for the DoD\'s Ports, Protocols, and Services Management Registry system.
     * @type {string}
     * @memberof Systems
     */
    'ppsmRegistryNumber'?: string | null;
    /**
     * [Read-Only] Clarify why a PPSM registraiton is not necessary.
     * @type {string}
     * @memberof Systems
     */
    'ppsmRegistrationExemptionJustification'?: string | null;
    /**
     * [Read-only] Identify the interconnected information systems and corresponding identifiers within control CA-3.
     * @type {string}
     * @memberof Systems
     */
    'interconnectedInformationSystemAndIdentifiers'?: string | null;
    /**
     * [Read-only] Does the system require a Privacy Impact Assessment?
     * @type {boolean}
     * @memberof Systems
     */
    'privacyImpactAssessmentRequired'?: boolean | null;
    /**
     * [Read-only] Status of the PIA, availability values include the following options (Not Started, In Progress, Completed)
     * @type {string}
     * @memberof Systems
     */
    'privacyImpactAssessmentStatus'?: SystemsPrivacyImpactAssessmentStatusEnum | null;
    /**
     * [Read-only] Date in which the system\'s PIA took place.
     * @type {number}
     * @memberof Systems
     */
    'privacyImpactAssessmentDate'?: number | null;
    /**
     * [Read-Only] Filename of the system\'s PIA artifact.
     * @type {string}
     * @memberof Systems
     */
    'privacyImpactAssessmentArtifact'?: string | null;
    /**
     * [Read-only] User-defined field to augment Ad Hoc Reporting.
     * @type {string}
     * @memberof Systems
     */
    'userDefinedField1'?: string | null;
    /**
     * [Read-only] User-defined field to augment Ad Hoc Reporting.
     * @type {string}
     * @memberof Systems
     */
    'userDefinedField2'?: string | null;
    /**
     * [Read-only] User-defined field to augment Ad Hoc Reporting.
     * @type {string}
     * @memberof Systems
     */
    'userDefinedField3'?: string | null;
    /**
     * [Read-only] User-defined field to augment Ad Hoc Reporting.
     * @type {string}
     * @memberof Systems
     */
    'userDefinedField4'?: string | null;
    /**
     * [Read-only] User-defined field to augment Ad Hoc Reporting.
     * @type {string}
     * @memberof Systems
     */
    'userDefinedField5'?: string | null;
    /**
     * [Read-only] Displays the system\'s current step within the RMF Lifecycle.
     * @type {string}
     * @memberof Systems
     */
    'currentRmfLifecycleStep'?: SystemsCurrentRmfLifecycleStepEnum | null;
    /**
     * [Read-only] Include any additional information required by the organization.
     * @type {string}
     * @memberof Systems
     */
    'otherInformation'?: string | null;
    /**
     * [Read-only] Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
     * @type {boolean}
     * @memberof Systems
     */
    'reportsForScorecard'?: boolean | null;
    /**
     * [Read-Only] The overall classification level of information that the System is approved to collect, process, store, and/or distribute.
     * @type {string}
     * @memberof Systems
     */
    'highestSystemDataClassification'?: string | null;
    /**
     * [Read-Only] Same field as highestSystemDataClassification, but displays as overallClassification for NISP only.
     * @type {string}
     * @memberof Systems
     */
    'overallClassification'?: string | null;
    /**
     * [Read-Only] Indicates if the system contains High Value Assets. Does not display if value is null
     * @type {boolean}
     * @memberof Systems
     */
    'isHVA'?: boolean | null;
    /**
     * [Read-Only] Per OMB Circular A-127, a financial management system includes the core financial systems and the financial portions of mixed systems necessary to support financial management, including automated and manual processes, procedures, and controls, data, hardware, software, and support personnel dedicated to the operation and maintenance of system functions. The following are examples of financial management systems: core financial systems, procurement systems, loan systems, grants systems, payroll systems, budget formulation systems, billing systems, and travel systems. 
     * @type {boolean}
     * @memberof Systems
     */
    'isFinancialManagement'?: boolean | null;
    /**
     * [Read-Only] A reciprocity system is any information system that is part of a mutual agreement among participating organizations to accept each other\'s security assessments in order to reuse information system resources and/or to accept each other\'s assessed security posture in order to share information. 
     * @type {boolean}
     * @memberof Systems
     */
    'isReciprocity'?: boolean | null;
    /**
     * [Read-Only] The following justifications are acceptable for exemption from reciprocity: (a) the existence of the system is classified (not the data, but the existence of the system) or (b) the system\'s authorization to operate is in the process of being pulled (e.g. DATO, Decommission). 
     * @type {string}
     * @memberof Systems
     */
    'reciprocityExemption'?: string | null;
    /**
     * [Read-Only] Is this a cloud-based IS?
     * @type {boolean}
     * @memberof Systems
     */
    'cloudComputing'?: boolean | null;
    /**
     * [Read-Only] Values include the following: (Hybrid, Private, Public)
     * @type {string}
     * @memberof Systems
     */
    'cloudType'?: SystemsCloudTypeEnum | null;
    /**
     * [Read-Only] The Authority to Connect decision. Values include the following: (Authority to Connect (ATC), Denial of Authority to Connect (DATC), Not Yet Connected, Decommissioned) 
     * @type {string}
     * @memberof Systems
     */
    'authorizationToConnectStatus'?: SystemsAuthorizationToConnectStatusEnum | null;
    /**
     * [Read-Only] Software as a Service (SaaS) cloud service model.
     * @type {boolean}
     * @memberof Systems
     */
    'isSaaS'?: boolean | null;
    /**
     * [Read-Only] Platform as a Service (PaaS) cloud service model.
     * @type {boolean}
     * @memberof Systems
     */
    'isPaaS'?: boolean | null;
    /**
     * [Read-Only] Infrastructure as a Service (IaaS) cloud service model.
     * @type {boolean}
     * @memberof Systems
     */
    'isIaaS'?: boolean | null;
    /**
     * [Read-Only] Free text field to include other cloud service models.
     * @type {string}
     * @memberof Systems
     */
    'otherServiceModels'?: string | null;
    /**
     * [Read-Only] Indicates the date by which the System needs to be deployed to a production environment.
     * @type {number}
     * @memberof Systems
     */
    'needDate'?: number | null;
    /**
     * [Read-Only] The overall risk score of the system
     * @type {string}
     * @memberof Systems
     */
    'overallRiskScore'?: string | null;
    /**
     * [Read-Only] Identifies whether a System has been designated as High Risk Review. USCG and Navy only.
     * @type {boolean}
     * @memberof Systems
     */
    'isHRR'?: boolean | null;
    /**
     * [Read-Only] The Connectivity Authorization Date.
     * @type {number}
     * @memberof Systems
     */
    'connectivityAuthorizationDate'?: number | null;
    /**
     * [Read-Only] The Connectivity Authorization Termination Date.
     * @type {number}
     * @memberof Systems
     */
    'connectivityAuthorizationTerminationDate'?: number | null;
    /**
     * [Read-Only] Indicate the date by which the System needs to be deployed to a production environment. VA only.
     * @type {string}
     * @memberof Systems
     */
    'systemDevelopmentLifeCycle'?: string | null;
    /**
     * [Read-Only] Is this IS reportable per Federal Information Security Management Act (FISMA) established requirements? VA only
     * @type {boolean}
     * @memberof Systems
     */
    'isFISMAReportable'?: boolean | null;
    /**
     * [Read-Only] System Tags for enterprise level, to include CIO and CISO, tracking efforts. VA only.
     * @type {string}
     * @memberof Systems
     */
    'groupTagging'?: string | null;
    /**
     * [Read-Only] System Tag explanation(s) for enterprise level, to include CIO and CISO, tracking efforts. VA only.
     * @type {string}
     * @memberof Systems
     */
    'groupTagDescriptions'?: string | null;
    /**
     * [Read-Only] The system\'s DADMS ID. USMC only.
     * @type {string}
     * @memberof Systems
     */
    'dadmsId'?: string | null;
    /**
     * [Read-Only] Date the system expires in DADMS. USMC only.
     * @type {number}
     * @memberof Systems
     */
    'dadmsExpirationDate'?: number | null;
    /**
     * [Read-Only] Identify the type of connectivity for the network/enclave, e.g., DISA circuit (NIPR, SIPR) or HPCMP circuit (DREN, SDREN, Outreach). Navy only.
     * @type {string}
     * @memberof Systems
     */
    'enclaveConnectivity'?: string | null;
    /**
     * [Read-Only] Identify the primary computing environment for where the information system is deployed. Navy only.
     * @type {string}
     * @memberof Systems
     */
    'environmentType'?: string | null;
    /**
     * [Read-Only] Indicate whether the information system provides inheritable controls. Navy only
     * @type {boolean}
     * @memberof Systems
     */
    'navyCommonControlProvider'?: boolean | null;
    /**
     * [Read-Only] Identify the broker responsible for the delivery of commercial cloud services and capabilities. Refer to Navy Commercial Cloud Brokerage Policy. Navy Only
     * @type {string}
     * @memberof Systems
     */
    'navyCloudBroker'?: string | null;
    /**
     * [Read-Only] The eMASS ID of the identified cloud broker. Navy only.
     * @type {number}
     * @memberof Systems
     */
    'cloudBrokerEmassId'?: number | null;
    /**
     * [Read-Only] The provisional authorization termination date of the identified cloud broker. Navy only
     * @type {number}
     * @memberof Systems
     */
    'cloudBrokerProvisionalAuthorizationAtd'?: number | null;
    /**
     * [Read-Only] Indicate whether this is a joint authorization being issued by two or more Authorizing Officials. Navy only
     * @type {boolean}
     * @memberof Systems
     */
    'navyJointAuthorization'?: boolean | null;
    /**
     * [Read-Only] Provide all NMCI CLINs associated to the system/services within the authorization boundary. Navy only
     * @type {string}
     * @memberof Systems
     */
    'nmciNgenClins'?: string | null;
    /**
     * [Read-Only] Identify the Navy enterprise network where the information system is deployed. Navy only
     * @type {string}
     * @memberof Systems
     */
    'enterpriseLocations'?: string | null;
    /**
     * [Read-Only] Systems that have public-facing components/presences are typically required to be documented and registered as part of Organzationally-approved whitelisting processes.
     * @type {string}
     * @memberof Systems
     */
    'whitelistId'?: string | null;
    /**
     * [Read-Only] Provide/upload the documentation that identifies or describes the components or aspects of the System that are public-facing (whitelisted).
     * @type {string}
     * @memberof Systems
     */
    'whitelistInventory'?: string | null;
    /**
     * [Read-Only] Values include the following options (I,II,III)
     * @type {string}
     * @memberof Systems
     */
    'acquisitionCategory'?: string | null;
    /**
     * [Read-Only] Lists the software category.
     * @type {string}
     * @memberof Systems
     */
    'softwareCategory'?: string | null;
    /**
     * [Read-Only] Name of the system\'s Cybersecurity Service Provider.
     * @type {string}
     * @memberof Systems
     */
    'cybersecurityServiceProvider'?: string | null;
    /**
     * [Read-Only] If Not Applicable, provide the exception justification.
     * @type {string}
     * @memberof Systems
     */
    'cybersecurityServiceProviderExceptionJustification'?: string | null;
    /**
     * [Read-Only] MTD represents the total amount of time leaders/managers are willing to accept for a process outage or disruption.
     * @type {string}
     * @memberof Systems
     */
    'maximumTolerableDowntime'?: SystemsMaximumTolerableDowntimeEnum | null;
    /**
     * [Read-Only] RTO defines the maximum amount of time a system can remain unavailable before there is an unacceptable impact on other systems, supported business processes, and the MTD.
     * @type {string}
     * @memberof Systems
     */
    'recoveryTimeObjective'?: string | null;
    /**
     * [Read-Only] RPO represents the point in time, prior to a disruption or system outage, to which mission/business data can be recovered (given the most recent backup copy of the data) after an outage. The system data/information owner determines an acceptable RPO in terms of amount of tolerable data loss before unacceptable impact occurs.
     * @type {string}
     * @memberof Systems
     */
    'recoveryPointObjective'?: string | null;
    /**
     * [Read-Only] Is a Business Impact Analysis in place that identifies critical business processes, MTD, RTO, and RPO?
     * @type {boolean}
     * @memberof Systems
     */
    'businessImpactAnalysisRequired'?: boolean | null;
    /**
     * [Read-Only] Filename of the system\'s Business Impact Analysis artifact.
     * @type {string}
     * @memberof Systems
     */
    'businessImpactAnalysisArtifact'?: string | null;
    /**
     * [Read-Only] Is there a Incident Response Plan in place for this system that provides the roadmap for implementing the incident response capability?
     * @type {boolean}
     * @memberof Systems
     */
    'incidentResponsePlanRequired'?: boolean | null;
    /**
     * [Read-Only] Filename of the system\'s Incident Response Plan artifact.
     * @type {string}
     * @memberof Systems
     */
    'incidentResponsePlanArtifact'?: string | null;
    /**
     * [Read-Only] Is there a Disaster Recovery Plan in place for this system that addresses information system disruptions that require relocation?
     * @type {boolean}
     * @memberof Systems
     */
    'disasterRecoveryPlanRequired'?: boolean | null;
    /**
     * [Read-Only] Filename of the system\'s Disaster Recovery Plan artifact.
     * @type {string}
     * @memberof Systems
     */
    'disasterRecoveryPlanArtifact'?: string | null;
    /**
     * [Read-Only] Indicate whether a Privacy Threshold Analysis (PTA) has been performed for this IS.
     * @type {boolean}
     * @memberof Systems
     */
    'privacyThresholdAnalysisCompleted'?: boolean | null;
    /**
     * [Read-Only] Date in which this sytem\'s Privacy Threshold Analysis took place.
     * @type {number}
     * @memberof Systems
     */
    'privacyThresholdAnalysisDate'?: number | null;
    /**
     * [Read-Only] Filename of the system\'s Privacy Threshold Analysis artifact.
     * @type {string}
     * @memberof Systems
     */
    'privacyThresholdAnalysisArtifact'?: string | null;
    /**
     * [Read-Only] Does this system require a Privacy Act System of Record Notice per DoD 5400.11-R?
     * @type {boolean}
     * @memberof Systems
     */
    'privacyActSystemOfRecordsNoticeRequired'?: boolean | null;
    /**
     * [Read-Only] Indicate whether an E-Authentication Risk Assessment has been performed for the system in accordance with OMB M-04-04.
     * @type {boolean}
     * @memberof Systems
     */
    'eAuthenticationRiskAssessmentRequired'?: boolean | null;
    /**
     * [Read-Only] Date this system\'s EAuthentication Risk Assessment took place.
     * @type {number}
     * @memberof Systems
     */
    'eAuthenticationRiskAssessmentDate'?: number | null;
    /**
     * [Read-Only] Filename of the system\'s Privacy Threshold Analysis artifact.
     * @type {string}
     * @memberof Systems
     */
    'eAuthenticationRiskAssessmentArtifact'?: string | null;
    /**
     * [Read-Only] Identify the total number of assets associated with this boundary that are only on IPv4.
     * @type {number}
     * @memberof Systems
     */
    'ipv4OnlyAssets'?: number | null;
    /**
     * [Read-Only] Identify the total number of assets associated with this boundary that are only on IPv6.
     * @type {number}
     * @memberof Systems
     */
    'ipv6OnlyAssets'?: number | null;
    /**
     * [Read-Only] Identify the total number of assets associated with this boundary that are operating on IPv4/IPv6 dual-stack.
     * @type {number}
     * @memberof Systems
     */
    'ipv4Ipv6DualStackAssets'?: number | null;
    /**
     * [Read-Only] Total number of IPv4, IPv6, and dual-stack assets identified. Value calculated upon Save action
     * @type {number}
     * @memberof Systems
     */
    'totalIpAssets'?: number | null;
    /**
     * [Read-Only] Identify the organization that generated the existing authorization package, including (where applicable) individual points of contact.
     * @type {string}
     * @memberof Systems
     */
    'originatingOrganization'?: string | null;
    /**
     * [Read-Only] Provide a detailed justification as to why this system should be deployed and used within the requesting organization.
     * @type {string}
     * @memberof Systems
     */
    'systemUseJustification'?: string | null;
    /**
     * [Read-Only] Filename of the System Use Justification Artifact, including the file extension.
     * @type {string}
     * @memberof Systems
     */
    'systemUseJustificationArtifact'?: string | null;
    /**
     * [Read-Only] The system\'s Authority to Use Status.
     * @type {string}
     * @memberof Systems
     */
    'authorizationToUseStatus'?: string | null;
    /**
     * [Read-Only] The system\'s Reciprocity Acceptance Status. Army IC only.
     * @type {string}
     * @memberof Systems
     */
    'reciprocityAcceptanceStatus'?: string | null;
    /**
     * [Read-Only] The system\'s Use Authorization Date.
     * @type {number}
     * @memberof Systems
     */
    'useAuthorizationDate'?: number | null;
    /**
     * [Read-Only] The system\'s Reciprocity Acceptance Date. Army IC only.
     * @type {number}
     * @memberof Systems
     */
    'reciprocityAcceptanceDate'?: number | null;
    /**
     * [Read-Only] The system\'s Use Authorization Termination Date.
     * @type {number}
     * @memberof Systems
     */
    'useAuthorizationTerminationDate'?: number | null;
    /**
     * [Read-Only] The system\'s Reciprocity Acceptance Termination Date. Army IC only.
     * @type {number}
     * @memberof Systems
     */
    'reciprocityAcceptanceTerminationDate'?: number | null;
    /**
     * [Read-Only] The system\'s Terms / Conditions for Use Summary.
     * @type {string}
     * @memberof Systems
     */
    'termsConditionsForUseSummary'?: string | null;
    /**
     * [Read-Only] The system\'s Terms / Conditions for Reciprocity Summary. Army IC only.
     * @type {string}
     * @memberof Systems
     */
    'termsConditionsForReciprocitySummary'?: string | null;
    /**
     * [Read-Only] Annotate \'Yes\' if your system performs a Primary Mission Essential Function. VA only
     * @type {boolean}
     * @memberof Systems
     */
    'primaryMissionEssentialFunction'?: boolean | null;
    /**
     * [Read-Only] The FIPS category \"Availability\" of this system must be marked \"High\" if the system is listed as a PMEF, and the RTO must be 12 hours or shorter. VA only
     * @type {string}
     * @memberof Systems
     */
    'pmefDescription'?: string | null;
    /**
     * [Read-Only] Annotate \"Yes\" if your system performs a Mission Essential Function. VA only.
     * @type {boolean}
     * @memberof Systems
     */
    'missionEssentialFunction'?: boolean | null;
    /**
     * [Read-Only] MEFs are listed in the OIT Continuity Plan. VA Handbook 0322 will be updated with these MEFs. VA only.
     * @type {string}
     * @memberof Systems
     */
    'mefDescription'?: string | null;
    /**
     * [Read-Only] Identify the administration that this information system supports. VA only.
     * @type {string}
     * @memberof Systems
     */
    'administration'?: string | null;
    /**
     * [Read-Only] If the Administration field is set to \"Other\", this free-text field becomes required. VA only.
     * @type {string}
     * @memberof Systems
     */
    'administrationOtherJustification'?: string | null;
    /**
     * [Read-Only] The date the Authority to Connect (ATC) or Interim Authority to Connect (IATC) was granted.
     * @type {number}
     * @memberof Systems
     */
    'atcIatcGrantedDate'?: number | null;
    /**
     * [Read-Only] The date the Authority to Connect (ATC) or Interim Authority to Connect (IATC) expires.
     * @type {number}
     * @memberof Systems
     */
    'atcIatcExpirationDate'?: number | null;
    /**
     * [Read-Only] List of pending items required for the Authority to Connect (ATC) or Interim Authority to Connect (IATC).
     * @type {string}
     * @memberof Systems
     */
    'atcIatcPendingItems'?: string | null;
    /**
     * [Read-Only] The date the pending items are due.
     * @type {number}
     * @memberof Systems
     */
    'pendingItemsDueDate'?: number | null;
    /**
     * [Read-Only] A DoDIN-N system is all encompassing for the following: Navy networks, systems, sites, corporate assets, centrally managed programs, programs of record, standalone, excepted, enterprise, non-enterprise, cloud, NIPRNET, SIPRNET, GENSER Classified, Defense Research Engineering Network (DREN), Secret DREN (SDREN), connected to the DoDIN or through commercial lines that are owned, operated, leased, contracted, maintained, managed, administered, house Navy data, house Navy personally identifiable information, house Navy protected health information, or controlled unclassified information. The DoDIN-N also includes commercial information technology, weapons systems/program manager/program of record/platform information technology, and operational technology. Navy only.
     * @type {boolean}
     * @memberof Systems
     */
    'dodinnSystemId'?: boolean | null;
    /**
     * [Read-Only] FCC CRMA/NAO approval for DoDIN-N operations. Navy only.
     * @type {string}
     * @memberof Systems
     */
    'authorizationToUseConnectStatus'?: string | null;
    /**
     * [Read-Only] The Use/Connect Authorization Date. Navy only.
     * @type {number}
     * @memberof Systems
     */
    'useConnectAuthorizationDate'?: number | null;
    /**
     * [Read-Only] The Use/Connect Authorization Termination Date Navy only.
     * @type {number}
     * @memberof Systems
     */
    'useConnectAuthorizationTerminationDate'?: number | null;
    /**
     * [Read-Only] Provide a description (if applicable) of any specific limitations or restrictions placed on the operation of the information system as part of the authorization to use/connect decision. Navy only.
     * @type {string}
     * @memberof Systems
     */
    'termsConditionsForUseConnectSummary'?: string | null;
    /**
     * [Read-Only] Identify the number of System Workstations. This data will be used for the National Industrial Security System (NISS) facility categorization. If field is not applicable enter \"0\". NISP only.
     * @type {number}
     * @memberof Systems
     */
    'workstations'?: number | null;
    /**
     * [Read-Only] Identify the number of System Servers. This data will be used for the National Industrial Security System (NISS) facility categorization. If field is not applicable enter \"0\". NISP only.
     * @type {number}
     * @memberof Systems
     */
    'servers'?: number | null;
    /**
     * 
     * @type {Array<ConnectivityCcsd>}
     * @memberof Systems
     */
    'connectivityCcsd'?: Array<ConnectivityCcsd> | null;
}

export const SystemsPolicyEnum = {
    Rmf: 'RMF',
    Diacap: 'DIACAP',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsPolicyEnum = typeof SystemsPolicyEnum[keyof typeof SystemsPolicyEnum];
export const SystemsRegistrationTypeEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    Guest: 'Guest',
    Regular: 'Regular',
    Functional: 'Functional',
    CloudServiceProvider: 'Cloud Service Provider',
    AuthorizationToUse: 'Authorization To Use',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsRegistrationTypeEnum = typeof SystemsRegistrationTypeEnum[keyof typeof SystemsRegistrationTypeEnum];
export const SystemsSystemTypeEnum = {
    IsMajorApplication: 'IS Major Application',
    IsEnclave: 'IS Enclave',
    PlatformIt: 'Platform IT',
    PlatformItSystem: 'Platform IT System',
    PlatformItInterconnection: 'Platform IT Interconnection',
    AisApplication: 'AIS Application',
    OutsourcedItBasedProcessDoDControlled: 'Outsourced IT-Based Process (DoD-controlled)',
    Enclave: 'Enclave',
    OutsourcedItBasedProcessServiceProviderShared: 'Outsourced IT-Based Process (service provider shared)',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsSystemTypeEnum = typeof SystemsSystemTypeEnum[keyof typeof SystemsSystemTypeEnum];
export const SystemsSecurityPlanApprovalStatusEnum = {
    Approved: 'Approved',
    NotYetApproved: 'Not Yet Approved',
    Denied: 'Denied',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsSecurityPlanApprovalStatusEnum = typeof SystemsSecurityPlanApprovalStatusEnum[keyof typeof SystemsSecurityPlanApprovalStatusEnum];
export const SystemsPrimaryControlSetEnum = {
    NistSp80053Revision4: 'NIST SP 800-53 Revision 4',
    DoDi85002: 'DoDI 8500.2',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsPrimaryControlSetEnum = typeof SystemsPrimaryControlSetEnum[keyof typeof SystemsPrimaryControlSetEnum];
export const SystemsConfidentialityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsConfidentialityEnum = typeof SystemsConfidentialityEnum[keyof typeof SystemsConfidentialityEnum];
export const SystemsIntegrityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsIntegrityEnum = typeof SystemsIntegrityEnum[keyof typeof SystemsIntegrityEnum];
export const SystemsAvailabilityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsAvailabilityEnum = typeof SystemsAvailabilityEnum[keyof typeof SystemsAvailabilityEnum];
export const SystemsMacEnum = {
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsMacEnum = typeof SystemsMacEnum[keyof typeof SystemsMacEnum];
export const SystemsDodConfidentialityEnum = {
    Public: 'Public',
    Sensitive: 'Sensitive',
    Classified: 'Classified',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsDodConfidentialityEnum = typeof SystemsDodConfidentialityEnum[keyof typeof SystemsDodConfidentialityEnum];
export const SystemsImpactEnum = {
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsImpactEnum = typeof SystemsImpactEnum[keyof typeof SystemsImpactEnum];
export const SystemsPrivacyImpactAssessmentStatusEnum = {
    NotStarted: 'Not Started',
    InProgress: 'In Progress',
    Completed: 'Completed',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsPrivacyImpactAssessmentStatusEnum = typeof SystemsPrivacyImpactAssessmentStatusEnum[keyof typeof SystemsPrivacyImpactAssessmentStatusEnum];
export const SystemsCurrentRmfLifecycleStepEnum = {
    _1Categorize: '1 - Categorize',
    _2Select: '2 - Select',
    _3Implement: '3 - Implement',
    _4Assess: '4 - Assess',
    _5Authorize: '5 - Authorize',
    _6Monitor: '6 - Monitor',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsCurrentRmfLifecycleStepEnum = typeof SystemsCurrentRmfLifecycleStepEnum[keyof typeof SystemsCurrentRmfLifecycleStepEnum];
export const SystemsCloudTypeEnum = {
    Hybrid: 'Hybrid',
    Private: 'Private',
    Public: 'Public',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsCloudTypeEnum = typeof SystemsCloudTypeEnum[keyof typeof SystemsCloudTypeEnum];
export const SystemsAuthorizationToConnectStatusEnum = {
    AuthorityToConnectAtc: 'Authority to Connect (ATC)',
    DenialOfAuthorityToConnectDatc: 'Denial of Authority to Connect (DATC)',
    NotYetConnected: 'Not Yet Connected',
    Decommissioned: 'Decommissioned',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsAuthorizationToConnectStatusEnum = typeof SystemsAuthorizationToConnectStatusEnum[keyof typeof SystemsAuthorizationToConnectStatusEnum];
export const SystemsMaximumTolerableDowntimeEnum = {
    Immediate: 'Immediate',
    LessThan2Hours: 'Less than 2 hours',
    LessThan4Hours: 'Less than 4 hours',
    LessThan6Hours: 'Less than 6 hours',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type SystemsMaximumTolerableDowntimeEnum = typeof SystemsMaximumTolerableDowntimeEnum[keyof typeof SystemsMaximumTolerableDowntimeEnum];

/**
 * 
 * @export
 * @interface SystemsResponse
 */
export interface SystemsResponse {
    /**
     * 
     * @type {Response200}
     * @memberof SystemsResponse
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<Systems>}
     * @memberof SystemsResponse
     */
    'data'?: Array<Systems>;
}
/**
 * 
 * @export
 * @interface Test
 */
export interface Test {
    /**
     * 
     * @type {Response200}
     * @memberof Test
     */
    'meta'?: Response200;
    /**
     * 
     * @type {TestData}
     * @memberof Test
     */
    'data'?: TestData;
}
/**
 * 
 * @export
 * @interface TestData
 */
export interface TestData {
    /**
     * 
     * @type {boolean}
     * @memberof TestData
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface TestResultsGet
 */
export interface TestResultsGet {
    /**
     * [Required] Unique eMASS identifier. Will need to provide correct number
     * @type {number}
     * @memberof TestResultsGet
     */
    'systemId'?: number;
    /**
     * [Read-Only] Control acronym associated with the test result. NIST SP 800-53 Revision 4 defined.
     * @type {string}
     * @memberof TestResultsGet
     */
    'control'?: string | null;
    /**
     * [Required] CCI associated with test result.
     * @type {string}
     * @memberof TestResultsGet
     */
    'cci'?: string;
    /**
     * [Required] The Security Control Assessment Procedure being assessed.
     * @type {string}
     * @memberof TestResultsGet
     */
    'assessmentProcedure'?: string;
    /**
     * [Read-only] Indicates whether a test result is inherited.
     * @type {boolean}
     * @memberof TestResultsGet
     */
    'isInherited'?: boolean | null;
    /**
     * [Required] Last Name, First Name. 100 Characters.
     * @type {string}
     * @memberof TestResultsGet
     */
    'testedBy'?: string;
    /**
     * [Required] Unix time format.
     * @type {number}
     * @memberof TestResultsGet
     */
    'testDate'?: number;
    /**
     * [Required] Include description of test result. 4000 Characters.
     * @type {string}
     * @memberof TestResultsGet
     */
    'description'?: string;
    /**
     * [Read-Only] Indicates the location in the Control Approval Chain when the test result is submitted.
     * @type {string}
     * @memberof TestResultsGet
     */
    'type'?: string | null;
    /**
     * [Required] Test result compliance status
     * @type {string}
     * @memberof TestResultsGet
     */
    'complianceStatus'?: TestResultsGetComplianceStatusEnum;
}

export const TestResultsGetComplianceStatusEnum = {
    Compliant: 'Compliant',
    NonCompliant: 'Non-Compliant',
    NotApplicable: 'Not Applicable',
    UnknownDefaultOpenApi: '11184809'
} as const;

export type TestResultsGetComplianceStatusEnum = typeof TestResultsGetComplianceStatusEnum[keyof typeof TestResultsGetComplianceStatusEnum];

/**
 * 
 * @export
 * @interface TestResultsPost
 */
export interface TestResultsPost {
    /**
     * CCI associated with test result.
     * @type {string}
     * @memberof TestResultsPost
     */
    'cci'?: string;
    /**
     * Indicates if operations result (success/fail)
     * @type {boolean}
     * @memberof TestResultsPost
     */
    'success'?: boolean;
    /**
     * The system identifier for the system being updated.
     * @type {number}
     * @memberof TestResultsPost
     */
    'systemId'?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof TestResultsPost
     */
    'errors'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface TestResultsResponseGet
 */
export interface TestResultsResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof TestResultsResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<TestResultsGet>}
     * @memberof TestResultsResponseGet
     */
    'data'?: Array<TestResultsGet>;
}
/**
 * 
 * @export
 * @interface TestResultsResponsePost
 */
export interface TestResultsResponsePost {
    /**
     * 
     * @type {Response200}
     * @memberof TestResultsResponsePost
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<TestResultsPost>}
     * @memberof TestResultsResponsePost
     */
    'data'?: Array<TestResultsPost>;
}
/**
 * 
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     * 
     * @type {UnauthorizedMeta}
     * @memberof Unauthorized
     */
    'meta'?: UnauthorizedMeta;
}
/**
 * 
 * @export
 * @interface UnauthorizedMeta
 */
export interface UnauthorizedMeta {
    /**
     * 
     * @type {number}
     * @memberof UnauthorizedMeta
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedMeta
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowDefinitionGet
 */
export interface WorkflowDefinitionGet {
    /**
     * [Read-Only] Unique workflow definition identifier.
     * @type {string}
     * @memberof WorkflowDefinitionGet
     */
    'workflowUid'?: string | null;
    /**
     * [Read-Only] The workflow type.
     * @type {string}
     * @memberof WorkflowDefinitionGet
     */
    'workflow'?: string | null;
    /**
     * [Read-Only] Version of the workflow definition.
     * @type {string}
     * @memberof WorkflowDefinitionGet
     */
    'version'?: string | null;
    /**
     * [Read-Only] Description of the workflow or the stage transition.
     * @type {string}
     * @memberof WorkflowDefinitionGet
     */
    'description'?: string | null;
    /**
     * [Read-Only] Returns true if the workflow is available to the site.
     * @type {boolean}
     * @memberof WorkflowDefinitionGet
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {Array<Stage>}
     * @memberof WorkflowDefinitionGet
     */
    'stages'?: Array<Stage> | null;
}
/**
 * 
 * @export
 * @interface WorkflowDefinitionResponseGet
 */
export interface WorkflowDefinitionResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof WorkflowDefinitionResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<WorkflowDefinitionGet>}
     * @memberof WorkflowDefinitionResponseGet
     */
    'data'?: Array<WorkflowDefinitionGet>;
}
/**
 * 
 * @export
 * @interface WorkflowInstanceGet
 */
export interface WorkflowInstanceGet {
    /**
     * [Read-Only] Unique workflow definition identifier.
     * @type {string}
     * @memberof WorkflowInstanceGet
     */
    'workflowUid'?: string | null;
    /**
     * [Read-only] Unique system record identifier.
     * @type {number}
     * @memberof WorkflowInstanceGet
     */
    'systemId'?: number | null;
    /**
     * [Read-Only] The system name.
     * @type {string}
     * @memberof WorkflowInstanceGet
     */
    'systemName'?: string | null;
    /**
     * [Read-Only] Unique workflow instance identifier.
     * @type {number}
     * @memberof WorkflowInstanceGet
     */
    'workflowInstanceId'?: number | null;
    /**
     * [Read-Only] The package name.
     * @type {string}
     * @memberof WorkflowInstanceGet
     */
    'packageName'?: string | null;
    /**
     * [Read-Only] Date the workflow instance or the workflow transition was created.
     * @type {number}
     * @memberof WorkflowInstanceGet
     */
    'createdDate'?: number | null;
    /**
     * [Read-Only] Date the workflow was last acted on.
     * @type {number}
     * @memberof WorkflowInstanceGet
     */
    'lastEditedDate'?: number | null;
    /**
     * [Read-Only] User that last acted on the workflow.
     * @type {string}
     * @memberof WorkflowInstanceGet
     */
    'lastEditedBy'?: string | null;
    /**
     * [Read-Only] The workflow type.
     * @type {string}
     * @memberof WorkflowInstanceGet
     */
    'workflow'?: string | null;
    /**
     * [Read-Only] Version of the workflow definition.
     * @type {number}
     * @memberof WorkflowInstanceGet
     */
    'version'?: number | null;
    /**
     * [Read-Only] Name of the current stage.
     * @type {string}
     * @memberof WorkflowInstanceGet
     */
    'currentStage'?: string | null;
    /**
     * 
     * @type {Array<InstanceTransitions>}
     * @memberof WorkflowInstanceGet
     */
    'transitions'?: Array<InstanceTransitions>;
}
/**
 * 
 * @export
 * @interface WorkflowInstanceResponseGet
 */
export interface WorkflowInstanceResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof WorkflowInstanceResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {WorkflowInstanceGet}
     * @memberof WorkflowInstanceResponseGet
     */
    'data'?: WorkflowInstanceGet;
}
/**
 * 
 * @export
 * @interface WorkflowInstancesResponseGet
 */
export interface WorkflowInstancesResponseGet {
    /**
     * 
     * @type {Response200}
     * @memberof WorkflowInstancesResponseGet
     */
    'meta'?: Response200;
    /**
     * 
     * @type {Array<WorkflowInstanceGet>}
     * @memberof WorkflowInstancesResponseGet
     */
    'data'?: Array<WorkflowInstanceGet>;
    /**
     * 
     * @type {WorkflowInstancesResponseGetPagination}
     * @memberof WorkflowInstancesResponseGet
     */
    'pagination'?: WorkflowInstancesResponseGetPagination;
}
/**
 * 
 * @export
 * @interface WorkflowInstancesResponseGetPagination
 */
export interface WorkflowInstancesResponseGetPagination {
    /**
     * 
     * @type {number}
     * @memberof WorkflowInstancesResponseGetPagination
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowInstancesResponseGetPagination
     */
    'totalPages'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowInstancesResponseGetPagination
     */
    'prevPageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowInstancesResponseGetPagination
     */
    'nextPageUrl'?: string;
}

/**
 * ArtifactsApi - axios parameter creator
 * @export
 */
export const ArtifactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files. 
         * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
         * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
         * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: async (systemId: number, filename: File, isBulk?: boolean, isTemplate?: boolean, type?: string, category?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addArtifactsBySystemId', 'systemId', systemId)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('addArtifactsBySystemId', 'filename', filename)
            const localVarPath = `/api/systems/{systemId}/artifacts`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (isBulk !== undefined) {
                localVarQueryParameter['isBulk'] = isBulk;
            }


            if (isTemplate !== undefined) { 
                localVarFormParams.append('isTemplate', String(isTemplate) as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (category !== undefined) { 
                localVarFormParams.append('category', category as any);
            }
    
            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: async (systemId: number, artifactsRequestDeleteBodyInner: Array<ArtifactsRequestDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteArtifact', 'systemId', systemId)
            // verify required parameter 'artifactsRequestDeleteBodyInner' is not null or undefined
            assertParamExists('deleteArtifact', 'artifactsRequestDeleteBodyInner', artifactsRequestDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/artifacts`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artifactsRequestDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: async (systemId: number, filename?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemArtifacts', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/artifacts`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (controlAcronyms !== undefined) {
                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
            }

            if (assessmentProcedures !== undefined) {
                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
            }

            if (ccis !== undefined) {
                localVarQueryParameter['ccis'] = ccis;
            }

            if (systemOnly !== undefined) {
                localVarQueryParameter['systemOnly'] = systemOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: async (systemId: number, artifactsRequiredFieldsArtifactsOptionalFields: Array<ArtifactsRequiredFields & ArtifactsOptionalFields>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateArtifactBySystemId', 'systemId', systemId)
            // verify required parameter 'artifactsRequiredFieldsArtifactsOptionalFields' is not null or undefined
            assertParamExists('updateArtifactBySystemId', 'artifactsRequiredFieldsArtifactsOptionalFields', artifactsRequiredFieldsArtifactsOptionalFields)
            const localVarPath = `/api/systems/{systemId}/artifacts`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artifactsRequiredFieldsArtifactsOptionalFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtifactsApi - functional programming interface
 * @export
 */
export const ArtifactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtifactsApiAxiosParamCreator(configuration)
    return {
        /**
         * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files. 
         * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
         * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
         * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addArtifactsBySystemId(systemId: number, filename: File, isBulk?: boolean, isTemplate?: boolean, type?: string, category?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactsResponsePutPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addArtifactsBySystemId(systemId, filename, isBulk, isTemplate, type, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtifactsApi.addArtifactsBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArtifact(systemId: number, artifactsRequestDeleteBodyInner: Array<ArtifactsRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactsResponseDel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtifactsApi.deleteArtifact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemArtifacts(systemId: number, filename?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactsResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtifactsApi.getSystemArtifacts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArtifactBySystemId(systemId: number, artifactsRequiredFieldsArtifactsOptionalFields: Array<ArtifactsRequiredFields & ArtifactsOptionalFields>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtifactsResponsePutPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArtifactBySystemId(systemId, artifactsRequiredFieldsArtifactsOptionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtifactsApi.updateArtifactBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArtifactsApi - factory interface
 * @export
 */
export const ArtifactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtifactsApiFp(configuration)
    return {
        /**
         * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files. 
         * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
         * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
         * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId(systemId: number, filename: File, isBulk?: boolean, isTemplate?: boolean, type?: string, category?: string, options?: RawAxiosRequestConfig): AxiosPromise<ArtifactsResponsePutPost> {
            return localVarFp.addArtifactsBySystemId(systemId, filename, isBulk, isTemplate, type, category, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact(systemId: number, artifactsRequestDeleteBodyInner: Array<ArtifactsRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<ArtifactsResponseDel> {
            return localVarFp.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts(systemId: number, filename?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<ArtifactsResponseGet> {
            return localVarFp.getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId(systemId: number, artifactsRequiredFieldsArtifactsOptionalFields: Array<ArtifactsRequiredFields & ArtifactsOptionalFields>, options?: RawAxiosRequestConfig): AxiosPromise<ArtifactsResponsePutPost> {
            return localVarFp.updateArtifactBySystemId(systemId, artifactsRequiredFieldsArtifactsOptionalFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtifactsApi - object-oriented interface
 * @export
 * @class ArtifactsApi
 * @extends {BaseAPI}
 */
export class ArtifactsApi extends BaseAPI {
    /**
     * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
     * @summary Add one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
     * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files. 
     * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
     * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
     * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    public addArtifactsBySystemId(systemId: number, filename: File, isBulk?: boolean, isTemplate?: boolean, type?: string, category?: string, options?: RawAxiosRequestConfig) {
        return ArtifactsApiFp(this.configuration).addArtifactsBySystemId(systemId, filename, isBulk, isTemplate, type, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
     * @summary Remove one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    public deleteArtifact(systemId: number, artifactsRequestDeleteBodyInner: Array<ArtifactsRequestDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return ArtifactsApiFp(this.configuration).deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns selected artifacts matching parameters to include the file name containing the artifacts.
     * @summary Get one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [filename] **File Name**: The file name (to include file-extension).
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    public getSystemArtifacts(systemId: number, filename?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options?: RawAxiosRequestConfig) {
        return ArtifactsApiFp(this.configuration).getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
     * @summary Update one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    public updateArtifactBySystemId(systemId: number, artifactsRequiredFieldsArtifactsOptionalFields: Array<ArtifactsRequiredFields & ArtifactsOptionalFields>, options?: RawAxiosRequestConfig) {
        return ArtifactsApiFp(this.configuration).updateArtifactBySystemId(systemId, artifactsRequiredFieldsArtifactsOptionalFields, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ArtifactsExportApi - axios parameter creator
 * @export
 */
export const ArtifactsExportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: async (systemId: number, filename: string, compress?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemArtifactsExport', 'systemId', systemId)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('getSystemArtifactsExport', 'filename', filename)
            const localVarPath = `/api/systems/{systemId}/artifacts-export`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (compress !== undefined) {
                localVarQueryParameter['compress'] = compress;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtifactsExportApi - functional programming interface
 * @export
 */
export const ArtifactsExportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtifactsExportApiAxiosParamCreator(configuration)
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemArtifactsExport(systemId: number, filename: string, compress?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemArtifactsExport(systemId, filename, compress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtifactsExportApi.getSystemArtifactsExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArtifactsExportApi - factory interface
 * @export
 */
export const ArtifactsExportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtifactsExportApiFp(configuration)
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport(systemId: number, filename: string, compress?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getSystemArtifactsExport(systemId, filename, compress, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtifactsExportApi - object-oriented interface
 * @export
 * @class ArtifactsExportApi
 * @extends {BaseAPI}
 */
export class ArtifactsExportApi extends BaseAPI {
    /**
     * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
     * @summary Get the file of an artifact in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} filename **File Name**: The file name (to include file-extension).
     * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsExportApi
     */
    public getSystemArtifactsExport(systemId: number, filename: string, compress?: boolean, options?: RawAxiosRequestConfig) {
        return ArtifactsExportApiFp(this.configuration).getSystemArtifactsExport(systemId, filename, compress, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CACApi - axios parameter creator
 * @export
 */
export const CACApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: async (systemId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addSystemCac', 'systemId', systemId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addSystemCac', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/approval/cac`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: async (systemId: number, controlAcronyms?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemCac', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/approval/cac`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (controlAcronyms !== undefined) {
                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CACApi - functional programming interface
 * @export
 */
export const CACApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CACApiAxiosParamCreator(configuration)
    return {
        /**
         * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSystemCac(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CacResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSystemCac(systemId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CACApi.addSystemCac']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemCac(systemId: number, controlAcronyms?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CacResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemCac(systemId, controlAcronyms, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CACApi.getSystemCac']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CACApi - factory interface
 * @export
 */
export const CACApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CACApiFp(configuration)
    return {
        /**
         * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<CacResponsePost> {
            return localVarFp.addSystemCac(systemId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac(systemId: number, controlAcronyms?: string, options?: RawAxiosRequestConfig): AxiosPromise<CacResponseGet> {
            return localVarFp.getSystemCac(systemId, controlAcronyms, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CACApi - object-oriented interface
 * @export
 * @class CACApi
 * @extends {BaseAPI}
 */
export class CACApi extends BaseAPI {
    /**
     * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
     * @summary Submit control to second role of CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    public addSystemCac(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return CACApiFp(this.configuration).addSystemCac(systemId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
     * @summary Get location of one or many controls in CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    public getSystemCac(systemId: number, controlAcronyms?: string, options?: RawAxiosRequestConfig) {
        return CACApiFp(this.configuration).getSystemCac(systemId, controlAcronyms, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CMMCAssessmentDashboardsApi - axios parameter creator
 * @export
 */
export const CMMCAssessmentDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get CMMC assessment requirement objectives details dashboard information.
         * @summary CMMC Assessment Requirement Objectives Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementObjectivesDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getCmmcAssessmentRequirementObjectivesDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/cmmc-assessment-requirement-objectives-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CMMC assessment requirements compliance summary dashboard information.
         * @summary CMMC Assessment Requirements Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementsComplianceSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getCmmcAssessmentRequirementsComplianceSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/cmmc-assessment-requirements-compliance-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CMMC assessment security requirements details dashboard information.
         * @summary CMMC Assessment Security Requirements Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentSecurityRequirementsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getCmmcAssessmentSecurityRequirementsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/cmmc-assessment-security-requirements-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CMMC assessment status summary dashboard information.
         * @summary CMMC Assessment Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentStatusSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getCmmcAssessmentStatusSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/cmmc-assessment-status-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CMMCAssessmentDashboardsApi - functional programming interface
 * @export
 */
export const CMMCAssessmentDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CMMCAssessmentDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get CMMC assessment requirement objectives details dashboard information.
         * @summary CMMC Assessment Requirement Objectives Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmmcAssessmentRequirementObjectivesDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmmcAssessmentRequirementObjectivesDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentRequirementObjectivesDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CMMC assessment requirements compliance summary dashboard information.
         * @summary CMMC Assessment Requirements Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmmcAssessmentRequirementsComplianceSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmmcAssessmentRequirementsComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentRequirementsComplianceSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CMMC assessment security requirements details dashboard information.
         * @summary CMMC Assessment Security Requirements Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmmcAssessmentSecurityRequirementsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmmcAssessmentSecurityRequirementsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentSecurityRequirementsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CMMC assessment status summary dashboard information.
         * @summary CMMC Assessment Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmmcAssessmentStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmmcAssessmentStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentStatusSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CMMCAssessmentDashboardsApi - factory interface
 * @export
 */
export const CMMCAssessmentDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CMMCAssessmentDashboardsApiFp(configuration)
    return {
        /**
         * Get CMMC assessment requirement objectives details dashboard information.
         * @summary CMMC Assessment Requirement Objectives Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementObjectivesDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getCmmcAssessmentRequirementObjectivesDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CMMC assessment requirements compliance summary dashboard information.
         * @summary CMMC Assessment Requirements Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementsComplianceSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getCmmcAssessmentRequirementsComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CMMC assessment security requirements details dashboard information.
         * @summary CMMC Assessment Security Requirements Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentSecurityRequirementsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getCmmcAssessmentSecurityRequirementsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CMMC assessment status summary dashboard information.
         * @summary CMMC Assessment Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getCmmcAssessmentStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CMMCAssessmentDashboardsApi - object-oriented interface
 * @export
 * @class CMMCAssessmentDashboardsApi
 * @extends {BaseAPI}
 */
export class CMMCAssessmentDashboardsApi extends BaseAPI {
    /**
     * Get CMMC assessment requirement objectives details dashboard information.
     * @summary CMMC Assessment Requirement Objectives Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    public getCmmcAssessmentRequirementObjectivesDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CMMCAssessmentDashboardsApiFp(this.configuration).getCmmcAssessmentRequirementObjectivesDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CMMC assessment requirements compliance summary dashboard information.
     * @summary CMMC Assessment Requirements Compliance Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    public getCmmcAssessmentRequirementsComplianceSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CMMCAssessmentDashboardsApiFp(this.configuration).getCmmcAssessmentRequirementsComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CMMC assessment security requirements details dashboard information.
     * @summary CMMC Assessment Security Requirements Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    public getCmmcAssessmentSecurityRequirementsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CMMCAssessmentDashboardsApiFp(this.configuration).getCmmcAssessmentSecurityRequirementsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CMMC assessment status summary dashboard information.
     * @summary CMMC Assessment Status Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    public getCmmcAssessmentStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CMMCAssessmentDashboardsApiFp(this.configuration).getCmmcAssessmentStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CMMCAssessmentsApi - axios parameter creator
 * @export
 */
export const CMMCAssessmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: async (sinceDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sinceDate' is not null or undefined
            assertParamExists('getCmmcAssessments', 'sinceDate', sinceDate)
            const localVarPath = `/api/cmmc-assessments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (sinceDate !== undefined) {
                localVarQueryParameter['sinceDate'] = sinceDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CMMCAssessmentsApi - functional programming interface
 * @export
 */
export const CMMCAssessmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CMMCAssessmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmmcAssessments(sinceDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmmcResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmmcAssessments(sinceDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CMMCAssessmentsApi.getCmmcAssessments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CMMCAssessmentsApi - factory interface
 * @export
 */
export const CMMCAssessmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CMMCAssessmentsApiFp(configuration)
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments(sinceDate: string, options?: RawAxiosRequestConfig): AxiosPromise<CmmcResponseGet> {
            return localVarFp.getCmmcAssessments(sinceDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CMMCAssessmentsApi - object-oriented interface
 * @export
 * @class CMMCAssessmentsApi
 * @extends {BaseAPI}
 */
export class CMMCAssessmentsApi extends BaseAPI {
    /**
     * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
     * @summary Get CMMC assessment information
     * @param {string} sinceDate **Date** CMMC date (Unix date format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentsApi
     */
    public getCmmcAssessments(sinceDate: string, options?: RawAxiosRequestConfig) {
        return CMMCAssessmentsApiFp(this.configuration).getCmmcAssessments(sinceDate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CloudResourceResultsApi - axios parameter creator
 * @export
 */
export const CloudResourceResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: async (systemId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addCloudResourcesBySystemId', 'systemId', systemId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addCloudResourcesBySystemId', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/cloud-resource-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: async (systemId: number, cloudResourcesDeleteBodyInner: Array<CloudResourcesDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteCloudResources', 'systemId', systemId)
            // verify required parameter 'cloudResourcesDeleteBodyInner' is not null or undefined
            assertParamExists('deleteCloudResources', 'cloudResourcesDeleteBodyInner', cloudResourcesDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/cloud-resource-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudResourcesDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudResourceResultsApi - functional programming interface
 * @export
 */
export const CloudResourceResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudResourceResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCloudResourcesBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourcesResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCloudResourcesBySystemId(systemId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudResourceResultsApi.addCloudResourcesBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCloudResources(systemId: number, cloudResourcesDeleteBodyInner: Array<CloudResourcesDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourcesDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudResourceResultsApi.deleteCloudResources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloudResourceResultsApi - factory interface
 * @export
 */
export const CloudResourceResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudResourceResultsApiFp(configuration)
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<CloudResourcesResponsePost> {
            return localVarFp.addCloudResourcesBySystemId(systemId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources(systemId: number, cloudResourcesDeleteBodyInner: Array<CloudResourcesDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<CloudResourcesDelete> {
            return localVarFp.deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudResourceResultsApi - object-oriented interface
 * @export
 * @class CloudResourceResultsApi
 * @extends {BaseAPI}
 */
export class CloudResourceResultsApi extends BaseAPI {
    /**
     * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
     * @summary Add one or many cloud resources and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourceResultsApi
     */
    public addCloudResourcesBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return CloudResourceResultsApiFp(this.configuration).addCloudResourcesBySystemId(systemId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes cloud resources and their scan results in the assets module for a system `systemId`
     * @summary Remove one or many cloud resources in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourceResultsApi
     */
    public deleteCloudResources(systemId: number, cloudResourcesDeleteBodyInner: Array<CloudResourcesDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return CloudResourceResultsApiFp(this.configuration).deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoastGuardSystemFISMAMetricsDashboardApi - axios parameter creator
 * @export
 */
export const CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Coast Guard system FISMA metrics dashboard information.
         * @summary Coast Guard System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoastGuardSystemFismaMetrics: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getCoastGuardSystemFismaMetrics', 'orgId', orgId)
            const localVarPath = `/api/dashboards/coastguard-system-fisma-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoastGuardSystemFISMAMetricsDashboardApi - functional programming interface
 * @export
 */
export const CoastGuardSystemFISMAMetricsDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Coast Guard system FISMA metrics dashboard information.
         * @summary Coast Guard System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoastGuardSystemFismaMetrics(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoastGuardSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoastGuardSystemFISMAMetricsDashboardApi.getCoastGuardSystemFismaMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoastGuardSystemFISMAMetricsDashboardApi - factory interface
 * @export
 */
export const CoastGuardSystemFISMAMetricsDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoastGuardSystemFISMAMetricsDashboardApiFp(configuration)
    return {
        /**
         * Get Coast Guard system FISMA metrics dashboard information.
         * @summary Coast Guard System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoastGuardSystemFismaMetrics(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getCoastGuardSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoastGuardSystemFISMAMetricsDashboardApi - object-oriented interface
 * @export
 * @class CoastGuardSystemFISMAMetricsDashboardApi
 * @extends {BaseAPI}
 */
export class CoastGuardSystemFISMAMetricsDashboardApi extends BaseAPI {
    /**
     * Get Coast Guard system FISMA metrics dashboard information.
     * @summary Coast Guard System FISMA Metrics
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoastGuardSystemFISMAMetricsDashboardApi
     */
    public getCoastGuardSystemFismaMetrics(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CoastGuardSystemFISMAMetricsDashboardApiFp(this.configuration).getCoastGuardSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContainerScanResultsApi - axios parameter creator
 * @export
 */
export const ContainerScanResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: async (systemId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addContainerSansBySystemId', 'systemId', systemId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addContainerSansBySystemId', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/container-scan-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: async (systemId: number, containerResourcesDeleteBodyInner: Array<ContainerResourcesDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteContainerSans', 'systemId', systemId)
            // verify required parameter 'containerResourcesDeleteBodyInner' is not null or undefined
            assertParamExists('deleteContainerSans', 'containerResourcesDeleteBodyInner', containerResourcesDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/container-scan-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(containerResourcesDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContainerScanResultsApi - functional programming interface
 * @export
 */
export const ContainerScanResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContainerScanResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContainerSansBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContainerSansBySystemId(systemId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerScanResultsApi.addContainerSansBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContainerSans(systemId: number, containerResourcesDeleteBodyInner: Array<ContainerResourcesDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersResponseDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerScanResultsApi.deleteContainerSans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContainerScanResultsApi - factory interface
 * @export
 */
export const ContainerScanResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContainerScanResultsApiFp(configuration)
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<ContainersResponsePost> {
            return localVarFp.addContainerSansBySystemId(systemId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans(systemId: number, containerResourcesDeleteBodyInner: Array<ContainerResourcesDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<ContainersResponseDelete> {
            return localVarFp.deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContainerScanResultsApi - object-oriented interface
 * @export
 * @class ContainerScanResultsApi
 * @extends {BaseAPI}
 */
export class ContainerScanResultsApi extends BaseAPI {
    /**
     * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
     * @summary Add one or many containers and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding containers and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerScanResultsApi
     */
    public addContainerSansBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return ContainerScanResultsApiFp(this.configuration).addContainerSansBySystemId(systemId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes container scan resources and their scan results in the assets module for a system `systemId`
     * @summary Remove one or many containers in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerScanResultsApi
     */
    public deleteContainerSans(systemId: number, containerResourcesDeleteBodyInner: Array<ContainerResourcesDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return ContainerScanResultsApiFp(this.configuration).deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ControlsApi - axios parameter creator
 * @export
 */
export const ControlsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: async (systemId: number, acronyms?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemControls', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/controls`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (acronyms !== undefined) {
                localVarQueryParameter['acronyms'] = acronyms;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: async (systemId: number, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields: Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateControlBySystemId', 'systemId', systemId)
            // verify required parameter 'controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields' is not null or undefined
            assertParamExists('updateControlBySystemId', 'controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields', controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields)
            const localVarPath = `/api/systems/{systemId}/controls`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControlsApi - functional programming interface
 * @export
 */
export const ControlsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ControlsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemControls(systemId: number, acronyms?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlsResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemControls(systemId, acronyms, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.getSystemControls']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateControlBySystemId(systemId: number, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields: Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlsResponsePut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateControlBySystemId(systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.updateControlBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ControlsApi - factory interface
 * @export
 */
export const ControlsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ControlsApiFp(configuration)
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls(systemId: number, acronyms?: string, options?: RawAxiosRequestConfig): AxiosPromise<ControlsResponseGet> {
            return localVarFp.getSystemControls(systemId, acronyms, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId(systemId: number, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields: Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>, options?: RawAxiosRequestConfig): AxiosPromise<ControlsResponsePut> {
            return localVarFp.updateControlBySystemId(systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ControlsApi - object-oriented interface
 * @export
 * @class ControlsApi
 * @extends {BaseAPI}
 */
export class ControlsApi extends BaseAPI {
    /**
     * Returns system control information for matching `systemId` path parameter
     * @summary Get control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public getSystemControls(systemId: number, acronyms?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).getSystemControls(systemId, acronyms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
     * @summary Update control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public updateControlBySystemId(systemId: number, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields: Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).updateControlBySystemId(systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeviceScanResultsApi - axios parameter creator
 * @export
 */
export const DeviceScanResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
         * @summary Add device scans in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
         * @param {File} filename The file to upload. Can be a single file or a .zip file.
         * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScanResultsBySystemId: async (systemId: number, scanType: AddScanResultsBySystemIdScanTypeEnum, filename: File, isBaseline?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addScanResultsBySystemId', 'systemId', systemId)
            // verify required parameter 'scanType' is not null or undefined
            assertParamExists('addScanResultsBySystemId', 'scanType', scanType)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('addScanResultsBySystemId', 'filename', filename)
            const localVarPath = `/api/systems/{systemId}/device-scan-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (scanType !== undefined) {
                localVarQueryParameter['scanType'] = scanType;
            }

            if (isBaseline !== undefined) {
                localVarQueryParameter['isBaseline'] = isBaseline;
            }


            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceScanResultsApi - functional programming interface
 * @export
 */
export const DeviceScanResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceScanResultsApiAxiosParamCreator(configuration)
    return {
        /**
         *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
         * @summary Add device scans in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
         * @param {File} filename The file to upload. Can be a single file or a .zip file.
         * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addScanResultsBySystemId(systemId: number, scanType: AddScanResultsBySystemIdScanTypeEnum, filename: File, isBaseline?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceScanResultsResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addScanResultsBySystemId(systemId, scanType, filename, isBaseline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceScanResultsApi.addScanResultsBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeviceScanResultsApi - factory interface
 * @export
 */
export const DeviceScanResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceScanResultsApiFp(configuration)
    return {
        /**
         *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
         * @summary Add device scans in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
         * @param {File} filename The file to upload. Can be a single file or a .zip file.
         * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScanResultsBySystemId(systemId: number, scanType: AddScanResultsBySystemIdScanTypeEnum, filename: File, isBaseline?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<DeviceScanResultsResponsePost> {
            return localVarFp.addScanResultsBySystemId(systemId, scanType, filename, isBaseline, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceScanResultsApi - object-oriented interface
 * @export
 * @class DeviceScanResultsApi
 * @extends {BaseAPI}
 */
export class DeviceScanResultsApi extends BaseAPI {
    /**
     *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
     * @summary Add device scans in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
     * @param {File} filename The file to upload. Can be a single file or a .zip file.
     * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceScanResultsApi
     */
    public addScanResultsBySystemId(systemId: number, scanType: AddScanResultsBySystemIdScanTypeEnum, filename: File, isBaseline?: boolean, options?: RawAxiosRequestConfig) {
        return DeviceScanResultsApiFp(this.configuration).addScanResultsBySystemId(systemId, scanType, filename, isBaseline, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AddScanResultsBySystemIdScanTypeEnum = {
    AcasAsrArf: 'acasAsrArf',
    AcasNessus: 'acasNessus',
    DisaStigViewerCklCklb: 'disaStigViewerCklCklb',
    DisaStigViewerCmrs: 'disaStigViewerCmrs',
    PolicyAuditor: 'policyAuditor',
    ScapComplianceChecker: 'scapComplianceChecker',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type AddScanResultsBySystemIdScanTypeEnum = typeof AddScanResultsBySystemIdScanTypeEnum[keyof typeof AddScanResultsBySystemIdScanTypeEnum];


/**
 * HardwareBaselineApi - axios parameter creator
 * @export
 */
export const HardwareBaselineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
         * @summary Add one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHwBaselineAssets: async (systemId: number, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields: Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addHwBaselineAssets', 'systemId', systemId)
            // verify required parameter 'hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields' is not null or undefined
            assertParamExists('addHwBaselineAssets', 'hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields', hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields)
            const localVarPath = `/api/systems/{systemId}/hw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove (delete) one or multiple assets from a system Hardware Baseline
         * @summary Delete one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHwBaselineAssets: async (systemId: number, hwBaselineRequestDeleteBodyInner: Array<HwBaselineRequestDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteHwBaselineAssets', 'systemId', systemId)
            // verify required parameter 'hwBaselineRequestDeleteBodyInner' is not null or undefined
            assertParamExists('deleteHwBaselineAssets', 'hwBaselineRequestDeleteBodyInner', hwBaselineRequestDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/hw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hwBaselineRequestDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the hardware baseline for a system matching the `systemId` path parameter
         * @summary Get hardware baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHwBaseline: async (systemId: number, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemHwBaseline', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/hw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
         * @summary Update one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHwBaselineAssets: async (systemId: number, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields: Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateHwBaselineAssets', 'systemId', systemId)
            // verify required parameter 'hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields' is not null or undefined
            assertParamExists('updateHwBaselineAssets', 'hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields', hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields)
            const localVarPath = `/api/systems/{systemId}/hw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HardwareBaselineApi - functional programming interface
 * @export
 */
export const HardwareBaselineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HardwareBaselineApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
         * @summary Add one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addHwBaselineAssets(systemId: number, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields: Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HwBaselineResponsePostPut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addHwBaselineAssets(systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HardwareBaselineApi.addHwBaselineAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove (delete) one or multiple assets from a system Hardware Baseline
         * @summary Delete one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHwBaselineAssets(systemId: number, hwBaselineRequestDeleteBodyInner: Array<HwBaselineRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HwBaselineResponseDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHwBaselineAssets(systemId, hwBaselineRequestDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HardwareBaselineApi.deleteHwBaselineAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the hardware baseline for a system matching the `systemId` path parameter
         * @summary Get hardware baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemHwBaseline(systemId: number, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HwBaselineResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemHwBaseline(systemId, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HardwareBaselineApi.getSystemHwBaseline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
         * @summary Update one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHwBaselineAssets(systemId: number, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields: Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HwBaselineResponsePostPut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHwBaselineAssets(systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HardwareBaselineApi.updateHwBaselineAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HardwareBaselineApi - factory interface
 * @export
 */
export const HardwareBaselineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HardwareBaselineApiFp(configuration)
    return {
        /**
         * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
         * @summary Add one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHwBaselineAssets(systemId: number, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields: Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>, options?: RawAxiosRequestConfig): AxiosPromise<HwBaselineResponsePostPut> {
            return localVarFp.addHwBaselineAssets(systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove (delete) one or multiple assets from a system Hardware Baseline
         * @summary Delete one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHwBaselineAssets(systemId: number, hwBaselineRequestDeleteBodyInner: Array<HwBaselineRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<HwBaselineResponseDelete> {
            return localVarFp.deleteHwBaselineAssets(systemId, hwBaselineRequestDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the hardware baseline for a system matching the `systemId` path parameter
         * @summary Get hardware baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHwBaseline(systemId: number, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<HwBaselineResponseGet> {
            return localVarFp.getSystemHwBaseline(systemId, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
         * @summary Update one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHwBaselineAssets(systemId: number, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields: Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>, options?: RawAxiosRequestConfig): AxiosPromise<HwBaselineResponsePostPut> {
            return localVarFp.updateHwBaselineAssets(systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HardwareBaselineApi - object-oriented interface
 * @export
 * @class HardwareBaselineApi
 * @extends {BaseAPI}
 */
export class HardwareBaselineApi extends BaseAPI {
    /**
     * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
     * @summary Add one or many hardware assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    public addHwBaselineAssets(systemId: number, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields: Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>, options?: RawAxiosRequestConfig) {
        return HardwareBaselineApiFp(this.configuration).addHwBaselineAssets(systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove (delete) one or multiple assets from a system Hardware Baseline
     * @summary Delete one or many hardware assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    public deleteHwBaselineAssets(systemId: number, hwBaselineRequestDeleteBodyInner: Array<HwBaselineRequestDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return HardwareBaselineApiFp(this.configuration).deleteHwBaselineAssets(systemId, hwBaselineRequestDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the hardware baseline for a system matching the `systemId` path parameter
     * @summary Get hardware baseline for a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    public getSystemHwBaseline(systemId: number, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return HardwareBaselineApiFp(this.configuration).getSystemHwBaseline(systemId, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
     * @summary Update one or many hardware assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    public updateHwBaselineAssets(systemId: number, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields: Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>, options?: RawAxiosRequestConfig) {
        return HardwareBaselineApiFp(this.configuration).updateHwBaselineAssets(systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MilestonesApi - axios parameter creator
 * @export
 */
export const MilestonesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: async (systemId: number, poamId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addMilestoneBySystemIdAndPoamId', 'systemId', systemId)
            // verify required parameter 'poamId' is not null or undefined
            assertParamExists('addMilestoneBySystemIdAndPoamId', 'poamId', poamId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addMilestoneBySystemIdAndPoamId', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/poams/{poamId}/milestones`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"poamId"}}`, encodeURIComponent(String(poamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: async (systemId: number, poamId: number, milestonesRequestDeleteBodyInner: Array<MilestonesRequestDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteMilestone', 'systemId', systemId)
            // verify required parameter 'poamId' is not null or undefined
            assertParamExists('deleteMilestone', 'poamId', poamId)
            // verify required parameter 'milestonesRequestDeleteBodyInner' is not null or undefined
            assertParamExists('deleteMilestone', 'milestonesRequestDeleteBodyInner', milestonesRequestDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/poams/{poamId}/milestones`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"poamId"}}`, encodeURIComponent(String(poamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(milestonesRequestDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: async (systemId: number, poamId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemMilestonesByPoamId', 'systemId', systemId)
            // verify required parameter 'poamId' is not null or undefined
            assertParamExists('getSystemMilestonesByPoamId', 'poamId', poamId)
            const localVarPath = `/api/systems/{systemId}/poams/{poamId}/milestones`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"poamId"}}`, encodeURIComponent(String(poamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (scheduledCompletionDateStart !== undefined) {
                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
            }

            if (scheduledCompletionDateEnd !== undefined) {
                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: async (systemId: number, poamId: number, milestoneId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'systemId', systemId)
            // verify required parameter 'poamId' is not null or undefined
            assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'poamId', poamId)
            // verify required parameter 'milestoneId' is not null or undefined
            assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'milestoneId', milestoneId)
            const localVarPath = `/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"poamId"}}`, encodeURIComponent(String(poamId)))
                .replace(`{${"milestoneId"}}`, encodeURIComponent(String(milestoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: async (systemId: number, poamId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateMilestoneBySystemIdAndPoamId', 'systemId', systemId)
            // verify required parameter 'poamId' is not null or undefined
            assertParamExists('updateMilestoneBySystemIdAndPoamId', 'poamId', poamId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('updateMilestoneBySystemIdAndPoamId', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/poams/{poamId}/milestones`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"poamId"}}`, encodeURIComponent(String(poamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MilestonesApi - functional programming interface
 * @export
 */
export const MilestonesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MilestonesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMilestoneBySystemIdAndPoamId(systemId: number, poamId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MilestonesApi.addMilestoneBySystemIdAndPoamId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMilestone(systemId: number, poamId: number, milestonesRequestDeleteBodyInner: Array<MilestonesRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneResponseDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MilestonesApi.deleteMilestone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemMilestonesByPoamId(systemId: number, poamId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MilestonesApi.getSystemMilestonesByPoamId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemMilestonesByPoamIdAndMilestoneId(systemId: number, poamId: number, milestoneId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneResponseGetMilestone>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MilestonesApi.getSystemMilestonesByPoamIdAndMilestoneId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMilestoneBySystemIdAndPoamId(systemId: number, poamId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneResponsePut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MilestonesApi.updateMilestoneBySystemIdAndPoamId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MilestonesApi - factory interface
 * @export
 */
export const MilestonesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MilestonesApiFp(configuration)
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId(systemId: number, poamId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<MilestoneResponsePost> {
            return localVarFp.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone(systemId: number, poamId: number, milestonesRequestDeleteBodyInner: Array<MilestonesRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<MilestoneResponseDelete> {
            return localVarFp.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId(systemId: number, poamId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, options?: RawAxiosRequestConfig): AxiosPromise<MilestoneResponseGet> {
            return localVarFp.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId(systemId: number, poamId: number, milestoneId: number, options?: RawAxiosRequestConfig): AxiosPromise<MilestoneResponseGetMilestone> {
            return localVarFp.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId(systemId: number, poamId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<MilestoneResponsePut> {
            return localVarFp.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MilestonesApi - object-oriented interface
 * @export
 * @class MilestonesApi
 * @extends {BaseAPI}
 */
export class MilestonesApi extends BaseAPI {
    /**
     * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
     * @summary Add milestones to one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public addMilestoneBySystemIdAndPoamId(systemId: number, poamId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
     * @summary Remove milestones in a system for one or many POA&M items
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public deleteMilestone(systemId: number, poamId: number, milestonesRequestDeleteBodyInner: Array<MilestonesRequestDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns system containing milestones for matching parameters.
     * @summary Get milestones in one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public getSystemMilestonesByPoamId(systemId: number, poamId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, options?: RawAxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns systems containing milestones for matching parameters.
     * @summary Get milestone by ID in POA&M item in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public getSystemMilestonesByPoamIdAndMilestoneId(systemId: number, poamId: number, milestoneId: number, options?: RawAxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public updateMilestoneBySystemIdAndPoamId(systemId: number, poamId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationMigrationStatusDashboardApi - axios parameter creator
 * @export
 */
export const OrganizationMigrationStatusDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get organization migration status summary dashboard information.
         * @summary Organization Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMigrationStatusSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getOrganizationMigrationStatusSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/organization-migration-status-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationMigrationStatusDashboardApi - functional programming interface
 * @export
 */
export const OrganizationMigrationStatusDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationMigrationStatusDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get organization migration status summary dashboard information.
         * @summary Organization Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMigrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationMigrationStatusDashboardApi.getOrganizationMigrationStatusSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationMigrationStatusDashboardApi - factory interface
 * @export
 */
export const OrganizationMigrationStatusDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationMigrationStatusDashboardApiFp(configuration)
    return {
        /**
         * Get organization migration status summary dashboard information.
         * @summary Organization Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMigrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getOrganizationMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationMigrationStatusDashboardApi - object-oriented interface
 * @export
 * @class OrganizationMigrationStatusDashboardApi
 * @extends {BaseAPI}
 */
export class OrganizationMigrationStatusDashboardApi extends BaseAPI {
    /**
     * Get organization migration status summary dashboard information.
     * @summary Organization Migration Status Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationMigrationStatusDashboardApi
     */
    public getOrganizationMigrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return OrganizationMigrationStatusDashboardApiFp(this.configuration).getOrganizationMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PACApi - axios parameter creator
 * @export
 */
export const PACApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: async (systemId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addSystemPac', 'systemId', systemId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addSystemPac', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/approval/pac`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: async (systemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemPac', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/approval/pac`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PACApi - functional programming interface
 * @export
 */
export const PACApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PACApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSystemPac(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PacResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSystemPac(systemId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PACApi.addSystemPac']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPac(systemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PacResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPac(systemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PACApi.getSystemPac']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PACApi - factory interface
 * @export
 */
export const PACApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PACApiFp(configuration)
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<PacResponsePost> {
            return localVarFp.addSystemPac(systemId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac(systemId: number, options?: RawAxiosRequestConfig): AxiosPromise<PacResponseGet> {
            return localVarFp.getSystemPac(systemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PACApi - object-oriented interface
 * @export
 * @class PACApi
 * @extends {BaseAPI}
 */
export class PACApi extends BaseAPI {
    /**
     * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
     * @summary Initiate system workflow for review
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    public addSystemPac(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return PACApiFp(this.configuration).addSystemPac(systemId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
     * @summary Get status of active workflows in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    public getSystemPac(systemId: number, options?: RawAxiosRequestConfig) {
        return PACApiFp(this.configuration).getSystemPac(systemId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * POAMApi - axios parameter creator
 * @export
 */
export const POAMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: async (systemId: number, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost: Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addPoamBySystemId', 'systemId', systemId)
            // verify required parameter 'poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost' is not null or undefined
            assertParamExists('addPoamBySystemId', 'poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost', poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost)
            const localVarPath = `/api/systems/{systemId}/poams`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: async (systemId: number, poamRequestDeleteBodyInner: Array<PoamRequestDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deletePoam', 'systemId', systemId)
            // verify required parameter 'poamRequestDeleteBodyInner' is not null or undefined
            assertParamExists('deletePoam', 'poamRequestDeleteBodyInner', poamRequestDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/poams`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(poamRequestDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: async (systemId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemPoams', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/poams`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (scheduledCompletionDateStart !== undefined) {
                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
            }

            if (scheduledCompletionDateEnd !== undefined) {
                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
            }

            if (controlAcronyms !== undefined) {
                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
            }

            if (assessmentProcedures !== undefined) {
                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
            }

            if (ccis !== undefined) {
                localVarQueryParameter['ccis'] = ccis;
            }

            if (systemOnly !== undefined) {
                localVarQueryParameter['systemOnly'] = systemOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: async (systemId: number, poamId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemPoamsByPoamId', 'systemId', systemId)
            // verify required parameter 'poamId' is not null or undefined
            assertParamExists('getSystemPoamsByPoamId', 'poamId', poamId)
            const localVarPath = `/api/systems/{systemId}/poams/{poamId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"poamId"}}`, encodeURIComponent(String(poamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: async (systemId: number, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut: Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updatePoamBySystemId', 'systemId', systemId)
            // verify required parameter 'poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut' is not null or undefined
            assertParamExists('updatePoamBySystemId', 'poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut', poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut)
            const localVarPath = `/api/systems/{systemId}/poams`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * POAMApi - functional programming interface
 * @export
 */
export const POAMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = POAMApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPoamBySystemId(systemId: number, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost: Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoamResponsePostPutDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPoamBySystemId(systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POAMApi.addPoamBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePoam(systemId: number, poamRequestDeleteBodyInner: Array<PoamRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoamResponsePostPutDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePoam(systemId, poamRequestDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POAMApi.deletePoam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPoams(systemId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoamResponseGetSystems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POAMApi.getSystemPoams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPoamsByPoamId(systemId: number, poamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoamResponseGetPoams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPoamsByPoamId(systemId, poamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POAMApi.getSystemPoamsByPoamId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePoamBySystemId(systemId: number, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut: Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoamResponsePostPutDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePoamBySystemId(systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POAMApi.updatePoamBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * POAMApi - factory interface
 * @export
 */
export const POAMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = POAMApiFp(configuration)
    return {
        /**
         * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId(systemId: number, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost: Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>, options?: RawAxiosRequestConfig): AxiosPromise<PoamResponsePostPutDelete> {
            return localVarFp.addPoamBySystemId(systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam(systemId: number, poamRequestDeleteBodyInner: Array<PoamRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<PoamResponsePostPutDelete> {
            return localVarFp.deletePoam(systemId, poamRequestDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams(systemId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<PoamResponseGetSystems> {
            return localVarFp.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId(systemId: number, poamId: number, options?: RawAxiosRequestConfig): AxiosPromise<PoamResponseGetPoams> {
            return localVarFp.getSystemPoamsByPoamId(systemId, poamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId(systemId: number, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut: Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>, options?: RawAxiosRequestConfig): AxiosPromise<PoamResponsePostPutDelete> {
            return localVarFp.updatePoamBySystemId(systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * POAMApi - object-oriented interface
 * @export
 * @class POAMApi
 * @extends {BaseAPI}
 */
export class POAMApi extends BaseAPI {
    /**
     * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
     * @summary Add one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    public addPoamBySystemId(systemId: number, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost: Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>, options?: RawAxiosRequestConfig) {
        return POAMApiFp(this.configuration).addPoamBySystemId(systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
     * @summary Remove one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    public deletePoam(systemId: number, poamRequestDeleteBodyInner: Array<PoamRequestDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return POAMApiFp(this.configuration).deletePoam(systemId, poamRequestDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    public getSystemPoams(systemId: number, scheduledCompletionDateStart?: string, scheduledCompletionDateEnd?: string, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, systemOnly?: boolean, options?: RawAxiosRequestConfig) {
        return POAMApiFp(this.configuration).getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get POA&M item by ID in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    public getSystemPoamsByPoamId(systemId: number, poamId: number, options?: RawAxiosRequestConfig) {
        return POAMApiFp(this.configuration).getSystemPoamsByPoamId(systemId, poamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    public updatePoamBySystemId(systemId: number, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut: Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>, options?: RawAxiosRequestConfig) {
        return POAMApiFp(this.configuration).updatePoamBySystemId(systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RegistrationApi - axios parameter creator
 * @export
 */
export const RegistrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationApi - functional programming interface
 * @export
 */
export const RegistrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Register>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistrationApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RegistrationApi - factory interface
 * @export
 */
export const RegistrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationApiFp(configuration)
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(options?: RawAxiosRequestConfig): AxiosPromise<Register> {
            return localVarFp.registerUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationApi - object-oriented interface
 * @export
 * @class RegistrationApi
 * @extends {BaseAPI}
 */
export class RegistrationApi extends BaseAPI {
    /**
     * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
     * @summary Register user certificate and obtain an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    public registerUser(options?: RawAxiosRequestConfig) {
        return RegistrationApiFp(this.configuration).registerUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SoftwareBaselineApi - axios parameter creator
 * @export
 */
export const SoftwareBaselineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
         * @summary Add one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSwBaselineAssets: async (systemId: number, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addSwBaselineAssets', 'systemId', systemId)
            // verify required parameter 'swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields' is not null or undefined
            assertParamExists('addSwBaselineAssets', 'swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields', swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields)
            const localVarPath = `/api/systems/{systemId}/sw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove (delete) one or multiple assets from a system Software Baseline
         * @summary Delete one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwBaselineAssets: async (systemId: number, swBaselineRequestDeleteBodyInner: Array<SwBaselineRequestDeleteBodyInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('deleteSwBaselineAssets', 'systemId', systemId)
            // verify required parameter 'swBaselineRequestDeleteBodyInner' is not null or undefined
            assertParamExists('deleteSwBaselineAssets', 'swBaselineRequestDeleteBodyInner', swBaselineRequestDeleteBodyInner)
            const localVarPath = `/api/systems/{systemId}/sw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(swBaselineRequestDeleteBodyInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the software baseline for a system matching the `systemId` path parameter
         * @summary Get software baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSwBaseline: async (systemId: number, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemSwBaseline', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/sw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
         * @summary Update one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSwBaselineAssets: async (systemId: number, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('updateSwBaselineAssets', 'systemId', systemId)
            // verify required parameter 'swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields' is not null or undefined
            assertParamExists('updateSwBaselineAssets', 'swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields', swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields)
            const localVarPath = `/api/systems/{systemId}/sw-baseline`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SoftwareBaselineApi - functional programming interface
 * @export
 */
export const SoftwareBaselineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SoftwareBaselineApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
         * @summary Add one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSwBaselineAssets(systemId: number, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwBaselineResponsePostPut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSwBaselineAssets(systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SoftwareBaselineApi.addSwBaselineAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove (delete) one or multiple assets from a system Software Baseline
         * @summary Delete one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSwBaselineAssets(systemId: number, swBaselineRequestDeleteBodyInner: Array<SwBaselineRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwBaselineResponseDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSwBaselineAssets(systemId, swBaselineRequestDeleteBodyInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SoftwareBaselineApi.deleteSwBaselineAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the software baseline for a system matching the `systemId` path parameter
         * @summary Get software baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSwBaseline(systemId: number, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwBaselineResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSwBaseline(systemId, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SoftwareBaselineApi.getSystemSwBaseline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
         * @summary Update one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSwBaselineAssets(systemId: number, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwBaselineResponsePostPut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSwBaselineAssets(systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SoftwareBaselineApi.updateSwBaselineAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SoftwareBaselineApi - factory interface
 * @export
 */
export const SoftwareBaselineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SoftwareBaselineApiFp(configuration)
    return {
        /**
         * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
         * @summary Add one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSwBaselineAssets(systemId: number, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options?: RawAxiosRequestConfig): AxiosPromise<SwBaselineResponsePostPut> {
            return localVarFp.addSwBaselineAssets(systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove (delete) one or multiple assets from a system Software Baseline
         * @summary Delete one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwBaselineAssets(systemId: number, swBaselineRequestDeleteBodyInner: Array<SwBaselineRequestDeleteBodyInner>, options?: RawAxiosRequestConfig): AxiosPromise<SwBaselineResponseDelete> {
            return localVarFp.deleteSwBaselineAssets(systemId, swBaselineRequestDeleteBodyInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the software baseline for a system matching the `systemId` path parameter
         * @summary Get software baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSwBaseline(systemId: number, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SwBaselineResponseGet> {
            return localVarFp.getSystemSwBaseline(systemId, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
         * @summary Update one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSwBaselineAssets(systemId: number, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options?: RawAxiosRequestConfig): AxiosPromise<SwBaselineResponsePostPut> {
            return localVarFp.updateSwBaselineAssets(systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SoftwareBaselineApi - object-oriented interface
 * @export
 * @class SoftwareBaselineApi
 * @extends {BaseAPI}
 */
export class SoftwareBaselineApi extends BaseAPI {
    /**
     * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
     * @summary Add one or many software assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    public addSwBaselineAssets(systemId: number, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options?: RawAxiosRequestConfig) {
        return SoftwareBaselineApiFp(this.configuration).addSwBaselineAssets(systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove (delete) one or multiple assets from a system Software Baseline
     * @summary Delete one or many software assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    public deleteSwBaselineAssets(systemId: number, swBaselineRequestDeleteBodyInner: Array<SwBaselineRequestDeleteBodyInner>, options?: RawAxiosRequestConfig) {
        return SoftwareBaselineApiFp(this.configuration).deleteSwBaselineAssets(systemId, swBaselineRequestDeleteBodyInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the software baseline for a system matching the `systemId` path parameter
     * @summary Get software baseline for a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    public getSystemSwBaseline(systemId: number, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SoftwareBaselineApiFp(this.configuration).getSystemSwBaseline(systemId, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
     * @summary Update one or many software assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    public updateSwBaselineAssets(systemId: number, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields: Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>, options?: RawAxiosRequestConfig) {
        return SoftwareBaselineApiFp(this.configuration).updateSwBaselineAssets(systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StaticCodeScansApi - axios parameter creator
 * @export
 */
export const StaticCodeScansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: async (systemId: number, staticCodeRequestPostBody: StaticCodeRequestPostBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addStaticCodeScansBySystemId', 'systemId', systemId)
            // verify required parameter 'staticCodeRequestPostBody' is not null or undefined
            assertParamExists('addStaticCodeScansBySystemId', 'staticCodeRequestPostBody', staticCodeRequestPostBody)
            const localVarPath = `/api/systems/{systemId}/static-code-scans`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staticCodeRequestPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaticCodeScansApi - functional programming interface
 * @export
 */
export const StaticCodeScansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaticCodeScansApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStaticCodeScansBySystemId(systemId: number, staticCodeRequestPostBody: StaticCodeRequestPostBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaticCodeResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaticCodeScansApi.addStaticCodeScansBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StaticCodeScansApi - factory interface
 * @export
 */
export const StaticCodeScansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaticCodeScansApiFp(configuration)
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId(systemId: number, staticCodeRequestPostBody: StaticCodeRequestPostBody, options?: RawAxiosRequestConfig): AxiosPromise<StaticCodeResponsePost> {
            return localVarFp.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaticCodeScansApi - object-oriented interface
 * @export
 * @class StaticCodeScansApi
 * @extends {BaseAPI}
 */
export class StaticCodeScansApi extends BaseAPI {
    /**
     * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
     * @summary Upload static code scans or Clear static code scans
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticCodeScansApi
     */
    public addStaticCodeScansBySystemId(systemId: number, staticCodeRequestPostBody: StaticCodeRequestPostBody, options?: RawAxiosRequestConfig) {
        return StaticCodeScansApiFp(this.configuration).addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemATCIATCDashboardApi - axios parameter creator
 * @export
 */
export const SystemATCIATCDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems ATC/IATC details dashboard information.
         * @summary System ATC/IATC Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAtcIatcDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemAtcIatcDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-atc-iatc-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemATCIATCDashboardApi - functional programming interface
 * @export
 */
export const SystemATCIATCDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemATCIATCDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems ATC/IATC details dashboard information.
         * @summary System ATC/IATC Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemAtcIatcDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemAtcIatcDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemATCIATCDashboardApi.getSystemAtcIatcDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemATCIATCDashboardApi - factory interface
 * @export
 */
export const SystemATCIATCDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemATCIATCDashboardApiFp(configuration)
    return {
        /**
         * Get systems ATC/IATC details dashboard information.
         * @summary System ATC/IATC Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAtcIatcDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemAtcIatcDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemATCIATCDashboardApi - object-oriented interface
 * @export
 * @class SystemATCIATCDashboardApi
 * @extends {BaseAPI}
 */
export class SystemATCIATCDashboardApi extends BaseAPI {
    /**
     * Get systems ATC/IATC details dashboard information.
     * @summary System ATC/IATC Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemATCIATCDashboardApi
     */
    public getSystemAtcIatcDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemATCIATCDashboardApiFp(this.configuration).getSystemAtcIatcDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApplicationFindingsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemApplicationFindingsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system application findings details dashboard information.
         * @summary System Application Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemApplicationFindingsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-application-findings-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system application findings summary dashboard information.
         * @summary System Application Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemApplicationFindingsSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-application-findings-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApplicationFindingsDashboardsApi - functional programming interface
 * @export
 */
export const SystemApplicationFindingsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApplicationFindingsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system application findings details dashboard information.
         * @summary System Application Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemApplicationFindingsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemApplicationFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApplicationFindingsDashboardsApi.getSystemApplicationFindingsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system application findings summary dashboard information.
         * @summary System Application Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemApplicationFindingsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemApplicationFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApplicationFindingsDashboardsApi.getSystemApplicationFindingsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApplicationFindingsDashboardsApi - factory interface
 * @export
 */
export const SystemApplicationFindingsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApplicationFindingsDashboardsApiFp(configuration)
    return {
        /**
         * Get system application findings details dashboard information.
         * @summary System Application Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemApplicationFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system application findings summary dashboard information.
         * @summary System Application Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemApplicationFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApplicationFindingsDashboardsApi - object-oriented interface
 * @export
 * @class SystemApplicationFindingsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemApplicationFindingsDashboardsApi extends BaseAPI {
    /**
     * Get system application findings details dashboard information.
     * @summary System Application Findings Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApplicationFindingsDashboardsApi
     */
    public getSystemApplicationFindingsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemApplicationFindingsDashboardsApiFp(this.configuration).getSystemApplicationFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system application findings summary dashboard information.
     * @summary System Application Findings Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApplicationFindingsDashboardsApi
     */
    public getSystemApplicationFindingsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemApplicationFindingsDashboardsApiFp(this.configuration).getSystemApplicationFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemArtifactsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemArtifactsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemArtifactsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-artifacts-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemArtifactsSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-artifacts-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemArtifactsDashboardsApi - functional programming interface
 * @export
 */
export const SystemArtifactsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemArtifactsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemArtifactsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemArtifactsDashboardsApi.getSystemArtifactsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemArtifactsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemArtifactsDashboardsApi.getSystemArtifactsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemArtifactsDashboardsApi - factory interface
 * @export
 */
export const SystemArtifactsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemArtifactsDashboardsApiFp(configuration)
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemArtifactsDashboardsApi - object-oriented interface
 * @export
 * @class SystemArtifactsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemArtifactsDashboardsApi extends BaseAPI {
    /**
     * Get system Artifacts details information.
     * @summary System Artifacts Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemArtifactsDashboardsApi
     */
    public getSystemArtifactsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemArtifactsDashboardsApiFp(this.configuration).getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system Artifacts summary information.
     * @summary System Artifacts Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemArtifactsDashboardsApi
     */
    public getSystemArtifactsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemArtifactsDashboardsApiFp(this.configuration).getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemAssociationsDashboardApi - axios parameter creator
 * @export
 */
export const SystemAssociationsDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemAssociationsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-associations-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemAssociationsDashboardApi - functional programming interface
 * @export
 */
export const SystemAssociationsDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemAssociationsDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemAssociationsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemAssociationsDashboardApi.getSystemAssociationsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemAssociationsDashboardApi - factory interface
 * @export
 */
export const SystemAssociationsDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemAssociationsDashboardApiFp(configuration)
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemAssociationsDashboardApi - object-oriented interface
 * @export
 * @class SystemAssociationsDashboardApi
 * @extends {BaseAPI}
 */
export class SystemAssociationsDashboardApi extends BaseAPI {
    /**
     * Get system associations details dashboard information.
     * @summary System Associations Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemAssociationsDashboardApi
     */
    public getSystemAssociationsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemAssociationsDashboardApiFp(this.configuration).getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemCONMONIntegrationStatusDashboardApi - axios parameter creator
 * @export
 */
export const SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemCommonIntegrationStatusSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-conmon-integration-status-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemCONMONIntegrationStatusDashboardApi - functional programming interface
 * @export
 */
export const SystemCONMONIntegrationStatusDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemCommonIntegrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemCONMONIntegrationStatusDashboardApi.getSystemCommonIntegrationStatusSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemCONMONIntegrationStatusDashboardApi - factory interface
 * @export
 */
export const SystemCONMONIntegrationStatusDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemCONMONIntegrationStatusDashboardApiFp(configuration)
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemCONMONIntegrationStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemCONMONIntegrationStatusDashboardApi
 * @extends {BaseAPI}
 */
export class SystemCONMONIntegrationStatusDashboardApi extends BaseAPI {
    /**
     * Get system CONMON integration status dashboard information.
     * @summary System CONMON Integration Status
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCONMONIntegrationStatusDashboardApi
     */
    public getSystemCommonIntegrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemCONMONIntegrationStatusDashboardApiFp(this.configuration).getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemConnectivityCCSDDashboardsApi - axios parameter creator
 * @export
 */
export const SystemConnectivityCCSDDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems connectivity/CCSD details dashboard information.
         * @summary System Connectivity/CCSD Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemConnectivityCcsdDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-connectivity-ccsd-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems connectivity/CCSD summary dashboard information.
         * @summary System Connectivity/CCSD Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemConnectivityCcsdSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-connectivity-ccsd-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemConnectivityCCSDDashboardsApi - functional programming interface
 * @export
 */
export const SystemConnectivityCCSDDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemConnectivityCCSDDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems connectivity/CCSD details dashboard information.
         * @summary System Connectivity/CCSD Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemConnectivityCcsdDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemConnectivityCcsdDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemConnectivityCCSDDashboardsApi.getSystemConnectivityCcsdDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems connectivity/CCSD summary dashboard information.
         * @summary System Connectivity/CCSD Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemConnectivityCcsdSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemConnectivityCcsdSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemConnectivityCCSDDashboardsApi.getSystemConnectivityCcsdSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemConnectivityCCSDDashboardsApi - factory interface
 * @export
 */
export const SystemConnectivityCCSDDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemConnectivityCCSDDashboardsApiFp(configuration)
    return {
        /**
         * Get systems connectivity/CCSD details dashboard information.
         * @summary System Connectivity/CCSD Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemConnectivityCcsdDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems connectivity/CCSD summary dashboard information.
         * @summary System Connectivity/CCSD Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemConnectivityCcsdSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemConnectivityCCSDDashboardsApi - object-oriented interface
 * @export
 * @class SystemConnectivityCCSDDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemConnectivityCCSDDashboardsApi extends BaseAPI {
    /**
     * Get systems connectivity/CCSD details dashboard information.
     * @summary System Connectivity/CCSD Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemConnectivityCCSDDashboardsApi
     */
    public getSystemConnectivityCcsdDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemConnectivityCCSDDashboardsApiFp(this.configuration).getSystemConnectivityCcsdDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems connectivity/CCSD summary dashboard information.
     * @summary System Connectivity/CCSD Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemConnectivityCCSDDashboardsApi
     */
    public getSystemConnectivityCcsdSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemConnectivityCCSDDashboardsApiFp(this.configuration).getSystemConnectivityCcsdSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemCriticalAssetsDashboardApi - axios parameter creator
 * @export
 */
export const SystemCriticalAssetsDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system critical assets summary dashboard information.
         * @summary System Critical Assets Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCriticalAssetsSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemCriticalAssetsSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-critical-assets-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemCriticalAssetsDashboardApi - functional programming interface
 * @export
 */
export const SystemCriticalAssetsDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemCriticalAssetsDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system critical assets summary dashboard information.
         * @summary System Critical Assets Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemCriticalAssetsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemCriticalAssetsSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemCriticalAssetsDashboardApi.getSystemCriticalAssetsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemCriticalAssetsDashboardApi - factory interface
 * @export
 */
export const SystemCriticalAssetsDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemCriticalAssetsDashboardApiFp(configuration)
    return {
        /**
         * Get system critical assets summary dashboard information.
         * @summary System Critical Assets Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCriticalAssetsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemCriticalAssetsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemCriticalAssetsDashboardApi - object-oriented interface
 * @export
 * @class SystemCriticalAssetsDashboardApi
 * @extends {BaseAPI}
 */
export class SystemCriticalAssetsDashboardApi extends BaseAPI {
    /**
     * Get system critical assets summary dashboard information.
     * @summary System Critical Assets Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCriticalAssetsDashboardApi
     */
    public getSystemCriticalAssetsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemCriticalAssetsDashboardApiFp(this.configuration).getSystemCriticalAssetsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemDeviceFindingsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemDeviceFindingsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemDeviceFindingsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-device-findings-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemDeviceFindingsSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-device-findings-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemDeviceFindingsDashboardsApi - functional programming interface
 * @export
 */
export const SystemDeviceFindingsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemDeviceFindingsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemDeviceFindingsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemDeviceFindingsDashboardsApi.getSystemDeviceFindingsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemDeviceFindingsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemDeviceFindingsDashboardsApi.getSystemDeviceFindingsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemDeviceFindingsDashboardsApi - factory interface
 * @export
 */
export const SystemDeviceFindingsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemDeviceFindingsDashboardsApiFp(configuration)
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemDeviceFindingsDashboardsApi - object-oriented interface
 * @export
 * @class SystemDeviceFindingsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemDeviceFindingsDashboardsApi extends BaseAPI {
    /**
     * Get ssystem device findings details dashboard information.
     * @summary System Device Findings Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemDeviceFindingsDashboardsApi
     */
    public getSystemDeviceFindingsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemDeviceFindingsDashboardsApiFp(this.configuration).getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system device findings summary dashboard information.
     * @summary System Device Findings Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemDeviceFindingsDashboardsApi
     */
    public getSystemDeviceFindingsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemDeviceFindingsDashboardsApiFp(this.configuration).getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemFISMAMetricsDashboardApi - axios parameter creator
 * @export
 */
export const SystemFISMAMetricsDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system FISMA metrics dashboard information.
         * @summary System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemFismaMetrics: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemFismaMetrics', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-fisma-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemFISMAMetricsDashboardApi - functional programming interface
 * @export
 */
export const SystemFISMAMetricsDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemFISMAMetricsDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system FISMA metrics dashboard information.
         * @summary System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemFismaMetrics(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemFISMAMetricsDashboardApi.getSystemFismaMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemFISMAMetricsDashboardApi - factory interface
 * @export
 */
export const SystemFISMAMetricsDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemFISMAMetricsDashboardApiFp(configuration)
    return {
        /**
         * Get system FISMA metrics dashboard information.
         * @summary System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemFismaMetrics(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemFISMAMetricsDashboardApi - object-oriented interface
 * @export
 * @class SystemFISMAMetricsDashboardApi
 * @extends {BaseAPI}
 */
export class SystemFISMAMetricsDashboardApi extends BaseAPI {
    /**
     * Get system FISMA metrics dashboard information.
     * @summary System FISMA Metrics
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFISMAMetricsDashboardApi
     */
    public getSystemFismaMetrics(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemFISMAMetricsDashboardApiFp(this.configuration).getSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemHardwareDashboardsApi - axios parameter creator
 * @export
 */
export const SystemHardwareDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemHardwareDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-hardware-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemHardwareSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-hardware-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemHardwareDashboardsApi - functional programming interface
 * @export
 */
export const SystemHardwareDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemHardwareDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemHardwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemHardwareDashboardsApi.getSystemHardwareDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemHardwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemHardwareDashboardsApi.getSystemHardwareSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemHardwareDashboardsApi - factory interface
 * @export
 */
export const SystemHardwareDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemHardwareDashboardsApiFp(configuration)
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemHardwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemHardwareDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemHardwareDashboardsApi extends BaseAPI {
    /**
     * Get system hardware details dashboard information.
     * @summary System Hardware Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemHardwareDashboardsApi
     */
    public getSystemHardwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemHardwareDashboardsApiFp(this.configuration).getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system hardware summary dashboard information.
     * @summary System Hardware Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemHardwareDashboardsApi
     */
    public getSystemHardwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemHardwareDashboardsApiFp(this.configuration).getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemMigrationStatusDashboardApi - axios parameter creator
 * @export
 */
export const SystemMigrationStatusDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system migration status summary dashboard information.
         * @summary System Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMigrationStatusSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemMigrationStatusSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-migration-status-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemMigrationStatusDashboardApi - functional programming interface
 * @export
 */
export const SystemMigrationStatusDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemMigrationStatusDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system migration status summary dashboard information.
         * @summary System Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemMigrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMigrationStatusDashboardApi.getSystemMigrationStatusSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemMigrationStatusDashboardApi - factory interface
 * @export
 */
export const SystemMigrationStatusDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemMigrationStatusDashboardApiFp(configuration)
    return {
        /**
         * Get system migration status summary dashboard information.
         * @summary System Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMigrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemMigrationStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemMigrationStatusDashboardApi
 * @extends {BaseAPI}
 */
export class SystemMigrationStatusDashboardApi extends BaseAPI {
    /**
     * Get system migration status summary dashboard information.
     * @summary System Migration Status Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMigrationStatusDashboardApi
     */
    public getSystemMigrationStatusSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemMigrationStatusDashboardApiFp(this.configuration).getSystemMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemPOAMDashboardsApi - axios parameter creator
 * @export
 */
export const SystemPOAMDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemPoamDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-poam-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemPoamSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-poam-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemPOAMDashboardsApi - functional programming interface
 * @export
 */
export const SystemPOAMDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemPOAMDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPoamDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemPOAMDashboardsApi.getSystemPoamDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPoamSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemPOAMDashboardsApi.getSystemPoamSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemPOAMDashboardsApi - factory interface
 * @export
 */
export const SystemPOAMDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemPOAMDashboardsApiFp(configuration)
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemPOAMDashboardsApi - object-oriented interface
 * @export
 * @class SystemPOAMDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemPOAMDashboardsApi extends BaseAPI {
    /**
     * Get system POA&Ms details dashboard information.
     * @summary System POA&M Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPOAMDashboardsApi
     */
    public getSystemPoamDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemPOAMDashboardsApiFp(this.configuration).getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems POA&Ms summary dashboard information.
     * @summary System POA&M Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPOAMDashboardsApi
     */
    public getSystemPoamSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemPOAMDashboardsApiFp(this.configuration).getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemPortsProtocolsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemPortsProtocolsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemPortsProtocolsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-ports-protocols-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemPortsProtocolsSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-ports-protocols-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemPortsProtocolsDashboardsApi - functional programming interface
 * @export
 */
export const SystemPortsProtocolsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemPortsProtocolsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPortsProtocolsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemPortsProtocolsDashboardsApi.getSystemPortsProtocolsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPortsProtocolsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemPortsProtocolsDashboardsApi.getSystemPortsProtocolsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemPortsProtocolsDashboardsApi - factory interface
 * @export
 */
export const SystemPortsProtocolsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemPortsProtocolsDashboardsApiFp(configuration)
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemPortsProtocolsDashboardsApi - object-oriented interface
 * @export
 * @class SystemPortsProtocolsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemPortsProtocolsDashboardsApi extends BaseAPI {
    /**
     * Get system ports and protocols details dashboard information.
     * @summary System Ports/Protocols Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPortsProtocolsDashboardsApi
     */
    public getSystemPortsProtocolsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemPortsProtocolsDashboardsApiFp(this.configuration).getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system ports and protocols summary dashboard information.
     * @summary System Ports/Protocols Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPortsProtocolsDashboardsApi
     */
    public getSystemPortsProtocolsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemPortsProtocolsDashboardsApiFp(this.configuration).getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemPrivacyDashboardApi - axios parameter creator
 * @export
 */
export const SystemPrivacyDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemPrivacySummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-privacy-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemPrivacyDashboardApi - functional programming interface
 * @export
 */
export const SystemPrivacyDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemPrivacyDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPrivacySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemPrivacyDashboardApi.getSystemPrivacySummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemPrivacyDashboardApi - factory interface
 * @export
 */
export const SystemPrivacyDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemPrivacyDashboardApiFp(configuration)
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemPrivacyDashboardApi - object-oriented interface
 * @export
 * @class SystemPrivacyDashboardApi
 * @extends {BaseAPI}
 */
export class SystemPrivacyDashboardApi extends BaseAPI {
    /**
     * Get user system privacy summary dashboard information.
     * @summary System Privacy Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPrivacyDashboardApi
     */
    public getSystemPrivacySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemPrivacyDashboardApiFp(this.configuration).getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemQuestionnaireDashboardsApi - axios parameter creator
 * @export
 */
export const SystemQuestionnaireDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems questionnaire details dashboard information.
         * @summary System Questionnaire Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemQuestionnaireDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-questionnaire-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems questionnaire summary dashboard information.
         * @summary System Questionnaire Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemQuestionnaireSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-questionnaire-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemQuestionnaireDashboardsApi - functional programming interface
 * @export
 */
export const SystemQuestionnaireDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemQuestionnaireDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems questionnaire details dashboard information.
         * @summary System Questionnaire Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemQuestionnaireDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemQuestionnaireDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemQuestionnaireDashboardsApi.getSystemQuestionnaireDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems questionnaire summary dashboard information.
         * @summary System Questionnaire Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemQuestionnaireSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemQuestionnaireSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemQuestionnaireDashboardsApi.getSystemQuestionnaireSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemQuestionnaireDashboardsApi - factory interface
 * @export
 */
export const SystemQuestionnaireDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemQuestionnaireDashboardsApiFp(configuration)
    return {
        /**
         * Get systems questionnaire details dashboard information.
         * @summary System Questionnaire Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemQuestionnaireDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems questionnaire summary dashboard information.
         * @summary System Questionnaire Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemQuestionnaireSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemQuestionnaireDashboardsApi - object-oriented interface
 * @export
 * @class SystemQuestionnaireDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemQuestionnaireDashboardsApi extends BaseAPI {
    /**
     * Get systems questionnaire details dashboard information.
     * @summary System Questionnaire Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemQuestionnaireDashboardsApi
     */
    public getSystemQuestionnaireDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemQuestionnaireDashboardsApiFp(this.configuration).getSystemQuestionnaireDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems questionnaire summary dashboard information.
     * @summary System Questionnaire Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemQuestionnaireDashboardsApi
     */
    public getSystemQuestionnaireSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemQuestionnaireDashboardsApiFp(this.configuration).getSystemQuestionnaireSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemRolesApi - axios parameter creator
 * @export
 */
export const SystemRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/system-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: async (roleCategory: GetSystemRolesByCategoryIdRoleCategoryEnum, role: string, policy?: GetSystemRolesByCategoryIdPolicyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleCategory' is not null or undefined
            assertParamExists('getSystemRolesByCategoryId', 'roleCategory', roleCategory)
            // verify required parameter 'role' is not null or undefined
            assertParamExists('getSystemRolesByCategoryId', 'role', role)
            const localVarPath = `/api/system-roles/{roleCategory}`
                .replace(`{${"roleCategory"}}`, encodeURIComponent(String(roleCategory)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (policy !== undefined) {
                localVarQueryParameter['policy'] = policy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemRolesApi - functional programming interface
 * @export
 */
export const SystemRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemRolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemRolesApi.getSystemRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemRolesByCategoryId(roleCategory: GetSystemRolesByCategoryIdRoleCategoryEnum, role: string, policy?: GetSystemRolesByCategoryIdPolicyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemRolesCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemRolesByCategoryId(roleCategory, role, policy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemRolesApi.getSystemRolesByCategoryId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemRolesApi - factory interface
 * @export
 */
export const SystemRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemRolesApiFp(configuration)
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles(options?: RawAxiosRequestConfig): AxiosPromise<SystemRolesResponse> {
            return localVarFp.getSystemRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId(roleCategory: GetSystemRolesByCategoryIdRoleCategoryEnum, role: string, policy?: GetSystemRolesByCategoryIdPolicyEnum, options?: RawAxiosRequestConfig): AxiosPromise<SystemRolesCategoryResponse> {
            return localVarFp.getSystemRolesByCategoryId(roleCategory, role, policy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemRolesApi - object-oriented interface
 * @export
 * @class SystemRolesApi
 * @extends {BaseAPI}
 */
export class SystemRolesApi extends BaseAPI {
    /**
     * Returns all available roles
     * @summary Get available roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    public getSystemRoles(options?: RawAxiosRequestConfig) {
        return SystemRolesApiFp(this.configuration).getSystemRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the role(s) data matching parameters.
     * @summary Get system roles
     * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
     * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
     * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    public getSystemRolesByCategoryId(roleCategory: GetSystemRolesByCategoryIdRoleCategoryEnum, role: string, policy?: GetSystemRolesByCategoryIdPolicyEnum, options?: RawAxiosRequestConfig) {
        return SystemRolesApiFp(this.configuration).getSystemRolesByCategoryId(roleCategory, role, policy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSystemRolesByCategoryIdRoleCategoryEnum = {
    Cac: 'CAC',
    Pac: 'PAC',
    Other: 'Other',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type GetSystemRolesByCategoryIdRoleCategoryEnum = typeof GetSystemRolesByCategoryIdRoleCategoryEnum[keyof typeof GetSystemRolesByCategoryIdRoleCategoryEnum];
/**
 * @export
 */
export const GetSystemRolesByCategoryIdPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type GetSystemRolesByCategoryIdPolicyEnum = typeof GetSystemRolesByCategoryIdPolicyEnum[keyof typeof GetSystemRolesByCategoryIdPolicyEnum];


/**
 * SystemSecurityControlsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemSecurityControlsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems assessment procedures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemAssessmentProceduresDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-assessment-procedures-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemControlComplianceSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-control-compliance-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSecurityControlDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-security-controls-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemSecurityControlsDashboardsApi - functional programming interface
 * @export
 */
export const SystemSecurityControlsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemSecurityControlsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems assessment procedures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemAssessmentProceduresDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSecurityControlsDashboardsApi.getSystemAssessmentProceduresDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemControlComplianceSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSecurityControlsDashboardsApi.getSystemControlComplianceSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSecurityControlDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSecurityControlsDashboardsApi.getSystemSecurityControlDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemSecurityControlsDashboardsApi - factory interface
 * @export
 */
export const SystemSecurityControlsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemSecurityControlsDashboardsApiFp(configuration)
    return {
        /**
         * Get systems assessment procedures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemSecurityControlsDashboardsApi - object-oriented interface
 * @export
 * @class SystemSecurityControlsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemSecurityControlsDashboardsApi extends BaseAPI {
    /**
     * Get systems assessment procedures details dashboard information.
     * @summary System Assessment Procedures Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSecurityControlsDashboardsApi
     */
    public getSystemAssessmentProceduresDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSecurityControlsDashboardsApiFp(this.configuration).getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems control compliance summary dashboard information.
     * @summary System Control Compliance Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSecurityControlsDashboardsApi
     */
    public getSystemControlComplianceSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSecurityControlsDashboardsApiFp(this.configuration).getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems security control details dashboard information.
     * @summary System Control Compliance Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSecurityControlsDashboardsApi
     */
    public getSystemSecurityControlDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSecurityControlsDashboardsApiFp(this.configuration).getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemSensorHardwareDashboardsApi - axios parameter creator
 * @export
 */
export const SystemSensorHardwareDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSensorHardwareDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-sensor-hardware-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSensorHardwareSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-sensor-hardware-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemSensorHardwareDashboardsApi - functional programming interface
 * @export
 */
export const SystemSensorHardwareDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemSensorHardwareDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSensorHardwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSensorHardwareDashboardsApi.getSystemSensorHardwareDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSensorHardwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSensorHardwareDashboardsApi.getSystemSensorHardwareSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemSensorHardwareDashboardsApi - factory interface
 * @export
 */
export const SystemSensorHardwareDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemSensorHardwareDashboardsApiFp(configuration)
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemSensorHardwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemSensorHardwareDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemSensorHardwareDashboardsApi extends BaseAPI {
    /**
     * Get system sensor hardware details dashboard information.
     * @summary System Sensor Hardware Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorHardwareDashboardsApi
     */
    public getSystemSensorHardwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSensorHardwareDashboardsApiFp(this.configuration).getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system sensor hardware summary dashboard information.
     * @summary System Sensor Hardware Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorHardwareDashboardsApi
     */
    public getSystemSensorHardwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSensorHardwareDashboardsApiFp(this.configuration).getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemSensorSoftwareDashboardsApi - axios parameter creator
 * @export
 */
export const SystemSensorSoftwareDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSensorSoftwareCounts', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-sensor-software-counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSensorSoftwareDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-sensor-software-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSensorSoftwareSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-sensor-software-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemSensorSoftwareDashboardsApi - functional programming interface
 * @export
 */
export const SystemSensorSoftwareDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemSensorSoftwareDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSensorSoftwareCounts(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSensorSoftwareDashboardsApi.getSystemSensorSoftwareCounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSensorSoftwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSensorSoftwareDashboardsApi.getSystemSensorSoftwareDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSensorSoftwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSensorSoftwareDashboardsApi.getSystemSensorSoftwareSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemSensorSoftwareDashboardsApi - factory interface
 * @export
 */
export const SystemSensorSoftwareDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemSensorSoftwareDashboardsApiFp(configuration)
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemSensorSoftwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemSensorSoftwareDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemSensorSoftwareDashboardsApi extends BaseAPI {
    /**
     * Get system sensor hardsoftwareware count dashboard information.
     * @summary System Sensor Software Counts
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorSoftwareDashboardsApi
     */
    public getSystemSensorSoftwareCounts(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSensorSoftwareDashboardsApiFp(this.configuration).getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system sensor hardsoftwareware details dashboard information.
     * @summary System Sensor Software Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorSoftwareDashboardsApi
     */
    public getSystemSensorSoftwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSensorSoftwareDashboardsApiFp(this.configuration).getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system sensor software summary dashboard information.
     * @summary System Sensor Software Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorSoftwareDashboardsApi
     */
    public getSystemSensorSoftwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSensorSoftwareDashboardsApiFp(this.configuration).getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemSoftwareDashboardsApi - axios parameter creator
 * @export
 */
export const SystemSoftwareDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSoftwareDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-software-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemSoftwareSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-software-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemSoftwareDashboardsApi - functional programming interface
 * @export
 */
export const SystemSoftwareDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemSoftwareDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSoftwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSoftwareDashboardsApi.getSystemSoftwareDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSoftwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemSoftwareDashboardsApi.getSystemSoftwareSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemSoftwareDashboardsApi - factory interface
 * @export
 */
export const SystemSoftwareDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemSoftwareDashboardsApiFp(configuration)
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemSoftwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemSoftwareDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemSoftwareDashboardsApi extends BaseAPI {
    /**
     * Get system software details dashboard information.
     * @summary System Software Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSoftwareDashboardsApi
     */
    public getSystemSoftwareDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSoftwareDashboardsApiFp(this.configuration).getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system software summary dashboard information.
     * @summary System Software Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSoftwareDashboardsApi
     */
    public getSystemSoftwareSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemSoftwareDashboardsApiFp(this.configuration).getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemStatusDashboardApi - axios parameter creator
 * @export
 */
export const SystemStatusDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemStatusDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-status-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemStatusDashboardApi - functional programming interface
 * @export
 */
export const SystemStatusDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemStatusDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemStatusDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemStatusDashboardApi.getSystemStatusDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemStatusDashboardApi - factory interface
 * @export
 */
export const SystemStatusDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemStatusDashboardApiFp(configuration)
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemStatusDashboardApi
 * @extends {BaseAPI}
 */
export class SystemStatusDashboardApi extends BaseAPI {
    /**
     * Get systems status detail dashboard information.
     * @summary System Status Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemStatusDashboardApi
     */
    public getSystemStatusDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemStatusDashboardApiFp(this.configuration).getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemTermsConditionsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemTermsConditionsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemTermsConditionsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-terms-conditions-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemTermsConditionsSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-terms-conditions-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemTermsConditionsDashboardsApi - functional programming interface
 * @export
 */
export const SystemTermsConditionsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemTermsConditionsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemTermsConditionsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemTermsConditionsDashboardsApi.getSystemTermsConditionsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemTermsConditionsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemTermsConditionsDashboardsApi.getSystemTermsConditionsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemTermsConditionsDashboardsApi - factory interface
 * @export
 */
export const SystemTermsConditionsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemTermsConditionsDashboardsApiFp(configuration)
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemTermsConditionsDashboardsApi - object-oriented interface
 * @export
 * @class SystemTermsConditionsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemTermsConditionsDashboardsApi extends BaseAPI {
    /**
     * Get systems terms conditions details dashboard information.
     * @summary System Terms Conditions Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemTermsConditionsDashboardsApi
     */
    public getSystemTermsConditionsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemTermsConditionsDashboardsApiFp(this.configuration).getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems terms conditions summary dashboard information.
     * @summary System Terms Conditions Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemTermsConditionsDashboardsApi
     */
    public getSystemTermsConditionsSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemTermsConditionsDashboardsApiFp(this.configuration).getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemVulnerabilityDashboardApi - axios parameter creator
 * @export
 */
export const SystemVulnerabilityDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemVulnerabilitySummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-vulnerability-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemVulnerabilityDashboardApi - functional programming interface
 * @export
 */
export const SystemVulnerabilityDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemVulnerabilityDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemVulnerabilitySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemVulnerabilityDashboardApi.getSystemVulnerabilitySummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemVulnerabilityDashboardApi - factory interface
 * @export
 */
export const SystemVulnerabilityDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemVulnerabilityDashboardApiFp(configuration)
    return {
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemVulnerabilityDashboardApi - object-oriented interface
 * @export
 * @class SystemVulnerabilityDashboardApi
 * @extends {BaseAPI}
 */
export class SystemVulnerabilityDashboardApi extends BaseAPI {
    /**
     * Get system vulnerability summary dashboard information.
     * @summary System Vulnerability Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemVulnerabilityDashboardApi
     */
    public getSystemVulnerabilitySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemVulnerabilityDashboardApiFp(this.configuration).getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemWorkflowsDashboardsApi - axios parameter creator
 * @export
 */
export const SystemWorkflowsDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get systems workflow history details dashboard information.
         * @summary System Workflows History Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemWorkflowsHistoryDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-workflows-history-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems workflow history stage details dashboard information.
         * @summary System Workflows History Stage Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryStageDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemWorkflowsHistoryStageDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-workflows-history-stage-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get systems workflow history summary dashboard information.
         * @summary System Workflows History Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistorySummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getSystemWorkflowsHistorySummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/system-workflows-history-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemWorkflowsDashboardsApi - functional programming interface
 * @export
 */
export const SystemWorkflowsDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemWorkflowsDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get systems workflow history details dashboard information.
         * @summary System Workflows History Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWorkflowsHistoryDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemWorkflowsHistoryDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemWorkflowsDashboardsApi.getSystemWorkflowsHistoryDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems workflow history stage details dashboard information.
         * @summary System Workflows History Stage Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWorkflowsHistoryStageDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemWorkflowsHistoryStageDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemWorkflowsDashboardsApi.getSystemWorkflowsHistoryStageDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get systems workflow history summary dashboard information.
         * @summary System Workflows History Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWorkflowsHistorySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemWorkflowsHistorySummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemWorkflowsDashboardsApi.getSystemWorkflowsHistorySummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemWorkflowsDashboardsApi - factory interface
 * @export
 */
export const SystemWorkflowsDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemWorkflowsDashboardsApiFp(configuration)
    return {
        /**
         * Get systems workflow history details dashboard information.
         * @summary System Workflows History Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemWorkflowsHistoryDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems workflow history stage details dashboard information.
         * @summary System Workflows History Stage Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryStageDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemWorkflowsHistoryStageDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get systems workflow history summary dashboard information.
         * @summary System Workflows History Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistorySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getSystemWorkflowsHistorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemWorkflowsDashboardsApi - object-oriented interface
 * @export
 * @class SystemWorkflowsDashboardsApi
 * @extends {BaseAPI}
 */
export class SystemWorkflowsDashboardsApi extends BaseAPI {
    /**
     * Get systems workflow history details dashboard information.
     * @summary System Workflows History Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemWorkflowsDashboardsApi
     */
    public getSystemWorkflowsHistoryDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemWorkflowsDashboardsApiFp(this.configuration).getSystemWorkflowsHistoryDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems workflow history stage details dashboard information.
     * @summary System Workflows History Stage Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemWorkflowsDashboardsApi
     */
    public getSystemWorkflowsHistoryStageDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemWorkflowsDashboardsApiFp(this.configuration).getSystemWorkflowsHistoryStageDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get systems workflow history summary dashboard information.
     * @summary System Workflows History Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemWorkflowsDashboardsApi
     */
    public getSystemWorkflowsHistorySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SystemWorkflowsDashboardsApiFp(this.configuration).getSystemWorkflowsHistorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemsApi - axios parameter creator
 * @export
 */
export const SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: async (systemId: number, policy?: GetSystemPolicyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystem', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (policy !== undefined) {
                localVarQueryParameter['policy'] = policy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: async (coamsId?: string, ditprId?: string, includeDecommissioned?: boolean, includeDitprMetrics?: boolean, policy?: GetSystemsPolicyEnum, registrationType?: string, reportsForScorecard?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (coamsId !== undefined) {
                localVarQueryParameter['coamsId'] = coamsId;
            }

            if (ditprId !== undefined) {
                localVarQueryParameter['ditprId'] = ditprId;
            }

            if (includeDecommissioned !== undefined) {
                localVarQueryParameter['includeDecommissioned'] = includeDecommissioned;
            }

            if (includeDitprMetrics !== undefined) {
                localVarQueryParameter['includeDitprMetrics'] = includeDitprMetrics;
            }

            if (policy !== undefined) {
                localVarQueryParameter['policy'] = policy;
            }

            if (registrationType !== undefined) {
                localVarQueryParameter['registrationType'] = registrationType;
            }

            if (reportsForScorecard !== undefined) {
                localVarQueryParameter['reportsForScorecard'] = reportsForScorecard;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsApi - functional programming interface
 * @export
 */
export const SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystem(systemId: number, policy?: GetSystemPolicyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystem(systemId, policy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemsApi.getSystem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystems(coamsId?: string, ditprId?: string, includeDecommissioned?: boolean, includeDitprMetrics?: boolean, policy?: GetSystemsPolicyEnum, registrationType?: string, reportsForScorecard?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemsApi.getSystems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemsApi - factory interface
 * @export
 */
export const SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsApiFp(configuration)
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem(systemId: number, policy?: GetSystemPolicyEnum, options?: RawAxiosRequestConfig): AxiosPromise<SystemResponse> {
            return localVarFp.getSystem(systemId, policy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems(coamsId?: string, ditprId?: string, includeDecommissioned?: boolean, includeDitprMetrics?: boolean, policy?: GetSystemsPolicyEnum, registrationType?: string, reportsForScorecard?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SystemsResponse> {
            return localVarFp.getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export class SystemsApi extends BaseAPI {
    /**
     * Returns the system matching provided parameters
     * @summary Get system information for a specific system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystem(systemId: number, policy?: GetSystemPolicyEnum, options?: RawAxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getSystem(systemId, policy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all system(s) that match the query parameters
     * @summary Get system information
     * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
     * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
     * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
     * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
     * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
     * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystems(coamsId?: string, ditprId?: string, includeDecommissioned?: boolean, includeDitprMetrics?: boolean, policy?: GetSystemsPolicyEnum, registrationType?: string, reportsForScorecard?: boolean, options?: RawAxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSystemPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type GetSystemPolicyEnum = typeof GetSystemPolicyEnum[keyof typeof GetSystemPolicyEnum];
/**
 * @export
 */
export const GetSystemsPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type GetSystemsPolicyEnum = typeof GetSystemsPolicyEnum[keyof typeof GetSystemsPolicyEnum];


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testConnection(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Test>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testConnection(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.testConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection(options?: RawAxiosRequestConfig): AxiosPromise<Test> {
            return localVarFp.testConnection(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * Tests the endpoint connection
     * @summary Test connection to the API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testConnection(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).testConnection(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestResultsApi - axios parameter creator
 * @export
 */
export const TestResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: async (systemId: number, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('addTestResultsBySystemId', 'systemId', systemId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addTestResultsBySystemId', 'requestBody', requestBody)
            const localVarPath = `/api/systems/{systemId}/test-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: async (systemId: number, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, latestOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystemTestResults', 'systemId', systemId)
            const localVarPath = `/api/systems/{systemId}/test-results`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (controlAcronyms !== undefined) {
                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
            }

            if (assessmentProcedures !== undefined) {
                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
            }

            if (ccis !== undefined) {
                localVarQueryParameter['ccis'] = ccis;
            }

            if (latestOnly !== undefined) {
                localVarQueryParameter['latestOnly'] = latestOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestResultsApi - functional programming interface
 * @export
 */
export const TestResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTestResultsBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestResultsResponsePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTestResultsBySystemId(systemId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestResultsApi.addTestResultsBySystemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemTestResults(systemId: number, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, latestOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestResultsResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestResultsApi.getSystemTestResults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestResultsApi - factory interface
 * @export
 */
export const TestResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestResultsApiFp(configuration)
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<TestResultsResponsePost> {
            return localVarFp.addTestResultsBySystemId(systemId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults(systemId: number, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, latestOnly?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<TestResultsResponseGet> {
            return localVarFp.getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestResultsApi - object-oriented interface
 * @export
 * @class TestResultsApi
 * @extends {BaseAPI}
 */
export class TestResultsApi extends BaseAPI {
    /**
     * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
     * @summary Add one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    public addTestResultsBySystemId(systemId: number, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return TestResultsApiFp(this.configuration).addTestResultsBySystemId(systemId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns system test results information for matching parameters.<br>
     * @summary Get one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    public getSystemTestResults(systemId: number, controlAcronyms?: string, assessmentProcedures?: string, ccis?: string, latestOnly?: boolean, options?: RawAxiosRequestConfig) {
        return TestResultsApiFp(this.configuration).getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserSystemAssignmentsDashboardApi - axios parameter creator
 * @export
 */
export const UserSystemAssignmentsDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getUserSystemAssignmentsDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/user-system-assignments-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserSystemAssignmentsDashboardApi - functional programming interface
 * @export
 */
export const UserSystemAssignmentsDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserSystemAssignmentsDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSystemAssignmentsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserSystemAssignmentsDashboardApi.getUserSystemAssignmentsDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserSystemAssignmentsDashboardApi - factory interface
 * @export
 */
export const UserSystemAssignmentsDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserSystemAssignmentsDashboardApiFp(configuration)
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserSystemAssignmentsDashboardApi - object-oriented interface
 * @export
 * @class UserSystemAssignmentsDashboardApi
 * @extends {BaseAPI}
 */
export class UserSystemAssignmentsDashboardApi extends BaseAPI {
    /**
     * Get user system assignments details dashboard information.
     * @summary User System Assignments Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSystemAssignmentsDashboardApi
     */
    public getUserSystemAssignmentsDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return UserSystemAssignmentsDashboardApiFp(this.configuration).getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VAOMBFISMADashboardApi - axios parameter creator
 * @export
 */
export const VAOMBFISMADashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaOmbFsmaSaopSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-omb-fisma-saop-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VAOMBFISMADashboardApi - functional programming interface
 * @export
 */
export const VAOMBFISMADashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VAOMBFISMADashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaOmbFsmaSaopSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VAOMBFISMADashboardApi.getVaOmbFsmaSaopSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VAOMBFISMADashboardApi - factory interface
 * @export
 */
export const VAOMBFISMADashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VAOMBFISMADashboardApiFp(configuration)
    return {
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VAOMBFISMADashboardApi - object-oriented interface
 * @export
 * @class VAOMBFISMADashboardApi
 * @extends {BaseAPI}
 */
export class VAOMBFISMADashboardApi extends BaseAPI {
    /**
     * Get VA OMB-FISMA SAOP summary dashboard information.
     * @summary VA OMB FISMA SAOP Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VAOMBFISMADashboardApi
     */
    public getVaOmbFsmaSaopSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VAOMBFISMADashboardApiFp(this.configuration).getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VASystemDashboardsApi - axios parameter creator
 * @export
 */
export const VASystemDashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemA2Summary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-a2-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemAaSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-aa-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemFismaInvetoryCryptoSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-fisma-inventory-crypto-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemFismaInvetorySummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-fisma-inventory-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system ICAMP Tableau POAM details dashboard information.
         * @summary VA System ICAMP Tableau POAM Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemIcampTableauPoamDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemIcampTableauPoamDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-icamp-tableau-poam-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemPl109ReportingSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-pl-109-reporting-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemThreatArchitectureDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-threat-architecture-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemThreatRiskSummary', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-threat-risks-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: async (orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getVaSystemThreatSourceDetails', 'orgId', orgId)
            const localVarPath = `/api/dashboards/va-system-threat-sources-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (excludeinherited !== undefined) {
                localVarQueryParameter['excludeinherited'] = excludeinherited;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VASystemDashboardsApi - functional programming interface
 * @export
 */
export const VASystemDashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VASystemDashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemA2Summary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemA2Summary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemAaSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemAaSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemFismaInvetoryCryptoSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemFismaInvetoryCryptoSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemFismaInvetorySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemFismaInvetorySummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system ICAMP Tableau POAM details dashboard information.
         * @summary VA System ICAMP Tableau POAM Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemIcampTableauPoamDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemIcampTableauPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemIcampTableauPoamDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemPl109ReportingSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemPl109ReportingSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemThreatArchitectureDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemThreatArchitectureDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemThreatRiskSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemThreatRiskSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaSystemThreatSourceDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VASystemDashboardsApi.getVaSystemThreatSourceDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VASystemDashboardsApi - factory interface
 * @export
 */
export const VASystemDashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VASystemDashboardsApiFp(configuration)
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system ICAMP Tableau POAM details dashboard information.
         * @summary VA System ICAMP Tableau POAM Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemIcampTableauPoamDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemIcampTableauPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusDetails200Response> {
            return localVarFp.getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VASystemDashboardsApi - object-oriented interface
 * @export
 * @class VASystemDashboardsApi
 * @extends {BaseAPI}
 */
export class VASystemDashboardsApi extends BaseAPI {
    /**
     * Get VA system A2.0 summary dashboard information.
     * @summary VA System A2.0 Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemA2Summary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system A&A summary dashboard information.
     * @summary VA System A&A Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemAaSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system FISMA inventory crypto summary dashboard information.
     * @summary VA System FISMA Inventory Crypto Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemFismaInvetoryCryptoSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system FISMA inventory summary dashboard information.
     * @summary VA System FISMA Inventory Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemFismaInvetorySummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system ICAMP Tableau POAM details dashboard information.
     * @summary VA System ICAMP Tableau POAM Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemIcampTableauPoamDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemIcampTableauPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system P.L. 109 reporting summary dashboard information.
     * @summary VA System P.L. 109 Reporting Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemPl109ReportingSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system threat architecture details dashboard information.
     * @summary VA System Threat Architecture Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemThreatArchitectureDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system threat risk summary dashboard information.
     * @summary VA System Threat Risks Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemThreatRiskSummary(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VA system threat source details dashboard information.
     * @summary VA System Threat Sources Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. 
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    public getVaSystemThreatSourceDetails(orgId: number, excludeinherited?: boolean, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return VASystemDashboardsApiFp(this.configuration).getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkflowDefinitionsApi - axios parameter creator
 * @export
 */
export const WorkflowDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: async (includeInactive?: boolean, registrationType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workflows/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (includeInactive !== undefined) {
                localVarQueryParameter['includeInactive'] = includeInactive;
            }

            if (registrationType !== undefined) {
                localVarQueryParameter['registrationType'] = registrationType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowDefinitionsApi - functional programming interface
 * @export
 */
export const WorkflowDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowDefinitions(includeInactive?: boolean, registrationType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinitionResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowDefinitions(includeInactive, registrationType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowDefinitionsApi.getWorkflowDefinitions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowDefinitionsApi - factory interface
 * @export
 */
export const WorkflowDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowDefinitionsApiFp(configuration)
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions(includeInactive?: boolean, registrationType?: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDefinitionResponseGet> {
            return localVarFp.getWorkflowDefinitions(includeInactive, registrationType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowDefinitionsApi - object-oriented interface
 * @export
 * @class WorkflowDefinitionsApi
 * @extends {BaseAPI}
 */
export class WorkflowDefinitionsApi extends BaseAPI {
    /**
     * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
     * @summary Get workflow definitions in a site
     * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowDefinitionsApi
     */
    public getWorkflowDefinitions(includeInactive?: boolean, registrationType?: string, options?: RawAxiosRequestConfig) {
        return WorkflowDefinitionsApiFp(this.configuration).getWorkflowDefinitions(includeInactive, registrationType, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkflowInstancesApi - axios parameter creator
 * @export
 */
export const WorkflowInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization. 
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances. 
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made. 
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: async (includeComments?: boolean, includeDecommissionSystems?: boolean, pageIndex?: number, sinceDate?: string, status?: GetSystemWorkflowInstancesStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workflows/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)

            if (includeComments !== undefined) {
                localVarQueryParameter['includeComments'] = includeComments;
            }

            if (includeDecommissionSystems !== undefined) {
                localVarQueryParameter['includeDecommissionSystems'] = includeDecommissionSystems;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (sinceDate !== undefined) {
                localVarQueryParameter['sinceDate'] = sinceDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: async (workflowInstanceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            assertParamExists('getSystemWorkflowInstancesByWorkflowInstanceId', 'workflowInstanceId', workflowInstanceId)
            const localVarPath = `/api/workflows/instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)

            // authentication mockType required
            await setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)

            // authentication userId required
            await setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowInstancesApi - functional programming interface
 * @export
 */
export const WorkflowInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization. 
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances. 
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made. 
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWorkflowInstances(includeComments?: boolean, includeDecommissionSystems?: boolean, pageIndex?: number, sinceDate?: string, status?: GetSystemWorkflowInstancesStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstancesResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowInstancesApi.getSystemWorkflowInstances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstanceResponseGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowInstancesApi.getSystemWorkflowInstancesByWorkflowInstanceId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowInstancesApi - factory interface
 * @export
 */
export const WorkflowInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowInstancesApiFp(configuration)
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization. 
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems. 
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances. 
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made. 
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances(includeComments?: boolean, includeDecommissionSystems?: boolean, pageIndex?: number, sinceDate?: string, status?: GetSystemWorkflowInstancesStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowInstancesResponseGet> {
            return localVarFp.getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options).then((request) => request(axios, basePath));
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowInstanceResponseGet> {
            return localVarFp.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowInstancesApi - object-oriented interface
 * @export
 * @class WorkflowInstancesApi
 * @extends {BaseAPI}
 */
export class WorkflowInstancesApi extends BaseAPI {
    /**
     * View detailed information on all active and historical workflows filtered by provided parameters.
     * @summary Get workflow instances in a site
     * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization. 
     * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems. 
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances. 
     * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made. 
     * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public getSystemWorkflowInstances(includeComments?: boolean, includeDecommissionSystems?: boolean, pageIndex?: number, sinceDate?: string, status?: GetSystemWorkflowInstancesStatusEnum, options?: RawAxiosRequestConfig) {
        return WorkflowInstancesApiFp(this.configuration).getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View detailed historical workflow information for `workflowInstanceId`.
     * @summary Get workflow instance by ID
     * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId: number, options?: RawAxiosRequestConfig) {
        return WorkflowInstancesApiFp(this.configuration).getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSystemWorkflowInstancesStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    All: 'all',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type GetSystemWorkflowInstancesStatusEnum = typeof GetSystemWorkflowInstancesStatusEnum[keyof typeof GetSystemWorkflowInstancesStatusEnum];


