# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` endpoint to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:   # noqa: E501

    The version of the OpenAPI document: v3.9
    Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Any, Optional

from emass_client.models.milestone_response_get import MilestoneResponseGet
from emass_client.models.milestone_response_get_milestone import MilestoneResponseGetMilestone
from emass_client.models.milestone_response_post import MilestoneResponsePost
from emass_client.models.milestone_response_put import MilestoneResponsePut
from emass_client.models.milestones_put_post_delete import MilestonesPutPostDelete
from emass_client.models.milestones_request_delete_body_inner import MilestonesRequestDeleteBodyInner

from emass_client.api_client import ApiClient
from emass_client.api_response import ApiResponse
from emass_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MilestonesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_milestone_by_system_id_and_poam_id(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], request_body : Annotated[conlist(Any), Field(..., description="Add milestones to an existing system poam")], **kwargs) -> MilestoneResponsePost:  # noqa: E501
        """Add milestones to one or many POA&M items in a system  # noqa: E501

        Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_milestone_by_system_id_and_poam_id(system_id, poam_id, request_body, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Add milestones to an existing system poam (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MilestoneResponsePost
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the add_milestone_by_system_id_and_poam_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.add_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def add_milestone_by_system_id_and_poam_id_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], request_body : Annotated[conlist(Any), Field(..., description="Add milestones to an existing system poam")], **kwargs) -> ApiResponse:  # noqa: E501
        """Add milestones to one or many POA&M items in a system  # noqa: E501

        Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Add milestones to an existing system poam (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MilestoneResponsePost, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'poam_id',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_milestone_by_system_id_and_poam_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']

        if _params['poam_id']:
            _path_params['poamId'] = _params['poam_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "MilestoneResponsePost",
            '201': "Response201",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '411': "Response411",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/poams/{poamId}/milestones', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_milestone(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], milestones_request_delete_body_inner : Annotated[conlist(MilestonesRequestDeleteBodyInner), Field(..., description="Delete the given Milestone Id")], **kwargs) -> MilestonesPutPostDelete:  # noqa: E501
        """Remove milestones in a system for one or many POA&M items  # noqa: E501

        Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_milestone(system_id, poam_id, milestones_request_delete_body_inner, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestones_request_delete_body_inner: Delete the given Milestone Id (required)
        :type milestones_request_delete_body_inner: List[MilestonesRequestDeleteBodyInner]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MilestonesPutPostDelete
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_milestone_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_milestone_with_http_info(system_id, poam_id, milestones_request_delete_body_inner, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_milestone_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], milestones_request_delete_body_inner : Annotated[conlist(MilestonesRequestDeleteBodyInner), Field(..., description="Delete the given Milestone Id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Remove milestones in a system for one or many POA&M items  # noqa: E501

        Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_milestone_with_http_info(system_id, poam_id, milestones_request_delete_body_inner, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestones_request_delete_body_inner: Delete the given Milestone Id (required)
        :type milestones_request_delete_body_inner: List[MilestonesRequestDeleteBodyInner]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MilestonesPutPostDelete, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'poam_id',
            'milestones_request_delete_body_inner'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_milestone" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']

        if _params['poam_id']:
            _path_params['poamId'] = _params['poam_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['milestones_request_delete_body_inner'] is not None:
            _body_params = _params['milestones_request_delete_body_inner']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "MilestonesPutPostDelete",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/poams/{poamId}/milestones', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_system_milestones_by_poam_id(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], scheduled_completion_date_start : Annotated[Optional[StrictStr], Field(description="**Date Started**: Filter query by the scheduled completion start date (Unix date format).")] = None, scheduled_completion_date_end : Annotated[Optional[StrictStr], Field(description="**Date Ended**: Filter query by the scheduled completion start date (Unix date format).")] = None, **kwargs) -> MilestoneResponseGet:  # noqa: E501
        """Get milestones in one or many POA&M items in a system  # noqa: E501

        Returns system containing milestones for matching parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_milestones_by_poam_id(system_id, poam_id, scheduled_completion_date_start, scheduled_completion_date_end, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param scheduled_completion_date_start: **Date Started**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_start: str
        :param scheduled_completion_date_end: **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_end: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MilestoneResponseGet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_system_milestones_by_poam_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_system_milestones_by_poam_id_with_http_info(system_id, poam_id, scheduled_completion_date_start, scheduled_completion_date_end, **kwargs)  # noqa: E501

    @validate_arguments
    def get_system_milestones_by_poam_id_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], scheduled_completion_date_start : Annotated[Optional[StrictStr], Field(description="**Date Started**: Filter query by the scheduled completion start date (Unix date format).")] = None, scheduled_completion_date_end : Annotated[Optional[StrictStr], Field(description="**Date Ended**: Filter query by the scheduled completion start date (Unix date format).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get milestones in one or many POA&M items in a system  # noqa: E501

        Returns system containing milestones for matching parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_milestones_by_poam_id_with_http_info(system_id, poam_id, scheduled_completion_date_start, scheduled_completion_date_end, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param scheduled_completion_date_start: **Date Started**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_start: str
        :param scheduled_completion_date_end: **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_end: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MilestoneResponseGet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'poam_id',
            'scheduled_completion_date_start',
            'scheduled_completion_date_end'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_milestones_by_poam_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']

        if _params['poam_id']:
            _path_params['poamId'] = _params['poam_id']


        # process the query parameters
        _query_params = []
        if _params.get('scheduled_completion_date_start') is not None:  # noqa: E501
            _query_params.append(('scheduledCompletionDateStart', _params['scheduled_completion_date_start']))

        if _params.get('scheduled_completion_date_end') is not None:  # noqa: E501
            _query_params.append(('scheduledCompletionDateEnd', _params['scheduled_completion_date_end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "MilestoneResponseGet",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '490': "Response490",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/poams/{poamId}/milestones', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_system_milestones_by_poam_id_and_milestone_id(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], milestone_id : Annotated[StrictInt, Field(..., description="**Milestone Id**: The unique milestone record identifier.")], **kwargs) -> MilestoneResponseGetMilestone:  # noqa: E501
        """Get milestone by ID in POA&M item in a system  # noqa: E501

        Returns systems containing milestones for matching parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_milestones_by_poam_id_and_milestone_id(system_id, poam_id, milestone_id, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestone_id: **Milestone Id**: The unique milestone record identifier. (required)
        :type milestone_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MilestoneResponseGetMilestone
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_system_milestones_by_poam_id_and_milestone_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_system_milestones_by_poam_id_and_milestone_id_with_http_info(system_id, poam_id, milestone_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_system_milestones_by_poam_id_and_milestone_id_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], milestone_id : Annotated[StrictInt, Field(..., description="**Milestone Id**: The unique milestone record identifier.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get milestone by ID in POA&M item in a system  # noqa: E501

        Returns systems containing milestones for matching parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_milestones_by_poam_id_and_milestone_id_with_http_info(system_id, poam_id, milestone_id, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestone_id: **Milestone Id**: The unique milestone record identifier. (required)
        :type milestone_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MilestoneResponseGetMilestone, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'poam_id',
            'milestone_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_milestones_by_poam_id_and_milestone_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']

        if _params['poam_id']:
            _path_params['poamId'] = _params['poam_id']

        if _params['milestone_id']:
            _path_params['milestoneId'] = _params['milestone_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "MilestoneResponseGetMilestone",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '490': "Response490",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_milestone_by_system_id_and_poam_id(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], request_body : Annotated[conlist(Any), Field(..., description="Update milestones for an existing system poam")], **kwargs) -> MilestoneResponsePut:  # noqa: E501
        """Update one or many POA&M items in a system  # noqa: E501

        Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_milestone_by_system_id_and_poam_id(system_id, poam_id, request_body, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Update milestones for an existing system poam (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MilestoneResponsePut
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_milestone_by_system_id_and_poam_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_milestone_by_system_id_and_poam_id_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], poam_id : Annotated[StrictInt, Field(..., description="**POA&M Id**: The unique POA&M record identifier.")], request_body : Annotated[conlist(Any), Field(..., description="Update milestones for an existing system poam")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update one or many POA&M items in a system  # noqa: E501

        Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_milestone_by_system_id_and_poam_id_with_http_info(system_id, poam_id, request_body, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Update milestones for an existing system poam (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MilestoneResponsePut, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'poam_id',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_milestone_by_system_id_and_poam_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']

        if _params['poam_id']:
            _path_params['poamId'] = _params['poam_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "MilestoneResponsePut",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/poams/{poamId}/milestones', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
