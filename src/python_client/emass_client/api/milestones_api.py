# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from emass_client.models.milestone_response_delete import MilestoneResponseDelete
from emass_client.models.milestone_response_get import MilestoneResponseGet
from emass_client.models.milestone_response_get_milestone import MilestoneResponseGetMilestone
from emass_client.models.milestone_response_post import MilestoneResponsePost
from emass_client.models.milestone_response_put import MilestoneResponsePut
from emass_client.models.milestones_request_delete_body_inner import MilestonesRequestDeleteBodyInner
from emass_client.models.object import object

from emass_client.api_client import ApiClient, RequestSerialized
from emass_client.api_response import ApiResponse
from emass_client.rest import RESTResponseType


class MilestonesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_milestone_by_system_id_and_poam_id(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        request_body: Annotated[List[Optional[object]], Field(description="Example request body for adding milestones to an existing System (systemId) POA&M (poamId)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MilestoneResponsePost:
        """Add milestones to one or many POA&M items in a system

        Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Example request body for adding milestones to an existing System (systemId) POA&M (poamId) (required)
        :type request_body: List[object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_milestone_by_system_id_and_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponsePost",
            '201': "Created",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '411': "LengthRequired",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_milestone_by_system_id_and_poam_id_with_http_info(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        request_body: Annotated[List[Optional[object]], Field(description="Example request body for adding milestones to an existing System (systemId) POA&M (poamId)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MilestoneResponsePost]:
        """Add milestones to one or many POA&M items in a system

        Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Example request body for adding milestones to an existing System (systemId) POA&M (poamId) (required)
        :type request_body: List[object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_milestone_by_system_id_and_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponsePost",
            '201': "Created",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '411': "LengthRequired",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_milestone_by_system_id_and_poam_id_without_preload_content(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        request_body: Annotated[List[Optional[object]], Field(description="Example request body for adding milestones to an existing System (systemId) POA&M (poamId)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add milestones to one or many POA&M items in a system

        Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Example request body for adding milestones to an existing System (systemId) POA&M (poamId) (required)
        :type request_body: List[object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_milestone_by_system_id_and_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponsePost",
            '201': "Created",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '411': "LengthRequired",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_milestone_by_system_id_and_poam_id_serialize(
        self,
        system_id,
        poam_id,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'request_body': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if poam_id is not None:
            _path_params['poamId'] = poam_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'mockType', 
            'userId'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/systems/{systemId}/poams/{poamId}/milestones',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_milestone(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        milestones_request_delete_body_inner: Annotated[List[MilestonesRequestDeleteBodyInner], Field(description="Delete the given Milestone Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MilestoneResponseDelete:
        """Remove milestones in a system for one or many POA&M items

        Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestones_request_delete_body_inner: Delete the given Milestone Id (required)
        :type milestones_request_delete_body_inner: List[MilestonesRequestDeleteBodyInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_milestone_serialize(
            system_id=system_id,
            poam_id=poam_id,
            milestones_request_delete_body_inner=milestones_request_delete_body_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseDelete",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_milestone_with_http_info(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        milestones_request_delete_body_inner: Annotated[List[MilestonesRequestDeleteBodyInner], Field(description="Delete the given Milestone Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MilestoneResponseDelete]:
        """Remove milestones in a system for one or many POA&M items

        Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestones_request_delete_body_inner: Delete the given Milestone Id (required)
        :type milestones_request_delete_body_inner: List[MilestonesRequestDeleteBodyInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_milestone_serialize(
            system_id=system_id,
            poam_id=poam_id,
            milestones_request_delete_body_inner=milestones_request_delete_body_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseDelete",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_milestone_without_preload_content(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        milestones_request_delete_body_inner: Annotated[List[MilestonesRequestDeleteBodyInner], Field(description="Delete the given Milestone Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove milestones in a system for one or many POA&M items

        Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestones_request_delete_body_inner: Delete the given Milestone Id (required)
        :type milestones_request_delete_body_inner: List[MilestonesRequestDeleteBodyInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_milestone_serialize(
            system_id=system_id,
            poam_id=poam_id,
            milestones_request_delete_body_inner=milestones_request_delete_body_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseDelete",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_milestone_serialize(
        self,
        system_id,
        poam_id,
        milestones_request_delete_body_inner,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'MilestonesRequestDeleteBodyInner': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if poam_id is not None:
            _path_params['poamId'] = poam_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if milestones_request_delete_body_inner is not None:
            _body_params = milestones_request_delete_body_inner


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'mockType', 
            'userId'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/systems/{systemId}/poams/{poamId}/milestones',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_milestones_by_poam_id(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        scheduled_completion_date_start: Annotated[Optional[StrictStr], Field(description="**Date Started**: Filter query by the scheduled completion start date (Unix date format).")] = None,
        scheduled_completion_date_end: Annotated[Optional[StrictStr], Field(description="**Date Ended**: Filter query by the scheduled completion start date (Unix date format).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MilestoneResponseGet:
        """Get milestones in one or many POA&M items in a system

        Returns system containing milestones for matching parameters.

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param scheduled_completion_date_start: **Date Started**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_start: str
        :param scheduled_completion_date_end: **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_milestones_by_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            scheduled_completion_date_start=scheduled_completion_date_start,
            scheduled_completion_date_end=scheduled_completion_date_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseGet",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '490': "APIRuleFailed",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_milestones_by_poam_id_with_http_info(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        scheduled_completion_date_start: Annotated[Optional[StrictStr], Field(description="**Date Started**: Filter query by the scheduled completion start date (Unix date format).")] = None,
        scheduled_completion_date_end: Annotated[Optional[StrictStr], Field(description="**Date Ended**: Filter query by the scheduled completion start date (Unix date format).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MilestoneResponseGet]:
        """Get milestones in one or many POA&M items in a system

        Returns system containing milestones for matching parameters.

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param scheduled_completion_date_start: **Date Started**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_start: str
        :param scheduled_completion_date_end: **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_milestones_by_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            scheduled_completion_date_start=scheduled_completion_date_start,
            scheduled_completion_date_end=scheduled_completion_date_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseGet",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '490': "APIRuleFailed",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_milestones_by_poam_id_without_preload_content(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        scheduled_completion_date_start: Annotated[Optional[StrictStr], Field(description="**Date Started**: Filter query by the scheduled completion start date (Unix date format).")] = None,
        scheduled_completion_date_end: Annotated[Optional[StrictStr], Field(description="**Date Ended**: Filter query by the scheduled completion start date (Unix date format).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get milestones in one or many POA&M items in a system

        Returns system containing milestones for matching parameters.

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param scheduled_completion_date_start: **Date Started**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_start: str
        :param scheduled_completion_date_end: **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
        :type scheduled_completion_date_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_milestones_by_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            scheduled_completion_date_start=scheduled_completion_date_start,
            scheduled_completion_date_end=scheduled_completion_date_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseGet",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '490': "APIRuleFailed",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_milestones_by_poam_id_serialize(
        self,
        system_id,
        poam_id,
        scheduled_completion_date_start,
        scheduled_completion_date_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if poam_id is not None:
            _path_params['poamId'] = poam_id
        # process the query parameters
        if scheduled_completion_date_start is not None:
            
            _query_params.append(('scheduledCompletionDateStart', scheduled_completion_date_start))
            
        if scheduled_completion_date_end is not None:
            
            _query_params.append(('scheduledCompletionDateEnd', scheduled_completion_date_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'mockType', 
            'userId'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/systems/{systemId}/poams/{poamId}/milestones',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_milestones_by_poam_id_and_milestone_id(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        milestone_id: Annotated[StrictInt, Field(description="**Milestone Id**: The unique milestone record identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MilestoneResponseGetMilestone:
        """Get milestone by ID in POA&M item in a system

        Returns systems containing milestones for matching parameters.

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestone_id: **Milestone Id**: The unique milestone record identifier. (required)
        :type milestone_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_milestones_by_poam_id_and_milestone_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            milestone_id=milestone_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseGetMilestone",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '490': "APIRuleFailed",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_milestones_by_poam_id_and_milestone_id_with_http_info(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        milestone_id: Annotated[StrictInt, Field(description="**Milestone Id**: The unique milestone record identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MilestoneResponseGetMilestone]:
        """Get milestone by ID in POA&M item in a system

        Returns systems containing milestones for matching parameters.

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestone_id: **Milestone Id**: The unique milestone record identifier. (required)
        :type milestone_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_milestones_by_poam_id_and_milestone_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            milestone_id=milestone_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseGetMilestone",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '490': "APIRuleFailed",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_milestones_by_poam_id_and_milestone_id_without_preload_content(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        milestone_id: Annotated[StrictInt, Field(description="**Milestone Id**: The unique milestone record identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get milestone by ID in POA&M item in a system

        Returns systems containing milestones for matching parameters.

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param milestone_id: **Milestone Id**: The unique milestone record identifier. (required)
        :type milestone_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_milestones_by_poam_id_and_milestone_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            milestone_id=milestone_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponseGetMilestone",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '490': "APIRuleFailed",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_milestones_by_poam_id_and_milestone_id_serialize(
        self,
        system_id,
        poam_id,
        milestone_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if poam_id is not None:
            _path_params['poamId'] = poam_id
        if milestone_id is not None:
            _path_params['milestoneId'] = milestone_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'mockType', 
            'userId'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_milestone_by_system_id_and_poam_id(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        request_body: Annotated[List[Optional[object]], Field(description="Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&M (poamId)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MilestoneResponsePut:
        """Update one or many POA&M items in a system

        Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&M (poamId) (required)
        :type request_body: List[object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_milestone_by_system_id_and_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponsePut",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_milestone_by_system_id_and_poam_id_with_http_info(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        request_body: Annotated[List[Optional[object]], Field(description="Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&M (poamId)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MilestoneResponsePut]:
        """Update one or many POA&M items in a system

        Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&M (poamId) (required)
        :type request_body: List[object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_milestone_by_system_id_and_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponsePut",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_milestone_by_system_id_and_poam_id_without_preload_content(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        poam_id: Annotated[StrictInt, Field(description="**POA&M Id**: The unique POA&M record identifier.")],
        request_body: Annotated[List[Optional[object]], Field(description="Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&M (poamId)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update one or many POA&M items in a system

        Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param poam_id: **POA&M Id**: The unique POA&M record identifier. (required)
        :type poam_id: int
        :param request_body: Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&M (poamId) (required)
        :type request_body: List[object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_milestone_by_system_id_and_poam_id_serialize(
            system_id=system_id,
            poam_id=poam_id,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MilestoneResponsePut",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_milestone_by_system_id_and_poam_id_serialize(
        self,
        system_id,
        poam_id,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'request_body': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if poam_id is not None:
            _path_params['poamId'] = poam_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'mockType', 
            'userId'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/systems/{systemId}/poams/{poamId}/milestones',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


