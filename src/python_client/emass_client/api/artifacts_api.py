# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.1
- Build date: 2023-05-23T01:07:18.461999Z[Etc/UTC]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

### Tests

Execute `pytest` to run the tests.

import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, conlist

from typing import Any, Optional, Union

from emass_client.models.artifacts_request_delete_body_inner import ArtifactsRequestDeleteBodyInner
from emass_client.models.artifacts_response_del import ArtifactsResponseDel
from emass_client.models.artifacts_response_get import ArtifactsResponseGet
from emass_client.models.artifacts_response_put_post import ArtifactsResponsePutPost

from emass_client.api_client import ApiClient
from emass_client.api_response import ApiResponse
from emass_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ArtifactsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_artifacts_by_system_id(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], zipper : Union[StrictBytes, StrictStr], is_bulk : Annotated[Optional[StrictBool], Field(description="**Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\" ")] = None, is_template : Optional[StrictBool] = None, type : Optional[StrictStr] = None, category : Optional[StrictStr] = None, **kwargs) -> ArtifactsResponsePutPost:  # noqa: E501
        """Add one or many artifacts in a system  # noqa: E501

        <strong>Information</strong><br> The body of a request through the Artifacts POST endpoint accepts a single binary file. Two  Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within  an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include  a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This  .zip file should contain one or more files corresponding to existing artifacts or new artifacts that  will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact  existing within the application, the file associated with the artifact will be updated. If no artifact  is matched via filename to the application, a new artifact will be created with the following  default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br> Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul> Artifact cannot be saved if the file does not have an allowable file extension/type:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename</li>   <li>Type</li>   <li>Category</li> </ul>  Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_artifacts_by_system_id(system_id, zipper, is_bulk, is_template, type, category, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param zipper: (required)
        :type zipper: bytearray
        :param is_bulk: **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\" 
        :type is_bulk: bool
        :param is_template:
        :type is_template: bool
        :param type:
        :type type: str
        :param category:
        :type category: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArtifactsResponsePutPost
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the add_artifacts_by_system_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.add_artifacts_by_system_id_with_http_info(system_id, zipper, is_bulk, is_template, type, category, **kwargs)  # noqa: E501

    @validate_arguments
    def add_artifacts_by_system_id_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], zipper : Union[StrictBytes, StrictStr], is_bulk : Annotated[Optional[StrictBool], Field(description="**Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\" ")] = None, is_template : Optional[StrictBool] = None, type : Optional[StrictStr] = None, category : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add one or many artifacts in a system  # noqa: E501

        <strong>Information</strong><br> The body of a request through the Artifacts POST endpoint accepts a single binary file. Two  Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within  an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include  a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This  .zip file should contain one or more files corresponding to existing artifacts or new artifacts that  will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact  existing within the application, the file associated with the artifact will be updated. If no artifact  is matched via filename to the application, a new artifact will be created with the following  default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br> Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul> Artifact cannot be saved if the file does not have an allowable file extension/type:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename</li>   <li>Type</li>   <li>Category</li> </ul>  Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_artifacts_by_system_id_with_http_info(system_id, zipper, is_bulk, is_template, type, category, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param zipper: (required)
        :type zipper: bytearray
        :param is_bulk: **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\" 
        :type is_bulk: bool
        :param is_template:
        :type is_template: bool
        :param type:
        :type type: str
        :param category:
        :type category: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArtifactsResponsePutPost, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'zipper',
            'is_bulk',
            'is_template',
            'type',
            'category'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_artifacts_by_system_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']


        # process the query parameters
        _query_params = []
        if _params.get('is_bulk') is not None:  # noqa: E501
            _query_params.append(('isBulk', _params['is_bulk']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['is_template']:
            _form_params.append(('isTemplate', _params['is_template']))

        if _params['type']:
            _form_params.append(('type', _params['type']))

        if _params['category']:
            _form_params.append(('category', _params['category']))

        if _params['zipper']:
            _files['Zipper'] = _params['zipper']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "ArtifactsResponsePutPost",
            '201': "Response201",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '411': "Response411",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/artifacts', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_artifact(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], artifacts_request_delete_body_inner : Annotated[conlist(ArtifactsRequestDeleteBodyInner), Field(..., description="Delete artifact files for the given System Id")], **kwargs) -> ArtifactsResponseDel:  # noqa: E501
        """Remove one or many artifacts in a system  # noqa: E501

        Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_artifact(system_id, artifacts_request_delete_body_inner, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param artifacts_request_delete_body_inner: Delete artifact files for the given System Id (required)
        :type artifacts_request_delete_body_inner: List[ArtifactsRequestDeleteBodyInner]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArtifactsResponseDel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_artifact_with_http_info(system_id, artifacts_request_delete_body_inner, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_artifact_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], artifacts_request_delete_body_inner : Annotated[conlist(ArtifactsRequestDeleteBodyInner), Field(..., description="Delete artifact files for the given System Id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Remove one or many artifacts in a system  # noqa: E501

        Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_artifact_with_http_info(system_id, artifacts_request_delete_body_inner, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param artifacts_request_delete_body_inner: Delete artifact files for the given System Id (required)
        :type artifacts_request_delete_body_inner: List[ArtifactsRequestDeleteBodyInner]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArtifactsResponseDel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'artifacts_request_delete_body_inner'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_artifact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['artifacts_request_delete_body_inner'] is not None:
            _body_params = _params['artifacts_request_delete_body_inner']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "ArtifactsResponseDel",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/artifacts', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_system_artifacts(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], filename : Annotated[Optional[StrictStr], Field(description="**File Name**: The file name (to include file-extension).")] = None, control_acronyms : Annotated[Optional[StrictStr], Field(description="**System Acronym**: Filter query by given system acronym (single or comma separated).")] = None, ccis : Annotated[Optional[StrictStr], Field(description="**CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).")] = None, system_only : Annotated[Optional[StrictBool], Field(description="**Systems Only**: Indicates that only system(s) information is retrieved.")] = None, **kwargs) -> ArtifactsResponseGet:  # noqa: E501
        """Get one or many artifacts in a system  # noqa: E501

        Returns selected artifacts matching parameters to include the file name containing the artifacts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_artifacts(system_id, filename, control_acronyms, ccis, system_only, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param filename: **File Name**: The file name (to include file-extension).
        :type filename: str
        :param control_acronyms: **System Acronym**: Filter query by given system acronym (single or comma separated).
        :type control_acronyms: str
        :param ccis: **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
        :type ccis: str
        :param system_only: **Systems Only**: Indicates that only system(s) information is retrieved.
        :type system_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArtifactsResponseGet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_system_artifacts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_system_artifacts_with_http_info(system_id, filename, control_acronyms, ccis, system_only, **kwargs)  # noqa: E501

    @validate_arguments
    def get_system_artifacts_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], filename : Annotated[Optional[StrictStr], Field(description="**File Name**: The file name (to include file-extension).")] = None, control_acronyms : Annotated[Optional[StrictStr], Field(description="**System Acronym**: Filter query by given system acronym (single or comma separated).")] = None, ccis : Annotated[Optional[StrictStr], Field(description="**CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).")] = None, system_only : Annotated[Optional[StrictBool], Field(description="**Systems Only**: Indicates that only system(s) information is retrieved.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get one or many artifacts in a system  # noqa: E501

        Returns selected artifacts matching parameters to include the file name containing the artifacts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_artifacts_with_http_info(system_id, filename, control_acronyms, ccis, system_only, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param filename: **File Name**: The file name (to include file-extension).
        :type filename: str
        :param control_acronyms: **System Acronym**: Filter query by given system acronym (single or comma separated).
        :type control_acronyms: str
        :param ccis: **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
        :type ccis: str
        :param system_only: **Systems Only**: Indicates that only system(s) information is retrieved.
        :type system_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArtifactsResponseGet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'filename',
            'control_acronyms',
            'ccis',
            'system_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_artifacts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']


        # process the query parameters
        _query_params = []
        if _params.get('filename') is not None:  # noqa: E501
            _query_params.append(('filename', _params['filename']))

        if _params.get('control_acronyms') is not None:  # noqa: E501
            _query_params.append(('controlAcronyms', _params['control_acronyms']))

        if _params.get('ccis') is not None:  # noqa: E501
            _query_params.append(('ccis', _params['ccis']))

        if _params.get('system_only') is not None:  # noqa: E501
            _query_params.append(('systemOnly', _params['system_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "ArtifactsResponseGet",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '490': "Response490",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/artifacts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_artifact_by_system_id(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], request_body : Annotated[conlist(Any), Field(..., description="See `information` above for additional instructions")], **kwargs) -> ArtifactsResponsePutPost:  # noqa: E501
        """Update one or many artifacts in a system  # noqa: E501

        Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_artifact_by_system_id(system_id, request_body, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param request_body: See `information` above for additional instructions (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArtifactsResponsePutPost
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_artifact_by_system_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_artifact_by_system_id_with_http_info(system_id, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_artifact_by_system_id_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], request_body : Annotated[conlist(Any), Field(..., description="See `information` above for additional instructions")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update one or many artifacts in a system  # noqa: E501

        Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_artifact_by_system_id_with_http_info(system_id, request_body, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param request_body: See `information` above for additional instructions (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArtifactsResponsePutPost, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_artifact_by_system_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "ArtifactsResponsePutPost",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}/artifacts', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
