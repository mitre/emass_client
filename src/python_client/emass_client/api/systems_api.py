# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` endpoint to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:   # noqa: E501

    The version of the OpenAPI document: v3.9
    Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from emass_client.models.system_response import SystemResponse
from emass_client.models.systems_response import SystemsResponse

from emass_client.api_client import ApiClient
from emass_client.api_response import ApiResponse
from emass_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SystemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_system(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], include_package : Annotated[Optional[StrictBool], Field(description="**Include Package**:  Indicates if additional packages information is retrieved for queried system.")] = None, policy : Annotated[Optional[StrictStr], Field(description="**System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.")] = None, **kwargs) -> SystemResponse:  # noqa: E501
        """Get system information for a specific system  # noqa: E501

        Returns the system matching provided parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system(system_id, include_package, policy, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param include_package: **Include Package**:  Indicates if additional packages information is retrieved for queried system.
        :type include_package: bool
        :param policy: **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
        :type policy: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SystemResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_system_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_system_with_http_info(system_id, include_package, policy, **kwargs)  # noqa: E501

    @validate_arguments
    def get_system_with_http_info(self, system_id : Annotated[StrictInt, Field(..., description="**System Id**: The unique system record identifier.")], include_package : Annotated[Optional[StrictBool], Field(description="**Include Package**:  Indicates if additional packages information is retrieved for queried system.")] = None, policy : Annotated[Optional[StrictStr], Field(description="**System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get system information for a specific system  # noqa: E501

        Returns the system matching provided parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_with_http_info(system_id, include_package, policy, async_req=True)
        >>> result = thread.get()

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param include_package: **Include Package**:  Indicates if additional packages information is retrieved for queried system.
        :type include_package: bool
        :param policy: **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
        :type policy: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SystemResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'system_id',
            'include_package',
            'policy'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['system_id']:
            _path_params['systemId'] = _params['system_id']


        # process the query parameters
        _query_params = []
        if _params.get('include_package') is not None:  # noqa: E501
            _query_params.append(('includePackage', _params['include_package']))

        if _params.get('policy') is not None:  # noqa: E501
            _query_params.append(('policy', _params['policy'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "SystemResponse",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '490': "Response490",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems/{systemId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_systems(self, include_package : Annotated[Optional[StrictBool], Field(description="**Include Package**:  Indicates if additional packages information is retrieved for queried system.")] = None, registration_type : Annotated[Optional[StrictStr], Field(description="**Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider  ")] = None, ditpr_id : Annotated[Optional[StrictStr], Field(description="**DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).")] = None, coams_id : Annotated[Optional[StrictStr], Field(description="**COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).")] = None, policy : Annotated[Optional[StrictStr], Field(description="**System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.")] = None, include_ditpr_metrics : Annotated[Optional[StrictBool], Field(description="**Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:<br>   <ul>     <li>registrationType</li>     <li>policy</li>   </ul>")] = None, include_decommissioned : Annotated[Optional[StrictBool], Field(description="**Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.")] = None, reports_for_scorecard : Annotated[Optional[StrictBool], Field(description="**DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.")] = None, **kwargs) -> SystemsResponse:  # noqa: E501
        """Get system information  # noqa: E501

        Returns all system(s) that match the query parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_systems(include_package, registration_type, ditpr_id, coams_id, policy, include_ditpr_metrics, include_decommissioned, reports_for_scorecard, async_req=True)
        >>> result = thread.get()

        :param include_package: **Include Package**:  Indicates if additional packages information is retrieved for queried system.
        :type include_package: bool
        :param registration_type: **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider  
        :type registration_type: str
        :param ditpr_id: **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
        :type ditpr_id: str
        :param coams_id: **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
        :type coams_id: str
        :param policy: **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
        :type policy: str
        :param include_ditpr_metrics: **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:<br>   <ul>     <li>registrationType</li>     <li>policy</li>   </ul>
        :type include_ditpr_metrics: bool
        :param include_decommissioned: **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
        :type include_decommissioned: bool
        :param reports_for_scorecard: **DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
        :type reports_for_scorecard: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SystemsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_systems_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_systems_with_http_info(include_package, registration_type, ditpr_id, coams_id, policy, include_ditpr_metrics, include_decommissioned, reports_for_scorecard, **kwargs)  # noqa: E501

    @validate_arguments
    def get_systems_with_http_info(self, include_package : Annotated[Optional[StrictBool], Field(description="**Include Package**:  Indicates if additional packages information is retrieved for queried system.")] = None, registration_type : Annotated[Optional[StrictStr], Field(description="**Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider  ")] = None, ditpr_id : Annotated[Optional[StrictStr], Field(description="**DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).")] = None, coams_id : Annotated[Optional[StrictStr], Field(description="**COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).")] = None, policy : Annotated[Optional[StrictStr], Field(description="**System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.")] = None, include_ditpr_metrics : Annotated[Optional[StrictBool], Field(description="**Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:<br>   <ul>     <li>registrationType</li>     <li>policy</li>   </ul>")] = None, include_decommissioned : Annotated[Optional[StrictBool], Field(description="**Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.")] = None, reports_for_scorecard : Annotated[Optional[StrictBool], Field(description="**DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get system information  # noqa: E501

        Returns all system(s) that match the query parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_systems_with_http_info(include_package, registration_type, ditpr_id, coams_id, policy, include_ditpr_metrics, include_decommissioned, reports_for_scorecard, async_req=True)
        >>> result = thread.get()

        :param include_package: **Include Package**:  Indicates if additional packages information is retrieved for queried system.
        :type include_package: bool
        :param registration_type: **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider  
        :type registration_type: str
        :param ditpr_id: **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
        :type ditpr_id: str
        :param coams_id: **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
        :type coams_id: str
        :param policy: **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
        :type policy: str
        :param include_ditpr_metrics: **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:<br>   <ul>     <li>registrationType</li>     <li>policy</li>   </ul>
        :type include_ditpr_metrics: bool
        :param include_decommissioned: **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
        :type include_decommissioned: bool
        :param reports_for_scorecard: **DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
        :type reports_for_scorecard: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SystemsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'include_package',
            'registration_type',
            'ditpr_id',
            'coams_id',
            'policy',
            'include_ditpr_metrics',
            'include_decommissioned',
            'reports_for_scorecard'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_systems" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('include_package') is not None:  # noqa: E501
            _query_params.append(('includePackage', _params['include_package']))

        if _params.get('registration_type') is not None:  # noqa: E501
            _query_params.append(('registrationType', _params['registration_type']))

        if _params.get('ditpr_id') is not None:  # noqa: E501
            _query_params.append(('ditprId', _params['ditpr_id']))

        if _params.get('coams_id') is not None:  # noqa: E501
            _query_params.append(('coamsId', _params['coams_id']))

        if _params.get('policy') is not None:  # noqa: E501
            _query_params.append(('policy', _params['policy'].value))

        if _params.get('include_ditpr_metrics') is not None:  # noqa: E501
            _query_params.append(('includeDitprMetrics', _params['include_ditpr_metrics']))

        if _params.get('include_decommissioned') is not None:  # noqa: E501
            _query_params.append(('includeDecommissioned', _params['include_decommissioned']))

        if _params.get('reports_for_scorecard') is not None:  # noqa: E501
            _query_params.append(('reportsForScorecard', _params['reports_for_scorecard']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'mockType', 'userId']  # noqa: E501

        _response_types_map = {
            '200': "SystemsResponse",
            '400': "Response400",
            '401': "Response401",
            '403': "Response403",
            '404': "Response404",
            '405': "Response405",
            '490': "Response490",
            '500': "Response500",
        }

        return self.api_client.call_api(
            '/api/systems', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
