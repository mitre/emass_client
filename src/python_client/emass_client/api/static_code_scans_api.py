# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt
from typing_extensions import Annotated
from emass_client.models.static_code_request_post_body import StaticCodeRequestPostBody
from emass_client.models.static_code_response_post import StaticCodeResponsePost

from emass_client.api_client import ApiClient, RequestSerialized
from emass_client.api_response import ApiResponse
from emass_client.rest import RESTResponseType


class StaticCodeScansApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_static_code_scans_by_system_id(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        static_code_request_post_body: Annotated[StaticCodeRequestPostBody, Field(description="Example request body for adding static code scans or Clear static code scans")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StaticCodeResponsePost:
        """Upload static code scans or Clear static code scans

        Upload or clear application scan findings into a system's `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application's findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param static_code_request_post_body: Example request body for adding static code scans or Clear static code scans (required)
        :type static_code_request_post_body: StaticCodeRequestPostBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_static_code_scans_by_system_id_serialize(
            system_id=system_id,
            static_code_request_post_body=static_code_request_post_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StaticCodeResponsePost",
            '201': "Created",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '411': "LengthRequired",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_static_code_scans_by_system_id_with_http_info(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        static_code_request_post_body: Annotated[StaticCodeRequestPostBody, Field(description="Example request body for adding static code scans or Clear static code scans")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StaticCodeResponsePost]:
        """Upload static code scans or Clear static code scans

        Upload or clear application scan findings into a system's `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application's findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param static_code_request_post_body: Example request body for adding static code scans or Clear static code scans (required)
        :type static_code_request_post_body: StaticCodeRequestPostBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_static_code_scans_by_system_id_serialize(
            system_id=system_id,
            static_code_request_post_body=static_code_request_post_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StaticCodeResponsePost",
            '201': "Created",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '411': "LengthRequired",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_static_code_scans_by_system_id_without_preload_content(
        self,
        system_id: Annotated[StrictInt, Field(description="**System Id**: The unique system record identifier.")],
        static_code_request_post_body: Annotated[StaticCodeRequestPostBody, Field(description="Example request body for adding static code scans or Clear static code scans")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload static code scans or Clear static code scans

        Upload or clear application scan findings into a system's `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application's findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```

        :param system_id: **System Id**: The unique system record identifier. (required)
        :type system_id: int
        :param static_code_request_post_body: Example request body for adding static code scans or Clear static code scans (required)
        :type static_code_request_post_body: StaticCodeRequestPostBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_static_code_scans_by_system_id_serialize(
            system_id=system_id,
            static_code_request_post_body=static_code_request_post_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StaticCodeResponsePost",
            '201': "Created",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '405': "MethodNotAllowed",
            '411': "LengthRequired",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_static_code_scans_by_system_id_serialize(
        self,
        system_id,
        static_code_request_post_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if static_code_request_post_body is not None:
            _body_params = static_code_request_post_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'mockType', 
            'userId'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/systems/{systemId}/static-code-scans',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


