# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PoamConditionalFields(BaseModel):
    """
    PoamConditionalFields
    """ # noqa: E501
    poc_first_name: Optional[StrictStr] = Field(default=None, description="[Conditional] First name of POC. 100 Characters.", alias="pocFirstName")
    poc_last_name: Optional[StrictStr] = Field(default=None, description="[Conditional] Last name of POC. 100 Characters.", alias="pocLastName")
    poc_email: Optional[StrictStr] = Field(default=None, description="[Conditional] Email address of POC. 100 Characters.", alias="pocEmail")
    poc_phone_number: Optional[StrictStr] = Field(default=None, description="[Conditional] Phone number of POC (area code) ***-**** format. 100 Characters.", alias="pocPhoneNumber")
    severity: Optional[StrictStr] = Field(default=None, description="[Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)")
    scheduled_completion_date: Optional[StrictInt] = Field(default=None, description="[Conditional] Required for ongoing and completed POA&M items. Unix time format.", alias="scheduledCompletionDate")
    completion_date: Optional[StrictInt] = Field(default=None, description="[Conditional] Field is required for completed POA&M items. Unix time format.", alias="completionDate")
    comments: Optional[StrictStr] = Field(default=None, description="[Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters")
    personnel_resources_funded_base_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="personnelResourcesFundedBaseHours")
    personnel_resources_cost_code: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Personnel Resources: Funded Base Hours is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="personnelResourcesCostCode")
    personnel_resources_unfunded_base_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="personnelResourcesUnfundedBaseHours")
    personnel_resources_nonfunding_obstacle: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Personnel Resources: Unfunded Base Hours is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="personnelResourcesNonfundingObstacle")
    personnel_resources_nonfunding_obstacle_other_reason: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if the value \"Other\" is populated for the field Personnel Resources: Non-Funding Obstacle. VA only.", alias="personnelResourcesNonfundingObstacleOtherReason")
    non_personnel_resources_funded_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="nonPersonnelResourcesFundedAmount")
    non_personnel_resources_cost_code: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Non-Personnel Resources: Funded Amount is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="nonPersonnelResourcesCostCode")
    non_personnel_resources_unfunded_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="nonPersonnelResourcesUnfundedAmount")
    non_personnel_resources_nonfunding_obstacle: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Non-Personnel Resources: Unfunded Amount is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="nonPersonnelResourcesNonfundingObstacle")
    non_personnel_resources_nonfunding_obstacle_other_reason: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if the value \"Other\" is populated for the field Non-Personnel Resources: Non-Funding Obstacle. VA only.", alias="nonPersonnelResourcesNonfundingObstacleOtherReason")
    __properties: ClassVar[List[str]] = ["pocFirstName", "pocLastName", "pocEmail", "pocPhoneNumber", "severity", "scheduledCompletionDate", "completionDate", "comments", "personnelResourcesFundedBaseHours", "personnelResourcesCostCode", "personnelResourcesUnfundedBaseHours", "personnelResourcesNonfundingObstacle", "personnelResourcesNonfundingObstacleOtherReason", "nonPersonnelResourcesFundedAmount", "nonPersonnelResourcesCostCode", "nonPersonnelResourcesUnfundedAmount", "nonPersonnelResourcesNonfundingObstacle", "nonPersonnelResourcesNonfundingObstacleOtherReason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoamConditionalFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if scheduled_completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled_completion_date is None and "scheduled_completion_date" in self.model_fields_set:
            _dict['scheduledCompletionDate'] = None

        # set to None if personnel_resources_funded_base_hours (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_funded_base_hours is None and "personnel_resources_funded_base_hours" in self.model_fields_set:
            _dict['personnelResourcesFundedBaseHours'] = None

        # set to None if personnel_resources_cost_code (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_cost_code is None and "personnel_resources_cost_code" in self.model_fields_set:
            _dict['personnelResourcesCostCode'] = None

        # set to None if personnel_resources_unfunded_base_hours (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_unfunded_base_hours is None and "personnel_resources_unfunded_base_hours" in self.model_fields_set:
            _dict['personnelResourcesUnfundedBaseHours'] = None

        # set to None if personnel_resources_nonfunding_obstacle (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_nonfunding_obstacle is None and "personnel_resources_nonfunding_obstacle" in self.model_fields_set:
            _dict['personnelResourcesNonfundingObstacle'] = None

        # set to None if personnel_resources_nonfunding_obstacle_other_reason (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_nonfunding_obstacle_other_reason is None and "personnel_resources_nonfunding_obstacle_other_reason" in self.model_fields_set:
            _dict['personnelResourcesNonfundingObstacleOtherReason'] = None

        # set to None if non_personnel_resources_funded_amount (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_funded_amount is None and "non_personnel_resources_funded_amount" in self.model_fields_set:
            _dict['nonPersonnelResourcesFundedAmount'] = None

        # set to None if non_personnel_resources_cost_code (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_cost_code is None and "non_personnel_resources_cost_code" in self.model_fields_set:
            _dict['nonPersonnelResourcesCostCode'] = None

        # set to None if non_personnel_resources_unfunded_amount (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_unfunded_amount is None and "non_personnel_resources_unfunded_amount" in self.model_fields_set:
            _dict['nonPersonnelResourcesUnfundedAmount'] = None

        # set to None if non_personnel_resources_nonfunding_obstacle (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_nonfunding_obstacle is None and "non_personnel_resources_nonfunding_obstacle" in self.model_fields_set:
            _dict['nonPersonnelResourcesNonfundingObstacle'] = None

        # set to None if non_personnel_resources_nonfunding_obstacle_other_reason (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_nonfunding_obstacle_other_reason is None and "non_personnel_resources_nonfunding_obstacle_other_reason" in self.model_fields_set:
            _dict['nonPersonnelResourcesNonfundingObstacleOtherReason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoamConditionalFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pocFirstName": obj.get("pocFirstName"),
            "pocLastName": obj.get("pocLastName"),
            "pocEmail": obj.get("pocEmail"),
            "pocPhoneNumber": obj.get("pocPhoneNumber"),
            "severity": obj.get("severity"),
            "scheduledCompletionDate": obj.get("scheduledCompletionDate"),
            "completionDate": obj.get("completionDate"),
            "comments": obj.get("comments"),
            "personnelResourcesFundedBaseHours": obj.get("personnelResourcesFundedBaseHours"),
            "personnelResourcesCostCode": obj.get("personnelResourcesCostCode"),
            "personnelResourcesUnfundedBaseHours": obj.get("personnelResourcesUnfundedBaseHours"),
            "personnelResourcesNonfundingObstacle": obj.get("personnelResourcesNonfundingObstacle"),
            "personnelResourcesNonfundingObstacleOtherReason": obj.get("personnelResourcesNonfundingObstacleOtherReason"),
            "nonPersonnelResourcesFundedAmount": obj.get("nonPersonnelResourcesFundedAmount"),
            "nonPersonnelResourcesCostCode": obj.get("nonPersonnelResourcesCostCode"),
            "nonPersonnelResourcesUnfundedAmount": obj.get("nonPersonnelResourcesUnfundedAmount"),
            "nonPersonnelResourcesNonfundingObstacle": obj.get("nonPersonnelResourcesNonfundingObstacle"),
            "nonPersonnelResourcesNonfundingObstacleOtherReason": obj.get("nonPersonnelResourcesNonfundingObstacleOtherReason")
        })
        return _obj


