# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MilestonesGet(BaseModel):
    """
    MilestonesGet
    """ # noqa: E501
    system_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique eMASS system identifier.", alias="systemId")
    milestone_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique item identifier.", alias="milestoneId")
    poam_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique item identifier.", alias="poamId")
    description: Optional[StrictStr] = Field(default=None, description="[Required] Include milestone description.")
    scheduled_completion_date: Optional[StrictInt] = Field(default=None, description="[Required] Required for ongoing and completed POA&M items. Unix time format.", alias="scheduledCompletionDate")
    review_status: Optional[StrictStr] = Field(default=None, description="[Read-Only] Values include the following options: (Not Approved,Under Review,Approved).", alias="reviewStatus")
    created_by: Optional[StrictStr] = Field(default=None, description="[Read-Only] Last, first name of the user that created the milestone.", alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Timestamp representing when the milestone was entered into the database.", alias="createdDate")
    __properties: ClassVar[List[str]] = ["systemId", "milestoneId", "poamId", "description", "scheduledCompletionDate", "reviewStatus", "createdBy", "createdDate"]

    @field_validator('review_status')
    def review_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Not Approved', 'Under Review', 'Approved']):
            raise ValueError("must be one of enum values ('Not Approved', 'Under Review', 'Approved')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MilestonesGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if review_status (nullable) is None
        # and model_fields_set contains the field
        if self.review_status is None and "review_status" in self.model_fields_set:
            _dict['reviewStatus'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['createdBy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MilestonesGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "systemId": obj.get("systemId"),
            "milestoneId": obj.get("milestoneId"),
            "poamId": obj.get("poamId"),
            "description": obj.get("description"),
            "scheduledCompletionDate": obj.get("scheduledCompletionDate"),
            "reviewStatus": obj.get("reviewStatus"),
            "createdBy": obj.get("createdBy"),
            "createdDate": obj.get("createdDate")
        })
        return _obj


