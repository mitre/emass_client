# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CacGet(BaseModel):
    """
    CacGet
    """ # noqa: E501
    system_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique eMASS system identifier.", alias="systemId")
    control_acronym: Optional[StrictStr] = Field(default=None, description="[Required] System acronym name.", alias="controlAcronym")
    compliance_status: Optional[StrictStr] = Field(default=None, description="[Read-only] Compliance status of the control.", alias="complianceStatus")
    current_stage_name: Optional[StrictStr] = Field(default=None, description="[Read-Only] Role in current stage.", alias="currentStageName")
    current_stage: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = Field(default=None, description="[Read-Only] Current step in the Control Approval Chain.", alias="currentStage")
    total_stages: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = Field(default=None, description="[Read-Only] Total number of steps in Control Approval Chain.", alias="totalStages")
    comments: Optional[StrictStr] = Field(default=None, description="[Conditional] Control Approval Chain comments - 2000 Characters.")
    __properties: ClassVar[List[str]] = ["systemId", "controlAcronym", "complianceStatus", "currentStageName", "currentStage", "totalStages", "comments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CacGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if compliance_status (nullable) is None
        # and model_fields_set contains the field
        if self.compliance_status is None and "compliance_status" in self.model_fields_set:
            _dict['complianceStatus'] = None

        # set to None if current_stage_name (nullable) is None
        # and model_fields_set contains the field
        if self.current_stage_name is None and "current_stage_name" in self.model_fields_set:
            _dict['currentStageName'] = None

        # set to None if current_stage (nullable) is None
        # and model_fields_set contains the field
        if self.current_stage is None and "current_stage" in self.model_fields_set:
            _dict['currentStage'] = None

        # set to None if total_stages (nullable) is None
        # and model_fields_set contains the field
        if self.total_stages is None and "total_stages" in self.model_fields_set:
            _dict['totalStages'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CacGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "systemId": obj.get("systemId"),
            "controlAcronym": obj.get("controlAcronym"),
            "complianceStatus": obj.get("complianceStatus"),
            "currentStageName": obj.get("currentStageName"),
            "currentStage": obj.get("currentStage"),
            "totalStages": obj.get("totalStages"),
            "comments": obj.get("comments")
        })
        return _obj


