# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CmmcGet(BaseModel):
    """
    CmmcGet
    """ # noqa: E501
    operation: Optional[StrictStr] = Field(default=None, description="[Read-Only] Indicates the action that should be taken on the assessment record since the provided sinceDate.")
    hq_organization_name: Optional[StrictStr] = Field(default=None, description="[Read-Only] The name of the DIB Company.", alias="hqOrganizationName")
    uei: Optional[StrictStr] = Field(default=None, description="[Read-Only] The Unique Entity Identifier assigned to the DIB Company.")
    osc_name: Optional[StrictStr] = Field(default=None, description="[Read-Only] The name of the Organization Seeking Certification.", alias="oscName")
    highest_level_owner_cage_code: Optional[StrictStr] = Field(default=None, description="[Read-Only] Identifies the highest-level CAGE Code associated with a given organization.", alias="highestLevelOwnerCageCode")
    cage_codes_in_scope: Optional[StrictStr] = Field(default=None, description="[Read-Only] The five position code(s) associated with the Organization Seeking Certification (OSC).", alias="cageCodesInScope")
    number_of_employees: Optional[StrictInt] = Field(default=None, description="[Read-Only] The number of employees affiliated with the Organization Seeking Certification.", alias="numberOfEmployees")
    scope: Optional[StrictStr] = Field(default=None, description="[Read-Only] The scope of the OSC assessment.")
    scope_description: Optional[StrictStr] = Field(default=None, description="[Read-Only] Brief description of the scope of the OSC assessment", alias="scopeDescription")
    assessment_standard: Optional[StrictStr] = Field(default=None, description="[Read-Only] Version of the CMMC Model used as part of the assessment.", alias="assessmentStandard")
    assessment_id: Optional[StrictStr] = Field(default=None, description="[Read-Only] Unique identifier for the assessment/certificate.", alias="assessmentId")
    cmmc_uid: Optional[StrictStr] = Field(default=None, description="[Read-Only] Identifies the unique ID that is associated with a given CMMC certification for an organization.", alias="cmmcUid")
    overall_score: Optional[StrictInt] = Field(default=None, description="[Read-Only] Identifies the overall calculated score for the assessment based on the assigned values to each applicable security requirement.", alias="overallScore")
    cmmc_status: Optional[StrictStr] = Field(default=None, description="[Read-Only] The status of the CMMC certification.", alias="cmmcStatus")
    cmmc_status_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Date of the CMMC status.", alias="cmmcStatusDate")
    cmmc_status_expiration_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Expiration date of the CMMC status.", alias="cmmcStatusExpirationDate")
    __properties: ClassVar[List[str]] = ["operation", "hqOrganizationName", "uei", "oscName", "highestLevelOwnerCageCode", "cageCodesInScope", "numberOfEmployees", "scope", "scopeDescription", "assessmentStandard", "assessmentId", "cmmcUid", "overallScore", "cmmcStatus", "cmmcStatusDate", "cmmcStatusExpirationDate"]

    @field_validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADDED', 'UPDATED', 'DELETED']):
            raise ValueError("must be one of enum values ('ADDED', 'UPDATED', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CmmcGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if operation (nullable) is None
        # and model_fields_set contains the field
        if self.operation is None and "operation" in self.model_fields_set:
            _dict['operation'] = None

        # set to None if hq_organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.hq_organization_name is None and "hq_organization_name" in self.model_fields_set:
            _dict['hqOrganizationName'] = None

        # set to None if uei (nullable) is None
        # and model_fields_set contains the field
        if self.uei is None and "uei" in self.model_fields_set:
            _dict['uei'] = None

        # set to None if osc_name (nullable) is None
        # and model_fields_set contains the field
        if self.osc_name is None and "osc_name" in self.model_fields_set:
            _dict['oscName'] = None

        # set to None if highest_level_owner_cage_code (nullable) is None
        # and model_fields_set contains the field
        if self.highest_level_owner_cage_code is None and "highest_level_owner_cage_code" in self.model_fields_set:
            _dict['highestLevelOwnerCageCode'] = None

        # set to None if cage_codes_in_scope (nullable) is None
        # and model_fields_set contains the field
        if self.cage_codes_in_scope is None and "cage_codes_in_scope" in self.model_fields_set:
            _dict['cageCodesInScope'] = None

        # set to None if number_of_employees (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_employees is None and "number_of_employees" in self.model_fields_set:
            _dict['numberOfEmployees'] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict['scope'] = None

        # set to None if scope_description (nullable) is None
        # and model_fields_set contains the field
        if self.scope_description is None and "scope_description" in self.model_fields_set:
            _dict['scopeDescription'] = None

        # set to None if assessment_standard (nullable) is None
        # and model_fields_set contains the field
        if self.assessment_standard is None and "assessment_standard" in self.model_fields_set:
            _dict['assessmentStandard'] = None

        # set to None if assessment_id (nullable) is None
        # and model_fields_set contains the field
        if self.assessment_id is None and "assessment_id" in self.model_fields_set:
            _dict['assessmentId'] = None

        # set to None if cmmc_uid (nullable) is None
        # and model_fields_set contains the field
        if self.cmmc_uid is None and "cmmc_uid" in self.model_fields_set:
            _dict['cmmcUid'] = None

        # set to None if cmmc_status (nullable) is None
        # and model_fields_set contains the field
        if self.cmmc_status is None and "cmmc_status" in self.model_fields_set:
            _dict['cmmcStatus'] = None

        # set to None if cmmc_status_date (nullable) is None
        # and model_fields_set contains the field
        if self.cmmc_status_date is None and "cmmc_status_date" in self.model_fields_set:
            _dict['cmmcStatusDate'] = None

        # set to None if cmmc_status_expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.cmmc_status_expiration_date is None and "cmmc_status_expiration_date" in self.model_fields_set:
            _dict['cmmcStatusExpirationDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CmmcGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": obj.get("operation"),
            "hqOrganizationName": obj.get("hqOrganizationName"),
            "uei": obj.get("uei"),
            "oscName": obj.get("oscName"),
            "highestLevelOwnerCageCode": obj.get("highestLevelOwnerCageCode"),
            "cageCodesInScope": obj.get("cageCodesInScope"),
            "numberOfEmployees": obj.get("numberOfEmployees"),
            "scope": obj.get("scope"),
            "scopeDescription": obj.get("scopeDescription"),
            "assessmentStandard": obj.get("assessmentStandard"),
            "assessmentId": obj.get("assessmentId"),
            "cmmcUid": obj.get("cmmcUid"),
            "overallScore": obj.get("overallScore"),
            "cmmcStatus": obj.get("cmmcStatus"),
            "cmmcStatusDate": obj.get("cmmcStatusDate"),
            "cmmcStatusExpirationDate": obj.get("cmmcStatusExpirationDate")
        })
        return _obj


