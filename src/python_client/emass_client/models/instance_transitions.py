# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InstanceTransitions(BaseModel):
    """
    InstanceTransitions
    """ # noqa: E501
    comments: Optional[StrictStr] = Field(default=None, description="[Read-Only] Comments entered by the user when performing the transition.")
    created_by: Optional[StrictStr] = Field(default=None, description="[Read-Only] User that performed the workflow transition.", alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Date the workflow instance or the workflow transition was created.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="[Read-Only] Description of the stage transition. This matches the action dropdown that appears for PAC users.")
    end_stage: Optional[StrictStr] = Field(default=None, description="[Read-Only] The landing stage that is active after performing a transition.", alias="endStage")
    start_stage: Optional[StrictStr] = Field(default=None, description="[Read-Only] The beginning stage that is active before performing a transition.", alias="startStage")
    __properties: ClassVar[List[str]] = ["comments", "createdBy", "createdDate", "description", "endStage", "startStage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceTransitions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['createdBy'] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict['createdDate'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if end_stage (nullable) is None
        # and model_fields_set contains the field
        if self.end_stage is None and "end_stage" in self.model_fields_set:
            _dict['endStage'] = None

        # set to None if start_stage (nullable) is None
        # and model_fields_set contains the field
        if self.start_stage is None and "start_stage" in self.model_fields_set:
            _dict['startStage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceTransitions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "createdBy": obj.get("createdBy"),
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "endStage": obj.get("endStage"),
            "startStage": obj.get("startStage")
        })
        return _obj


