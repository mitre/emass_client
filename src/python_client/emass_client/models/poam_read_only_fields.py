# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PoamReadOnlyFields(BaseModel):
    """
    PoamReadOnlyFields
    """ # noqa: E501
    condition_id: Optional[StrictStr] = Field(default=None, description="[Read-Only] Unique identifier of the authorization term/condition linked to the POA&M Item.", alias="conditionId")
    is_inherited: Optional[StrictBool] = Field(default=None, description="[Read-only] Indicates whether a test result is inherited.", alias="isInherited")
    cci: Optional[StrictStr] = Field(default=None, description="[Read-Only] CCI associated with POA&M Item.")
    review_status: Optional[StrictStr] = Field(default=None, description="[Read-Only] Values include the following options: (Not Approved,Under Review,Approved)", alias="reviewStatus")
    created_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Timestamp representing when the POA&M Item was entered into the database.", alias="createdDate")
    extension_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Value returned for a POA&M Item with review status \"Approved\" and has a milestone with a scheduled completion date that extends beyond the POA&M Item's scheduled completion date. ", alias="extensionDate")
    pending_extension_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Value returned for a POA&M Item with a review status of \"Approved\" and an unapproved milestone with a scheduled completion date that extends beyond the POA&M Item's scheduled completion date. ", alias="pendingExtensionDate")
    artifacts: Optional[StrictStr] = Field(default=None, description="[Read-Only] Lists the filenames of any artifact files attached to the POA&M Item. Multiple values are separated by “; ”.")
    __properties: ClassVar[List[str]] = ["conditionId", "isInherited", "cci", "reviewStatus", "createdDate", "extensionDate", "pendingExtensionDate", "artifacts"]

    @field_validator('review_status')
    def review_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Not Approved', 'Under Review', 'Approved']):
            raise ValueError("must be one of enum values ('Not Approved', 'Under Review', 'Approved')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoamReadOnlyFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if condition_id (nullable) is None
        # and model_fields_set contains the field
        if self.condition_id is None and "condition_id" in self.model_fields_set:
            _dict['conditionId'] = None

        # set to None if is_inherited (nullable) is None
        # and model_fields_set contains the field
        if self.is_inherited is None and "is_inherited" in self.model_fields_set:
            _dict['isInherited'] = None

        # set to None if cci (nullable) is None
        # and model_fields_set contains the field
        if self.cci is None and "cci" in self.model_fields_set:
            _dict['cci'] = None

        # set to None if review_status (nullable) is None
        # and model_fields_set contains the field
        if self.review_status is None and "review_status" in self.model_fields_set:
            _dict['reviewStatus'] = None

        # set to None if extension_date (nullable) is None
        # and model_fields_set contains the field
        if self.extension_date is None and "extension_date" in self.model_fields_set:
            _dict['extensionDate'] = None

        # set to None if pending_extension_date (nullable) is None
        # and model_fields_set contains the field
        if self.pending_extension_date is None and "pending_extension_date" in self.model_fields_set:
            _dict['pendingExtensionDate'] = None

        # set to None if artifacts (nullable) is None
        # and model_fields_set contains the field
        if self.artifacts is None and "artifacts" in self.model_fields_set:
            _dict['artifacts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoamReadOnlyFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditionId": obj.get("conditionId"),
            "isInherited": obj.get("isInherited"),
            "cci": obj.get("cci"),
            "reviewStatus": obj.get("reviewStatus"),
            "createdDate": obj.get("createdDate"),
            "extensionDate": obj.get("extensionDate"),
            "pendingExtensionDate": obj.get("pendingExtensionDate"),
            "artifacts": obj.get("artifacts")
        })
        return _obj


