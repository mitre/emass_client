# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PoamOptionalFields(BaseModel):
    """
    PoamOptionalFields
    """ # noqa: E501
    external_uid: Optional[StrictStr] = Field(default=None, description="[Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.", alias="externalUid")
    control_acronym: Optional[StrictStr] = Field(default=None, description="[Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined.", alias="controlAcronym")
    assessment_procedure: Optional[StrictStr] = Field(default=None, description="[Optional] The Security Control Assessment Procedure being associated with the POA&M Item.", alias="assessmentProcedure")
    security_checks: Optional[StrictStr] = Field(default=None, description="[Optional] Security Checks that are associated with the POA&M.", alias="securityChecks")
    raw_severity: Optional[StrictStr] = Field(default=None, description="[Optional] Scan vulnerability ratting Values include the following options: (Very Low, Low, Moderate,High,Very High)", alias="rawSeverity")
    relevance_of_threat: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)", alias="relevanceOfThreat")
    likelihood: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    impact: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    impact_description: Optional[StrictStr] = Field(default=None, description="[Optional] Include description of Security Control's impact.", alias="impactDescription")
    residual_risk_level: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)", alias="residualRiskLevel")
    recommendations: Optional[StrictStr] = Field(default=None, description="[Optional] Include recommendations. Character Limit = 2,000.")
    mitigations: Optional[StrictStr] = Field(default=None, description="[Optional] Include mitigation explanation. 2000 Characters.")
    resulting_residual_risk_level_after_proposed_mitigations: Optional[StrictStr] = Field(default=None, description="[Optional] Indicate the risk level expected after any proposed mitigations are implemented. Proposed mitigations should be appropriately documented as POA&M milestones. Navy only.", alias="resultingResidualRiskLevelAfterProposedMitigations")
    predisposing_conditions: Optional[StrictStr] = Field(default=None, description="[Optional] A predisposing condition is a condition existing within an organization, a mission or business process, enterprise architecture, information system/PIT, or environment of operation, which affects (i.e., increases or decreases) the likelihood that threat events, once initiated, result in adverse impacts. Navy only.", alias="predisposingConditions")
    threat_description: Optional[StrictStr] = Field(default=None, description="[Optional] Describe the identified threat(s) and relevance to the information system. Navy only.", alias="threatDescription")
    devices_affected: Optional[StrictStr] = Field(default=None, description="[Optional] List any affected devices by hostname. If all devices in the information system are affected, state 'system' or 'all'. Navy only", alias="devicesAffected")
    __properties: ClassVar[List[str]] = ["externalUid", "controlAcronym", "assessmentProcedure", "securityChecks", "rawSeverity", "relevanceOfThreat", "likelihood", "impact", "impactDescription", "residualRiskLevel", "recommendations", "mitigations", "resultingResidualRiskLevelAfterProposedMitigations", "predisposingConditions", "threatDescription", "devicesAffected"]

    @field_validator('resulting_residual_risk_level_after_proposed_mitigations')
    def resulting_residual_risk_level_after_proposed_mitigations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoamOptionalFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if resulting_residual_risk_level_after_proposed_mitigations (nullable) is None
        # and model_fields_set contains the field
        if self.resulting_residual_risk_level_after_proposed_mitigations is None and "resulting_residual_risk_level_after_proposed_mitigations" in self.model_fields_set:
            _dict['resultingResidualRiskLevelAfterProposedMitigations'] = None

        # set to None if predisposing_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.predisposing_conditions is None and "predisposing_conditions" in self.model_fields_set:
            _dict['predisposingConditions'] = None

        # set to None if threat_description (nullable) is None
        # and model_fields_set contains the field
        if self.threat_description is None and "threat_description" in self.model_fields_set:
            _dict['threatDescription'] = None

        # set to None if devices_affected (nullable) is None
        # and model_fields_set contains the field
        if self.devices_affected is None and "devices_affected" in self.model_fields_set:
            _dict['devicesAffected'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoamOptionalFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalUid": obj.get("externalUid"),
            "controlAcronym": obj.get("controlAcronym"),
            "assessmentProcedure": obj.get("assessmentProcedure"),
            "securityChecks": obj.get("securityChecks"),
            "rawSeverity": obj.get("rawSeverity"),
            "relevanceOfThreat": obj.get("relevanceOfThreat"),
            "likelihood": obj.get("likelihood"),
            "impact": obj.get("impact"),
            "impactDescription": obj.get("impactDescription"),
            "residualRiskLevel": obj.get("residualRiskLevel"),
            "recommendations": obj.get("recommendations"),
            "mitigations": obj.get("mitigations"),
            "resultingResidualRiskLevelAfterProposedMitigations": obj.get("resultingResidualRiskLevelAfterProposedMitigations"),
            "predisposingConditions": obj.get("predisposingConditions"),
            "threatDescription": obj.get("threatDescription"),
            "devicesAffected": obj.get("devicesAffected")
        })
        return _obj


