# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HwBaselineResponseGetDataInner(BaseModel):
    """
    HwBaselineResponseGetDataInner
    """ # noqa: E501
    system_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique eMASS system identifier.", alias="systemId")
    hardware_id: Optional[StrictStr] = Field(default=None, description="[Read-Only] GUID identifying the specific hardware asset. Required for a PUT call.", alias="hardwareId")
    asset_name: Optional[StrictStr] = Field(default=None, description="[Required] Name of the hardware asset.", alias="assetName")
    component_type: Optional[StrictStr] = Field(default=None, description="[Optional] Type of the hardware asset.", alias="componentType")
    nickname: Optional[StrictStr] = Field(default=None, description="[Optional] Nickname of the hardware asset.")
    asset_ip_address: Optional[StrictStr] = Field(default=None, description="[Optional] IP address of the hardware asset.", alias="assetIpAddress")
    public_facing: Optional[StrictBool] = Field(default=None, description="[Optional] Public facing is defined as any asset that is accessible from a commercial connection.", alias="publicFacing")
    virtual_asset: Optional[StrictBool] = Field(default=None, description="[Optional] Determine if this is a virtual hardware asset.", alias="virtualAsset")
    manufacturer: Optional[StrictStr] = Field(default=None, description="[Optional] Manufacturer of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden.")
    model_number: Optional[StrictStr] = Field(default=None, description="[Optional] Model number of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden", alias="modelNumber")
    serial_number: Optional[StrictStr] = Field(default=None, description="[Optional] Serial number of the hardware asset. Populated with \"Virtual\" by default if Virtual Asset is true, however this can be overridden.", alias="serialNumber")
    os_ios_fw_version: Optional[StrictStr] = Field(default=None, description="[Optional] Operating System, IOS, or Firmware version of the hardware asset.", alias="OsIosFwVersion")
    memory_size_type: Optional[StrictStr] = Field(default=None, description="[Optional] Memory size / type of the hardware asset.", alias="memorySizeType")
    location: Optional[StrictStr] = Field(default=None, description="[Optional] Location of the hardware asset.")
    approval_status: Optional[StrictStr] = Field(default=None, description="[Optional] Approval status of the hardware asset.", alias="approvalStatus")
    critical_asset: Optional[StrictBool] = Field(default=None, description="[Optional] Indicates whether the asset is a critical information system asset.", alias="criticalAsset")
    public_facing_fqdn: Optional[StrictStr] = Field(default=None, description="[Conditional] Public facing FQDN. Only applicable if Public Facing is set to true.", alias="publicFacingFqdn")
    public_facing_ip_address: Optional[StrictStr] = Field(default=None, description="[Conditional] Public facing IP address. Only applicable if Public Facing is set to true.", alias="publicFacingIpAddress")
    public_facing_urls: Optional[StrictStr] = Field(default=None, description="[Conditional] Public facing URLs. Only applicable if Public Facing is set to true.", alias="publicFacingUrls")
    __properties: ClassVar[List[str]] = ["systemId", "hardwareId", "assetName", "componentType", "nickname", "assetIpAddress", "publicFacing", "virtualAsset", "manufacturer", "modelNumber", "serialNumber", "OsIosFwVersion", "memorySizeType", "location", "approvalStatus", "criticalAsset", "publicFacingFqdn", "publicFacingIpAddress", "publicFacingUrls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HwBaselineResponseGetDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if hardware_id (nullable) is None
        # and model_fields_set contains the field
        if self.hardware_id is None and "hardware_id" in self.model_fields_set:
            _dict['hardwareId'] = None

        # set to None if component_type (nullable) is None
        # and model_fields_set contains the field
        if self.component_type is None and "component_type" in self.model_fields_set:
            _dict['componentType'] = None

        # set to None if nickname (nullable) is None
        # and model_fields_set contains the field
        if self.nickname is None and "nickname" in self.model_fields_set:
            _dict['nickname'] = None

        # set to None if asset_ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.asset_ip_address is None and "asset_ip_address" in self.model_fields_set:
            _dict['assetIpAddress'] = None

        # set to None if public_facing (nullable) is None
        # and model_fields_set contains the field
        if self.public_facing is None and "public_facing" in self.model_fields_set:
            _dict['publicFacing'] = None

        # set to None if virtual_asset (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_asset is None and "virtual_asset" in self.model_fields_set:
            _dict['virtualAsset'] = None

        # set to None if manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturer is None and "manufacturer" in self.model_fields_set:
            _dict['manufacturer'] = None

        # set to None if model_number (nullable) is None
        # and model_fields_set contains the field
        if self.model_number is None and "model_number" in self.model_fields_set:
            _dict['modelNumber'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serialNumber'] = None

        # set to None if os_ios_fw_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_ios_fw_version is None and "os_ios_fw_version" in self.model_fields_set:
            _dict['OsIosFwVersion'] = None

        # set to None if memory_size_type (nullable) is None
        # and model_fields_set contains the field
        if self.memory_size_type is None and "memory_size_type" in self.model_fields_set:
            _dict['memorySizeType'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if approval_status (nullable) is None
        # and model_fields_set contains the field
        if self.approval_status is None and "approval_status" in self.model_fields_set:
            _dict['approvalStatus'] = None

        # set to None if critical_asset (nullable) is None
        # and model_fields_set contains the field
        if self.critical_asset is None and "critical_asset" in self.model_fields_set:
            _dict['criticalAsset'] = None

        # set to None if public_facing_fqdn (nullable) is None
        # and model_fields_set contains the field
        if self.public_facing_fqdn is None and "public_facing_fqdn" in self.model_fields_set:
            _dict['publicFacingFqdn'] = None

        # set to None if public_facing_ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.public_facing_ip_address is None and "public_facing_ip_address" in self.model_fields_set:
            _dict['publicFacingIpAddress'] = None

        # set to None if public_facing_urls (nullable) is None
        # and model_fields_set contains the field
        if self.public_facing_urls is None and "public_facing_urls" in self.model_fields_set:
            _dict['publicFacingUrls'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HwBaselineResponseGetDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "systemId": obj.get("systemId"),
            "hardwareId": obj.get("hardwareId"),
            "assetName": obj.get("assetName"),
            "componentType": obj.get("componentType"),
            "nickname": obj.get("nickname"),
            "assetIpAddress": obj.get("assetIpAddress"),
            "publicFacing": obj.get("publicFacing"),
            "virtualAsset": obj.get("virtualAsset"),
            "manufacturer": obj.get("manufacturer"),
            "modelNumber": obj.get("modelNumber"),
            "serialNumber": obj.get("serialNumber"),
            "OsIosFwVersion": obj.get("OsIosFwVersion"),
            "memorySizeType": obj.get("memorySizeType"),
            "location": obj.get("location"),
            "approvalStatus": obj.get("approvalStatus"),
            "criticalAsset": obj.get("criticalAsset"),
            "publicFacingFqdn": obj.get("publicFacingFqdn"),
            "publicFacingIpAddress": obj.get("publicFacingIpAddress"),
            "publicFacingUrls": obj.get("publicFacingUrls")
        })
        return _obj


