# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from emass_client.models.instance_transitions import InstanceTransitions
from typing import Optional, Set
from typing_extensions import Self

class WorkflowInstanceGet(BaseModel):
    """
    WorkflowInstanceGet
    """ # noqa: E501
    workflow_uid: Optional[StrictStr] = Field(default=None, description="[Read-Only] Unique workflow definition identifier.", alias="workflowUid")
    system_id: Optional[StrictInt] = Field(default=None, description="[Read-only] Unique system record identifier.", alias="systemId")
    system_name: Optional[StrictStr] = Field(default=None, description="[Read-Only] The system name.", alias="systemName")
    workflow_instance_id: Optional[StrictInt] = Field(default=None, description="[Read-Only] Unique workflow instance identifier.", alias="workflowInstanceId")
    package_name: Optional[StrictStr] = Field(default=None, description="[Read-Only] The package name.", alias="packageName")
    created_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Date the workflow instance or the workflow transition was created.", alias="createdDate")
    last_edited_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Date the workflow was last acted on.", alias="lastEditedDate")
    last_edited_by: Optional[StrictStr] = Field(default=None, description="[Read-Only] User that last acted on the workflow.", alias="lastEditedBy")
    workflow: Optional[StrictStr] = Field(default=None, description="[Read-Only] The workflow type.")
    version: Optional[StrictInt] = Field(default=None, description="[Read-Only] Version of the workflow definition.")
    current_stage: Optional[StrictStr] = Field(default=None, description="[Read-Only] Name of the current stage.", alias="currentStage")
    transitions: Optional[List[InstanceTransitions]] = None
    __properties: ClassVar[List[str]] = ["workflowUid", "systemId", "systemName", "workflowInstanceId", "packageName", "createdDate", "lastEditedDate", "lastEditedBy", "workflow", "version", "currentStage", "transitions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowInstanceGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transitions (list)
        _items = []
        if self.transitions:
            for _item_transitions in self.transitions:
                if _item_transitions:
                    _items.append(_item_transitions.to_dict())
            _dict['transitions'] = _items
        # set to None if workflow_uid (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_uid is None and "workflow_uid" in self.model_fields_set:
            _dict['workflowUid'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_name (nullable) is None
        # and model_fields_set contains the field
        if self.system_name is None and "system_name" in self.model_fields_set:
            _dict['systemName'] = None

        # set to None if workflow_instance_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_instance_id is None and "workflow_instance_id" in self.model_fields_set:
            _dict['workflowInstanceId'] = None

        # set to None if package_name (nullable) is None
        # and model_fields_set contains the field
        if self.package_name is None and "package_name" in self.model_fields_set:
            _dict['packageName'] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict['createdDate'] = None

        # set to None if last_edited_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_edited_date is None and "last_edited_date" in self.model_fields_set:
            _dict['lastEditedDate'] = None

        # set to None if last_edited_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_edited_by is None and "last_edited_by" in self.model_fields_set:
            _dict['lastEditedBy'] = None

        # set to None if workflow (nullable) is None
        # and model_fields_set contains the field
        if self.workflow is None and "workflow" in self.model_fields_set:
            _dict['workflow'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if current_stage (nullable) is None
        # and model_fields_set contains the field
        if self.current_stage is None and "current_stage" in self.model_fields_set:
            _dict['currentStage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowInstanceGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workflowUid": obj.get("workflowUid"),
            "systemId": obj.get("systemId"),
            "systemName": obj.get("systemName"),
            "workflowInstanceId": obj.get("workflowInstanceId"),
            "packageName": obj.get("packageName"),
            "createdDate": obj.get("createdDate"),
            "lastEditedDate": obj.get("lastEditedDate"),
            "lastEditedBy": obj.get("lastEditedBy"),
            "workflow": obj.get("workflow"),
            "version": obj.get("version"),
            "currentStage": obj.get("currentStage"),
            "transitions": [InstanceTransitions.from_dict(_item) for _item in obj["transitions"]] if obj.get("transitions") is not None else None
        })
        return _obj


