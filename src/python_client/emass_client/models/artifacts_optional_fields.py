# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArtifactsOptionalFields(BaseModel):
    """
    ArtifactsOptionalFields
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="[Optional] Artifact name. Character Limit = 100.")
    description: Optional[StrictStr] = Field(default=None, description="[Optional] Artifact description. 10,000 Characters.")
    reference_page_number: Optional[StrictStr] = Field(default=None, description="[Optional] Artifact reference page number. 50 Characters.", alias="referencePageNumber")
    assessment_procedures: Optional[StrictStr] = Field(default=None, description="[Optional] The Security Control Assessment Procedure being associated with the artifact.", alias="assessmentProcedures")
    controls: Optional[StrictStr] = Field(default=None, description="[Optional] Control acronym associated with the artifact. NIST SP 800-53 Revision 4 defined.")
    expiration_date: Optional[StrictInt] = Field(default=None, description="[Optional] Date Artifact expires and requires review. In Unix Date format.", alias="expirationDate")
    last_reviewed_date: Optional[StrictInt] = Field(default=None, description="[Optional] Date Artifact was last reviewed. Unix time format.", alias="lastReviewedDate")
    signed_date: Optional[StrictInt] = Field(default=None, description="[Optional] Date artifact was signed. Unix time format.", alias="signedDate")
    __properties: ClassVar[List[str]] = ["name", "description", "referencePageNumber", "assessmentProcedures", "controls", "expirationDate", "lastReviewedDate", "signedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArtifactsOptionalFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if reference_page_number (nullable) is None
        # and model_fields_set contains the field
        if self.reference_page_number is None and "reference_page_number" in self.model_fields_set:
            _dict['referencePageNumber'] = None

        # set to None if controls (nullable) is None
        # and model_fields_set contains the field
        if self.controls is None and "controls" in self.model_fields_set:
            _dict['controls'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expirationDate'] = None

        # set to None if last_reviewed_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_reviewed_date is None and "last_reviewed_date" in self.model_fields_set:
            _dict['lastReviewedDate'] = None

        # set to None if signed_date (nullable) is None
        # and model_fields_set contains the field
        if self.signed_date is None and "signed_date" in self.model_fields_set:
            _dict['signedDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArtifactsOptionalFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "referencePageNumber": obj.get("referencePageNumber"),
            "assessmentProcedures": obj.get("assessmentProcedures"),
            "controls": obj.get("controls"),
            "expirationDate": obj.get("expirationDate"),
            "lastReviewedDate": obj.get("lastReviewedDate"),
            "signedDate": obj.get("signedDate")
        })
        return _obj


