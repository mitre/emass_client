# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from emass_client.models.stage import Stage
from typing import Optional, Set
from typing_extensions import Self

class WorkflowDefinitionGet(BaseModel):
    """
    WorkflowDefinitionGet
    """ # noqa: E501
    workflow_uid: Optional[StrictStr] = Field(default=None, description="[Read-Only] Unique workflow definition identifier.", alias="workflowUid")
    workflow: Optional[StrictStr] = Field(default=None, description="[Read-Only] The workflow type.")
    version: Optional[StrictStr] = Field(default=None, description="[Read-Only] Version of the workflow definition.")
    description: Optional[StrictStr] = Field(default=None, description="[Read-Only] Description of the workflow or the stage transition.")
    is_active: Optional[StrictBool] = Field(default=None, description="[Read-Only] Returns true if the workflow is available to the site.", alias="isActive")
    stages: Optional[List[Stage]] = None
    __properties: ClassVar[List[str]] = ["workflowUid", "workflow", "version", "description", "isActive", "stages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowDefinitionGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stages (list)
        _items = []
        if self.stages:
            for _item_stages in self.stages:
                if _item_stages:
                    _items.append(_item_stages.to_dict())
            _dict['stages'] = _items
        # set to None if workflow_uid (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_uid is None and "workflow_uid" in self.model_fields_set:
            _dict['workflowUid'] = None

        # set to None if workflow (nullable) is None
        # and model_fields_set contains the field
        if self.workflow is None and "workflow" in self.model_fields_set:
            _dict['workflow'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['isActive'] = None

        # set to None if stages (nullable) is None
        # and model_fields_set contains the field
        if self.stages is None and "stages" in self.model_fields_set:
            _dict['stages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowDefinitionGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workflowUid": obj.get("workflowUid"),
            "workflow": obj.get("workflow"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "isActive": obj.get("isActive"),
            "stages": [Stage.from_dict(_item) for _item in obj["stages"]] if obj.get("stages") is not None else None
        })
        return _obj


