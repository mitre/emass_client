# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SwBaselineOptionalFields(BaseModel):
    """
    SwBaselineOptionalFields
    """ # noqa: E501
    software_type: Optional[StrictStr] = Field(default=None, description="[Optional] Type of the software asset.", alias="softwareType")
    parent_system: Optional[StrictStr] = Field(default=None, description="[Optional] Parent system of the software asset.", alias="parentSystem")
    subsystem: Optional[StrictStr] = Field(default=None, description="[Optional] Subsystem of the software asset.")
    network: Optional[StrictStr] = Field(default=None, description="[Optional] Network of the software asset.")
    hosting_environment: Optional[StrictStr] = Field(default=None, description="[Optional] Hosting environment of the software asset.", alias="hostingEnvironment")
    software_dependencies: Optional[StrictStr] = Field(default=None, description="[Optional] Dependencies of the software asset.", alias="softwareDependencies")
    cryptographic_hash: Optional[StrictStr] = Field(default=None, description="[Optional] Cryptographic hash of the software asset.", alias="cryptographicHash")
    in_service_data: Optional[StrictStr] = Field(default=None, description="[Optional] In-service data of the software asset.", alias="inServiceData")
    it_budget_uii: Optional[StrictStr] = Field(default=None, description="[Optional] IT budget UII of the software asset.", alias="itBudgetUii")
    fiscal_year: Optional[StrictStr] = Field(default=None, description="[Optional] Fiscal year (FY) of the software asset.", alias="fiscalYear")
    pop_end_date: Optional[StrictInt] = Field(default=None, description="[Optional] Period of performance (POP) end date of the software asset.", alias="popEndDate")
    license_or_contract: Optional[StrictStr] = Field(default=None, description="[Optional] License or contract number of the software asset.", alias="licenseOrContract")
    license_term: Optional[StrictStr] = Field(default=None, description="[Optional] License term of the software asset.", alias="licenseTerm")
    cost_per_license: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Optional] Cost per license of the software asset. Number will be converted to display 2 decimal points.", alias="costPerLicense")
    total_licenses: Optional[StrictInt] = Field(default=None, description="[Optional] Total licenses of the software asset.", alias="totalLicenses")
    total_license_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Optional] Total license cost of the software asset. Number will be converted to display 2 decimal points.", alias="totalLicenseCost")
    licenses_used: Optional[StrictInt] = Field(default=None, description="[Optional] Number of licenses used for the software asset.", alias="licensesUsed")
    license_poc: Optional[StrictStr] = Field(default=None, description="[Optional] Point of contact (POC) for the software asset.", alias="licensePoc")
    license_renewal_date: Optional[StrictInt] = Field(default=None, description="[Optional] License renewal date for the software asset.", alias="licenseRenewalDate")
    license_expiration_date: Optional[StrictInt] = Field(default=None, description="[Optional] License expiration date for the software asset.", alias="licenseExpirationDate")
    approval_status: Optional[StrictStr] = Field(default=None, description="[Optional] Approval status of the software asset.", alias="approvalStatus")
    release_date: Optional[StrictInt] = Field(default=None, description="[Optional] Release date of the software asset.", alias="releaseDate")
    maintenance_date: Optional[StrictInt] = Field(default=None, description="[Optional] Maintenance date of the software asset.", alias="maintenanceDate")
    retirement_date: Optional[StrictInt] = Field(default=None, description="[Optional] Retirement date of the software asset.", alias="retirementDate")
    end_of_life_support_date: Optional[StrictInt] = Field(default=None, description="[Optional] End of life support date of the software asset.", alias="endOfLifeSupportDate")
    extended_end_of_life_support_date: Optional[StrictInt] = Field(default=None, description="[Optional] If set, the Extended End of Life/Support Date cannot occur prior to the End of Life/Support Date.", alias="extendedEndOfLifeSupportDate")
    critical_asset: Optional[StrictBool] = Field(default=None, description="[Optional] Indicates whether the asset is a critical information system asset.", alias="criticalAsset")
    location: Optional[StrictStr] = Field(default=None, description="[Optional] Location of the software asset.")
    purpose: Optional[StrictStr] = Field(default=None, description="[Optional] Purpose of the software asset.")
    unsupported_operating_system: Optional[StrictBool] = Field(default=None, description="[Optional] Unsupported operating system. VA only.", alias="unsupportedOperatingSystem")
    unapproved_software_from_trm: Optional[StrictBool] = Field(default=None, description="[Optional] Unapproved software from TRM. VA only", alias="unapprovedSoftwareFromTrm")
    approved_waiver: Optional[StrictBool] = Field(default=None, description="[Optional] Approved waiver. VA only", alias="approvedWaiver")
    __properties: ClassVar[List[str]] = ["softwareType", "parentSystem", "subsystem", "network", "hostingEnvironment", "softwareDependencies", "cryptographicHash", "inServiceData", "itBudgetUii", "fiscalYear", "popEndDate", "licenseOrContract", "licenseTerm", "costPerLicense", "totalLicenses", "totalLicenseCost", "licensesUsed", "licensePoc", "licenseRenewalDate", "licenseExpirationDate", "approvalStatus", "releaseDate", "maintenanceDate", "retirementDate", "endOfLifeSupportDate", "extendedEndOfLifeSupportDate", "criticalAsset", "location", "purpose", "unsupportedOperatingSystem", "unapprovedSoftwareFromTrm", "approvedWaiver"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwBaselineOptionalFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if software_type (nullable) is None
        # and model_fields_set contains the field
        if self.software_type is None and "software_type" in self.model_fields_set:
            _dict['softwareType'] = None

        # set to None if parent_system (nullable) is None
        # and model_fields_set contains the field
        if self.parent_system is None and "parent_system" in self.model_fields_set:
            _dict['parentSystem'] = None

        # set to None if subsystem (nullable) is None
        # and model_fields_set contains the field
        if self.subsystem is None and "subsystem" in self.model_fields_set:
            _dict['subsystem'] = None

        # set to None if network (nullable) is None
        # and model_fields_set contains the field
        if self.network is None and "network" in self.model_fields_set:
            _dict['network'] = None

        # set to None if hosting_environment (nullable) is None
        # and model_fields_set contains the field
        if self.hosting_environment is None and "hosting_environment" in self.model_fields_set:
            _dict['hostingEnvironment'] = None

        # set to None if software_dependencies (nullable) is None
        # and model_fields_set contains the field
        if self.software_dependencies is None and "software_dependencies" in self.model_fields_set:
            _dict['softwareDependencies'] = None

        # set to None if cryptographic_hash (nullable) is None
        # and model_fields_set contains the field
        if self.cryptographic_hash is None and "cryptographic_hash" in self.model_fields_set:
            _dict['cryptographicHash'] = None

        # set to None if in_service_data (nullable) is None
        # and model_fields_set contains the field
        if self.in_service_data is None and "in_service_data" in self.model_fields_set:
            _dict['inServiceData'] = None

        # set to None if it_budget_uii (nullable) is None
        # and model_fields_set contains the field
        if self.it_budget_uii is None and "it_budget_uii" in self.model_fields_set:
            _dict['itBudgetUii'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscalYear'] = None

        # set to None if pop_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.pop_end_date is None and "pop_end_date" in self.model_fields_set:
            _dict['popEndDate'] = None

        # set to None if license_or_contract (nullable) is None
        # and model_fields_set contains the field
        if self.license_or_contract is None and "license_or_contract" in self.model_fields_set:
            _dict['licenseOrContract'] = None

        # set to None if license_term (nullable) is None
        # and model_fields_set contains the field
        if self.license_term is None and "license_term" in self.model_fields_set:
            _dict['licenseTerm'] = None

        # set to None if cost_per_license (nullable) is None
        # and model_fields_set contains the field
        if self.cost_per_license is None and "cost_per_license" in self.model_fields_set:
            _dict['costPerLicense'] = None

        # set to None if total_licenses (nullable) is None
        # and model_fields_set contains the field
        if self.total_licenses is None and "total_licenses" in self.model_fields_set:
            _dict['totalLicenses'] = None

        # set to None if total_license_cost (nullable) is None
        # and model_fields_set contains the field
        if self.total_license_cost is None and "total_license_cost" in self.model_fields_set:
            _dict['totalLicenseCost'] = None

        # set to None if licenses_used (nullable) is None
        # and model_fields_set contains the field
        if self.licenses_used is None and "licenses_used" in self.model_fields_set:
            _dict['licensesUsed'] = None

        # set to None if license_poc (nullable) is None
        # and model_fields_set contains the field
        if self.license_poc is None and "license_poc" in self.model_fields_set:
            _dict['licensePoc'] = None

        # set to None if license_renewal_date (nullable) is None
        # and model_fields_set contains the field
        if self.license_renewal_date is None and "license_renewal_date" in self.model_fields_set:
            _dict['licenseRenewalDate'] = None

        # set to None if license_expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.license_expiration_date is None and "license_expiration_date" in self.model_fields_set:
            _dict['licenseExpirationDate'] = None

        # set to None if approval_status (nullable) is None
        # and model_fields_set contains the field
        if self.approval_status is None and "approval_status" in self.model_fields_set:
            _dict['approvalStatus'] = None

        # set to None if release_date (nullable) is None
        # and model_fields_set contains the field
        if self.release_date is None and "release_date" in self.model_fields_set:
            _dict['releaseDate'] = None

        # set to None if maintenance_date (nullable) is None
        # and model_fields_set contains the field
        if self.maintenance_date is None and "maintenance_date" in self.model_fields_set:
            _dict['maintenanceDate'] = None

        # set to None if retirement_date (nullable) is None
        # and model_fields_set contains the field
        if self.retirement_date is None and "retirement_date" in self.model_fields_set:
            _dict['retirementDate'] = None

        # set to None if end_of_life_support_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_of_life_support_date is None and "end_of_life_support_date" in self.model_fields_set:
            _dict['endOfLifeSupportDate'] = None

        # set to None if extended_end_of_life_support_date (nullable) is None
        # and model_fields_set contains the field
        if self.extended_end_of_life_support_date is None and "extended_end_of_life_support_date" in self.model_fields_set:
            _dict['extendedEndOfLifeSupportDate'] = None

        # set to None if critical_asset (nullable) is None
        # and model_fields_set contains the field
        if self.critical_asset is None and "critical_asset" in self.model_fields_set:
            _dict['criticalAsset'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if purpose (nullable) is None
        # and model_fields_set contains the field
        if self.purpose is None and "purpose" in self.model_fields_set:
            _dict['purpose'] = None

        # set to None if unsupported_operating_system (nullable) is None
        # and model_fields_set contains the field
        if self.unsupported_operating_system is None and "unsupported_operating_system" in self.model_fields_set:
            _dict['unsupportedOperatingSystem'] = None

        # set to None if unapproved_software_from_trm (nullable) is None
        # and model_fields_set contains the field
        if self.unapproved_software_from_trm is None and "unapproved_software_from_trm" in self.model_fields_set:
            _dict['unapprovedSoftwareFromTrm'] = None

        # set to None if approved_waiver (nullable) is None
        # and model_fields_set contains the field
        if self.approved_waiver is None and "approved_waiver" in self.model_fields_set:
            _dict['approvedWaiver'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwBaselineOptionalFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "softwareType": obj.get("softwareType"),
            "parentSystem": obj.get("parentSystem"),
            "subsystem": obj.get("subsystem"),
            "network": obj.get("network"),
            "hostingEnvironment": obj.get("hostingEnvironment"),
            "softwareDependencies": obj.get("softwareDependencies"),
            "cryptographicHash": obj.get("cryptographicHash"),
            "inServiceData": obj.get("inServiceData"),
            "itBudgetUii": obj.get("itBudgetUii"),
            "fiscalYear": obj.get("fiscalYear"),
            "popEndDate": obj.get("popEndDate"),
            "licenseOrContract": obj.get("licenseOrContract"),
            "licenseTerm": obj.get("licenseTerm"),
            "costPerLicense": obj.get("costPerLicense"),
            "totalLicenses": obj.get("totalLicenses"),
            "totalLicenseCost": obj.get("totalLicenseCost"),
            "licensesUsed": obj.get("licensesUsed"),
            "licensePoc": obj.get("licensePoc"),
            "licenseRenewalDate": obj.get("licenseRenewalDate"),
            "licenseExpirationDate": obj.get("licenseExpirationDate"),
            "approvalStatus": obj.get("approvalStatus"),
            "releaseDate": obj.get("releaseDate"),
            "maintenanceDate": obj.get("maintenanceDate"),
            "retirementDate": obj.get("retirementDate"),
            "endOfLifeSupportDate": obj.get("endOfLifeSupportDate"),
            "extendedEndOfLifeSupportDate": obj.get("extendedEndOfLifeSupportDate"),
            "criticalAsset": obj.get("criticalAsset"),
            "location": obj.get("location"),
            "purpose": obj.get("purpose"),
            "unsupportedOperatingSystem": obj.get("unsupportedOperatingSystem"),
            "unapprovedSoftwareFromTrm": obj.get("unapprovedSoftwareFromTrm"),
            "approvedWaiver": obj.get("approvedWaiver")
        })
        return _obj


