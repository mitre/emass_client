# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ControlsConditionalFields(BaseModel):
    """
    ControlsConditionalFields
    """ # noqa: E501
    common_control_provider: Optional[StrictStr] = Field(default=None, description="[Conditional] Indicate the type of Common Control Provider for an Inherited Security Control.", alias="commonControlProvider")
    na_justification: Optional[StrictStr] = Field(default=None, description="[Conditional] Provide justification for Security Controls deemed Not Applicable to the system.", alias="naJustification")
    slcm_criticality: Optional[StrictStr] = Field(default=None, description="[Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000.", alias="slcmCriticality")
    slcm_frequency: Optional[StrictStr] = Field(default=None, description="[Conditional] SLCM frequency", alias="slcmFrequency")
    slcm_method: Optional[StrictStr] = Field(default=None, description="[Conditional] SLCM method utilized", alias="slcmMethod")
    slcm_reporting: Optional[StrictStr] = Field(default=None, description="[Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000.", alias="slcmReporting")
    slcm_tracking: Optional[StrictStr] = Field(default=None, description="[Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000.", alias="slcmTracking")
    slcm_comments: Optional[StrictStr] = Field(default=None, description="[Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000.", alias="slcmComments")
    __properties: ClassVar[List[str]] = ["commonControlProvider", "naJustification", "slcmCriticality", "slcmFrequency", "slcmMethod", "slcmReporting", "slcmTracking", "slcmComments"]

    @field_validator('common_control_provider')
    def common_control_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DoD', 'Component', 'Enclave']):
            raise ValueError("must be one of enum values ('DoD', 'Component', 'Enclave')")
        return value

    @field_validator('slcm_frequency')
    def slcm_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Constantly', 'Daily', 'Weekly', 'Monthly', 'Quarterly', 'Semi-Annually', 'Annually', 'Every Two Years', 'Every Three Years', 'Undetermined']):
            raise ValueError("must be one of enum values ('Constantly', 'Daily', 'Weekly', 'Monthly', 'Quarterly', 'Semi-Annually', 'Annually', 'Every Two Years', 'Every Three Years', 'Undetermined')")
        return value

    @field_validator('slcm_method')
    def slcm_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Automated', 'Semi-Automated', 'Manual', 'Undetermined']):
            raise ValueError("must be one of enum values ('Automated', 'Semi-Automated', 'Manual', 'Undetermined')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControlsConditionalFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if common_control_provider (nullable) is None
        # and model_fields_set contains the field
        if self.common_control_provider is None and "common_control_provider" in self.model_fields_set:
            _dict['commonControlProvider'] = None

        # set to None if na_justification (nullable) is None
        # and model_fields_set contains the field
        if self.na_justification is None and "na_justification" in self.model_fields_set:
            _dict['naJustification'] = None

        # set to None if slcm_criticality (nullable) is None
        # and model_fields_set contains the field
        if self.slcm_criticality is None and "slcm_criticality" in self.model_fields_set:
            _dict['slcmCriticality'] = None

        # set to None if slcm_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.slcm_frequency is None and "slcm_frequency" in self.model_fields_set:
            _dict['slcmFrequency'] = None

        # set to None if slcm_method (nullable) is None
        # and model_fields_set contains the field
        if self.slcm_method is None and "slcm_method" in self.model_fields_set:
            _dict['slcmMethod'] = None

        # set to None if slcm_reporting (nullable) is None
        # and model_fields_set contains the field
        if self.slcm_reporting is None and "slcm_reporting" in self.model_fields_set:
            _dict['slcmReporting'] = None

        # set to None if slcm_tracking (nullable) is None
        # and model_fields_set contains the field
        if self.slcm_tracking is None and "slcm_tracking" in self.model_fields_set:
            _dict['slcmTracking'] = None

        # set to None if slcm_comments (nullable) is None
        # and model_fields_set contains the field
        if self.slcm_comments is None and "slcm_comments" in self.model_fields_set:
            _dict['slcmComments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControlsConditionalFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonControlProvider": obj.get("commonControlProvider"),
            "naJustification": obj.get("naJustification"),
            "slcmCriticality": obj.get("slcmCriticality"),
            "slcmFrequency": obj.get("slcmFrequency"),
            "slcmMethod": obj.get("slcmMethod"),
            "slcmReporting": obj.get("slcmReporting"),
            "slcmTracking": obj.get("slcmTracking"),
            "slcmComments": obj.get("slcmComments")
        })
        return _obj


