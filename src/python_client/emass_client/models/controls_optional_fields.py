# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ControlsOptionalFields(BaseModel):
    """
    ControlsOptionalFields
    """ # noqa: E501
    implementation_status: Optional[StrictStr] = Field(default=None, description="[Optional] Implementation Status of the Security Control for the information system.", alias="implementationStatus")
    severity: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    vulnerabilty_summary: Optional[StrictStr] = Field(default=None, description="[Optional] Include vulnerability summary. Character Limit = 2,000.", alias="vulnerabiltySummary")
    recommendations: Optional[StrictStr] = Field(default=None, description="[Optional] Include recommendations. Character Limit = 2,000.")
    relevance_of_threat: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)", alias="relevanceOfThreat")
    likelihood: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    impact: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    impact_description: Optional[StrictStr] = Field(default=None, description="[Optional] Include description of Security Control's impact.", alias="impactDescription")
    residual_risk_level: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)", alias="residualRiskLevel")
    test_method: Optional[StrictStr] = Field(default=None, description="[Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly.", alias="testMethod")
    mitigations: Optional[StrictStr] = Field(default=None, description="[Optional] Identify any mitigations in place for the Non-Compliant Security Control's vulnerabilities. Character Limit = 2,000.")
    application_layer: Optional[StrictStr] = Field(default=None, description="[Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Character Limit = 2,000. Navy only.", alias="applicationLayer")
    database_layer: Optional[StrictStr] = Field(default=None, description="[Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Navy only.", alias="databaseLayer")
    operating_system_layer: Optional[StrictStr] = Field(default=None, description="[Optional] If the Financial Management (Navy) overlay is applied to the system, this field appears and can be populated. Navy only.", alias="operatingSystemLayer")
    __properties: ClassVar[List[str]] = ["implementationStatus", "severity", "vulnerabiltySummary", "recommendations", "relevanceOfThreat", "likelihood", "impact", "impactDescription", "residualRiskLevel", "testMethod", "mitigations", "applicationLayer", "databaseLayer", "operatingSystemLayer"]

    @field_validator('implementation_status')
    def implementation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Planned', 'Implemented', 'Inherited', 'Not Applicable', 'Manually Inherited']):
            raise ValueError("must be one of enum values ('Planned', 'Implemented', 'Inherited', 'Not Applicable', 'Manually Inherited')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    @field_validator('relevance_of_threat')
    def relevance_of_threat_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    @field_validator('likelihood')
    def likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    @field_validator('impact')
    def impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    @field_validator('residual_risk_level')
    def residual_risk_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    @field_validator('test_method')
    def test_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Test', 'Interview', 'Examine', 'Test, Interview', 'Test, Examine', 'Interview, Examine', 'Test, Interview, Examine']):
            raise ValueError("must be one of enum values ('Test', 'Interview', 'Examine', 'Test, Interview', 'Test, Examine', 'Interview, Examine', 'Test, Interview, Examine')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControlsOptionalFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if implementation_status (nullable) is None
        # and model_fields_set contains the field
        if self.implementation_status is None and "implementation_status" in self.model_fields_set:
            _dict['implementationStatus'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        # set to None if vulnerabilty_summary (nullable) is None
        # and model_fields_set contains the field
        if self.vulnerabilty_summary is None and "vulnerabilty_summary" in self.model_fields_set:
            _dict['vulnerabiltySummary'] = None

        # set to None if recommendations (nullable) is None
        # and model_fields_set contains the field
        if self.recommendations is None and "recommendations" in self.model_fields_set:
            _dict['recommendations'] = None

        # set to None if relevance_of_threat (nullable) is None
        # and model_fields_set contains the field
        if self.relevance_of_threat is None and "relevance_of_threat" in self.model_fields_set:
            _dict['relevanceOfThreat'] = None

        # set to None if likelihood (nullable) is None
        # and model_fields_set contains the field
        if self.likelihood is None and "likelihood" in self.model_fields_set:
            _dict['likelihood'] = None

        # set to None if impact (nullable) is None
        # and model_fields_set contains the field
        if self.impact is None and "impact" in self.model_fields_set:
            _dict['impact'] = None

        # set to None if impact_description (nullable) is None
        # and model_fields_set contains the field
        if self.impact_description is None and "impact_description" in self.model_fields_set:
            _dict['impactDescription'] = None

        # set to None if residual_risk_level (nullable) is None
        # and model_fields_set contains the field
        if self.residual_risk_level is None and "residual_risk_level" in self.model_fields_set:
            _dict['residualRiskLevel'] = None

        # set to None if test_method (nullable) is None
        # and model_fields_set contains the field
        if self.test_method is None and "test_method" in self.model_fields_set:
            _dict['testMethod'] = None

        # set to None if mitigations (nullable) is None
        # and model_fields_set contains the field
        if self.mitigations is None and "mitigations" in self.model_fields_set:
            _dict['mitigations'] = None

        # set to None if application_layer (nullable) is None
        # and model_fields_set contains the field
        if self.application_layer is None and "application_layer" in self.model_fields_set:
            _dict['applicationLayer'] = None

        # set to None if database_layer (nullable) is None
        # and model_fields_set contains the field
        if self.database_layer is None and "database_layer" in self.model_fields_set:
            _dict['databaseLayer'] = None

        # set to None if operating_system_layer (nullable) is None
        # and model_fields_set contains the field
        if self.operating_system_layer is None and "operating_system_layer" in self.model_fields_set:
            _dict['operatingSystemLayer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControlsOptionalFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "implementationStatus": obj.get("implementationStatus"),
            "severity": obj.get("severity"),
            "vulnerabiltySummary": obj.get("vulnerabiltySummary"),
            "recommendations": obj.get("recommendations"),
            "relevanceOfThreat": obj.get("relevanceOfThreat"),
            "likelihood": obj.get("likelihood"),
            "impact": obj.get("impact"),
            "impactDescription": obj.get("impactDescription"),
            "residualRiskLevel": obj.get("residualRiskLevel"),
            "testMethod": obj.get("testMethod"),
            "mitigations": obj.get("mitigations"),
            "applicationLayer": obj.get("applicationLayer"),
            "databaseLayer": obj.get("databaseLayer"),
            "operatingSystemLayer": obj.get("operatingSystemLayer")
        })
        return _obj


