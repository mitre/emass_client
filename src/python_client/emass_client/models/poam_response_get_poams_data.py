# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are: 

    The version of the OpenAPI document: v3.22
    Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from emass_client.models.milestones_get import MilestonesGet
from typing import Optional, Set
from typing_extensions import Self

class PoamResponseGetPoamsData(BaseModel):
    """
    PoamResponseGetPoamsData
    """ # noqa: E501
    system_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique eMASS system identifier.", alias="systemId")
    poam_id: Optional[StrictInt] = Field(default=None, description="[Required] Unique item identifier", alias="poamId")
    display_poam_id: Optional[StrictInt] = Field(default=None, description="[Required] Globally unique identifier for individual POA&M Items, seen on the front-end as ID.", alias="displayPoamId")
    status: Optional[StrictStr] = Field(default=None, description="[Required] The POA&M status")
    vulnerability_description: Optional[StrictStr] = Field(default=None, description="[Required] Provide a description of the POA&M Item. 2000 Characters.", alias="vulnerabilityDescription")
    source_identifying_vulnerability: Optional[StrictStr] = Field(default=None, description="[Required] Include Source Identifying Vulnerability text. 2000 Characters.", alias="sourceIdentifyingVulnerability")
    poc_organization: Optional[StrictStr] = Field(default=None, description="[Required] Organization/Office represented. 100 Characters.", alias="pocOrganization")
    resources: Optional[StrictStr] = Field(default=None, description="[Required] List of resources used. 250 Characters.")
    identified_in_cfo_audit_or_other_review: Optional[StrictBool] = Field(default=None, description="[Required] If not specified, this field will be set to false because it does not accept a null value. VA only", alias="identifiedInCFOAuditOrOtherReview")
    condition_id: Optional[StrictStr] = Field(default=None, description="[Read-Only] Unique identifier of the authorization term/condition linked to the POA&M Item.", alias="conditionId")
    is_inherited: Optional[StrictBool] = Field(default=None, description="[Read-only] Indicates whether a test result is inherited.", alias="isInherited")
    cci: Optional[StrictStr] = Field(default=None, description="[Read-Only] CCI associated with POA&M Item.")
    review_status: Optional[StrictStr] = Field(default=None, description="[Read-Only] Values include the following options: (Not Approved,Under Review,Approved)", alias="reviewStatus")
    created_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Timestamp representing when the POA&M Item was entered into the database.", alias="createdDate")
    extension_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Value returned for a POA&M Item with review status \"Approved\" and has a milestone with a scheduled completion date that extends beyond the POA&M Item's scheduled completion date. ", alias="extensionDate")
    pending_extension_date: Optional[StrictInt] = Field(default=None, description="[Read-Only] Value returned for a POA&M Item with a review status of \"Approved\" and an unapproved milestone with a scheduled completion date that extends beyond the POA&M Item's scheduled completion date. ", alias="pendingExtensionDate")
    artifacts: Optional[StrictStr] = Field(default=None, description="[Read-Only] Lists the filenames of any artifact files attached to the POA&M Item. Multiple values are separated by “; ”.")
    external_uid: Optional[StrictStr] = Field(default=None, description="[Optional] Unique identifier external to the eMASS application for use with associating POA&Ms. 100 Characters.", alias="externalUid")
    control_acronym: Optional[StrictStr] = Field(default=None, description="[Optional] Control acronym associated with the POA&M Item. NIST SP 800-53 Revision 4 defined.", alias="controlAcronym")
    assessment_procedure: Optional[StrictStr] = Field(default=None, description="[Optional] The Security Control Assessment Procedure being associated with the POA&M Item.", alias="assessmentProcedure")
    security_checks: Optional[StrictStr] = Field(default=None, description="[Optional] Security Checks that are associated with the POA&M.", alias="securityChecks")
    raw_severity: Optional[StrictStr] = Field(default=None, description="[Optional] Scan vulnerability ratting Values include the following options: (Very Low, Low, Moderate,High,Very High)", alias="rawSeverity")
    relevance_of_threat: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)", alias="relevanceOfThreat")
    likelihood: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    impact: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)")
    impact_description: Optional[StrictStr] = Field(default=None, description="[Optional] Include description of Security Control's impact.", alias="impactDescription")
    residual_risk_level: Optional[StrictStr] = Field(default=None, description="[Optional] Values include the following options (Very Low, Low, Moderate,High,Very High)", alias="residualRiskLevel")
    recommendations: Optional[StrictStr] = Field(default=None, description="[Optional] Include recommendations. Character Limit = 2,000.")
    mitigations: Optional[StrictStr] = Field(default=None, description="[Optional] Include mitigation explanation. 2000 Characters.")
    resulting_residual_risk_level_after_proposed_mitigations: Optional[StrictStr] = Field(default=None, description="[Optional] Indicate the risk level expected after any proposed mitigations are implemented. Proposed mitigations should be appropriately documented as POA&M milestones. Navy only.", alias="resultingResidualRiskLevelAfterProposedMitigations")
    predisposing_conditions: Optional[StrictStr] = Field(default=None, description="[Optional] A predisposing condition is a condition existing within an organization, a mission or business process, enterprise architecture, information system/PIT, or environment of operation, which affects (i.e., increases or decreases) the likelihood that threat events, once initiated, result in adverse impacts. Navy only.", alias="predisposingConditions")
    threat_description: Optional[StrictStr] = Field(default=None, description="[Optional] Describe the identified threat(s) and relevance to the information system. Navy only.", alias="threatDescription")
    devices_affected: Optional[StrictStr] = Field(default=None, description="[Optional] List any affected devices by hostname. If all devices in the information system are affected, state 'system' or 'all'. Navy only", alias="devicesAffected")
    poc_first_name: Optional[StrictStr] = Field(default=None, description="[Conditional] First name of POC. 100 Characters.", alias="pocFirstName")
    poc_last_name: Optional[StrictStr] = Field(default=None, description="[Conditional] Last name of POC. 100 Characters.", alias="pocLastName")
    poc_email: Optional[StrictStr] = Field(default=None, description="[Conditional] Email address of POC. 100 Characters.", alias="pocEmail")
    poc_phone_number: Optional[StrictStr] = Field(default=None, description="[Conditional] Phone number of POC (area code) ***-**** format. 100 Characters.", alias="pocPhoneNumber")
    severity: Optional[StrictStr] = Field(default=None, description="[Conditional] Required for approved items. Values include the following options: (Very Low, Low, Moderate,High,Very High)")
    scheduled_completion_date: Optional[StrictInt] = Field(default=None, description="[Conditional] Required for ongoing and completed POA&M items. Unix time format.", alias="scheduledCompletionDate")
    completion_date: Optional[StrictInt] = Field(default=None, description="[Conditional] Field is required for completed POA&M items. Unix time format.", alias="completionDate")
    comments: Optional[StrictStr] = Field(default=None, description="[Conditional] Field is required for completed and risk accepted POA&M items. 2000 Characters")
    personnel_resources_funded_base_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="personnelResourcesFundedBaseHours")
    personnel_resources_cost_code: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Personnel Resources: Funded Base Hours is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="personnelResourcesCostCode")
    personnel_resources_unfunded_base_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="personnelResourcesUnfundedBaseHours")
    personnel_resources_nonfunding_obstacle: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Personnel Resources: Unfunded Base Hours is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="personnelResourcesNonfundingObstacle")
    personnel_resources_nonfunding_obstacle_other_reason: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if the value \"Other\" is populated for the field Personnel Resources: Non-Funding Obstacle. VA only.", alias="personnelResourcesNonfundingObstacleOtherReason")
    non_personnel_resources_funded_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="nonPersonnelResourcesFundedAmount")
    non_personnel_resources_cost_code: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Non-Personnel Resources: Funded Amount is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="nonPersonnelResourcesCostCode")
    non_personnel_resources_unfunded_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Conditional] At least one of the following is required and must be completed for each POA&M Item:   Personnel Resources-> Funded Base Hours   Personnel Resources-> Unfunded Base Hours   Non-Personnel Resources-> Funded Amount   Non-Personnel Resources-> Unfunded Amount Displays numbers to the second decimal point (e.g., 100.00). VA only. ", alias="nonPersonnelResourcesUnfundedAmount")
    non_personnel_resources_nonfunding_obstacle: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if Non-Personnel Resources: Unfunded Amount is populated. Only accepts values present in the field's lookup table (modifiable by eMASS System Admins). VA only. ", alias="nonPersonnelResourcesNonfundingObstacle")
    non_personnel_resources_nonfunding_obstacle_other_reason: Optional[StrictStr] = Field(default=None, description="[Conditional] Required if the value \"Other\" is populated for the field Non-Personnel Resources: Non-Funding Obstacle. VA only.", alias="nonPersonnelResourcesNonfundingObstacleOtherReason")
    milestones: Optional[List[MilestonesGet]] = None
    __properties: ClassVar[List[str]] = ["systemId", "poamId", "displayPoamId", "status", "vulnerabilityDescription", "sourceIdentifyingVulnerability", "pocOrganization", "resources", "identifiedInCFOAuditOrOtherReview", "conditionId", "isInherited", "cci", "reviewStatus", "createdDate", "extensionDate", "pendingExtensionDate", "artifacts", "externalUid", "controlAcronym", "assessmentProcedure", "securityChecks", "rawSeverity", "relevanceOfThreat", "likelihood", "impact", "impactDescription", "residualRiskLevel", "recommendations", "mitigations", "resultingResidualRiskLevelAfterProposedMitigations", "predisposingConditions", "threatDescription", "devicesAffected", "pocFirstName", "pocLastName", "pocEmail", "pocPhoneNumber", "severity", "scheduledCompletionDate", "completionDate", "comments", "personnelResourcesFundedBaseHours", "personnelResourcesCostCode", "personnelResourcesUnfundedBaseHours", "personnelResourcesNonfundingObstacle", "personnelResourcesNonfundingObstacleOtherReason", "nonPersonnelResourcesFundedAmount", "nonPersonnelResourcesCostCode", "nonPersonnelResourcesUnfundedAmount", "nonPersonnelResourcesNonfundingObstacle", "nonPersonnelResourcesNonfundingObstacleOtherReason", "milestones"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Ongoing', 'Risk Accepted', 'Completed', 'Not Applicable', 'Archived']):
            raise ValueError("must be one of enum values ('Ongoing', 'Risk Accepted', 'Completed', 'Not Applicable', 'Archived')")
        return value

    @field_validator('review_status')
    def review_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Not Approved', 'Under Review', 'Approved']):
            raise ValueError("must be one of enum values ('Not Approved', 'Under Review', 'Approved')")
        return value

    @field_validator('resulting_residual_risk_level_after_proposed_mitigations')
    def resulting_residual_risk_level_after_proposed_mitigations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Very Low', 'Low', 'Moderate', 'High', 'Very High']):
            raise ValueError("must be one of enum values ('Very Low', 'Low', 'Moderate', 'High', 'Very High')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoamResponseGetPoamsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in milestones (list)
        _items = []
        if self.milestones:
            for _item_milestones in self.milestones:
                if _item_milestones:
                    _items.append(_item_milestones.to_dict())
            _dict['milestones'] = _items
        # set to None if condition_id (nullable) is None
        # and model_fields_set contains the field
        if self.condition_id is None and "condition_id" in self.model_fields_set:
            _dict['conditionId'] = None

        # set to None if is_inherited (nullable) is None
        # and model_fields_set contains the field
        if self.is_inherited is None and "is_inherited" in self.model_fields_set:
            _dict['isInherited'] = None

        # set to None if cci (nullable) is None
        # and model_fields_set contains the field
        if self.cci is None and "cci" in self.model_fields_set:
            _dict['cci'] = None

        # set to None if review_status (nullable) is None
        # and model_fields_set contains the field
        if self.review_status is None and "review_status" in self.model_fields_set:
            _dict['reviewStatus'] = None

        # set to None if extension_date (nullable) is None
        # and model_fields_set contains the field
        if self.extension_date is None and "extension_date" in self.model_fields_set:
            _dict['extensionDate'] = None

        # set to None if pending_extension_date (nullable) is None
        # and model_fields_set contains the field
        if self.pending_extension_date is None and "pending_extension_date" in self.model_fields_set:
            _dict['pendingExtensionDate'] = None

        # set to None if artifacts (nullable) is None
        # and model_fields_set contains the field
        if self.artifacts is None and "artifacts" in self.model_fields_set:
            _dict['artifacts'] = None

        # set to None if resulting_residual_risk_level_after_proposed_mitigations (nullable) is None
        # and model_fields_set contains the field
        if self.resulting_residual_risk_level_after_proposed_mitigations is None and "resulting_residual_risk_level_after_proposed_mitigations" in self.model_fields_set:
            _dict['resultingResidualRiskLevelAfterProposedMitigations'] = None

        # set to None if predisposing_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.predisposing_conditions is None and "predisposing_conditions" in self.model_fields_set:
            _dict['predisposingConditions'] = None

        # set to None if threat_description (nullable) is None
        # and model_fields_set contains the field
        if self.threat_description is None and "threat_description" in self.model_fields_set:
            _dict['threatDescription'] = None

        # set to None if devices_affected (nullable) is None
        # and model_fields_set contains the field
        if self.devices_affected is None and "devices_affected" in self.model_fields_set:
            _dict['devicesAffected'] = None

        # set to None if scheduled_completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled_completion_date is None and "scheduled_completion_date" in self.model_fields_set:
            _dict['scheduledCompletionDate'] = None

        # set to None if personnel_resources_funded_base_hours (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_funded_base_hours is None and "personnel_resources_funded_base_hours" in self.model_fields_set:
            _dict['personnelResourcesFundedBaseHours'] = None

        # set to None if personnel_resources_cost_code (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_cost_code is None and "personnel_resources_cost_code" in self.model_fields_set:
            _dict['personnelResourcesCostCode'] = None

        # set to None if personnel_resources_unfunded_base_hours (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_unfunded_base_hours is None and "personnel_resources_unfunded_base_hours" in self.model_fields_set:
            _dict['personnelResourcesUnfundedBaseHours'] = None

        # set to None if personnel_resources_nonfunding_obstacle (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_nonfunding_obstacle is None and "personnel_resources_nonfunding_obstacle" in self.model_fields_set:
            _dict['personnelResourcesNonfundingObstacle'] = None

        # set to None if personnel_resources_nonfunding_obstacle_other_reason (nullable) is None
        # and model_fields_set contains the field
        if self.personnel_resources_nonfunding_obstacle_other_reason is None and "personnel_resources_nonfunding_obstacle_other_reason" in self.model_fields_set:
            _dict['personnelResourcesNonfundingObstacleOtherReason'] = None

        # set to None if non_personnel_resources_funded_amount (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_funded_amount is None and "non_personnel_resources_funded_amount" in self.model_fields_set:
            _dict['nonPersonnelResourcesFundedAmount'] = None

        # set to None if non_personnel_resources_cost_code (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_cost_code is None and "non_personnel_resources_cost_code" in self.model_fields_set:
            _dict['nonPersonnelResourcesCostCode'] = None

        # set to None if non_personnel_resources_unfunded_amount (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_unfunded_amount is None and "non_personnel_resources_unfunded_amount" in self.model_fields_set:
            _dict['nonPersonnelResourcesUnfundedAmount'] = None

        # set to None if non_personnel_resources_nonfunding_obstacle (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_nonfunding_obstacle is None and "non_personnel_resources_nonfunding_obstacle" in self.model_fields_set:
            _dict['nonPersonnelResourcesNonfundingObstacle'] = None

        # set to None if non_personnel_resources_nonfunding_obstacle_other_reason (nullable) is None
        # and model_fields_set contains the field
        if self.non_personnel_resources_nonfunding_obstacle_other_reason is None and "non_personnel_resources_nonfunding_obstacle_other_reason" in self.model_fields_set:
            _dict['nonPersonnelResourcesNonfundingObstacleOtherReason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoamResponseGetPoamsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "systemId": obj.get("systemId"),
            "poamId": obj.get("poamId"),
            "displayPoamId": obj.get("displayPoamId"),
            "status": obj.get("status"),
            "vulnerabilityDescription": obj.get("vulnerabilityDescription"),
            "sourceIdentifyingVulnerability": obj.get("sourceIdentifyingVulnerability"),
            "pocOrganization": obj.get("pocOrganization"),
            "resources": obj.get("resources"),
            "identifiedInCFOAuditOrOtherReview": obj.get("identifiedInCFOAuditOrOtherReview"),
            "conditionId": obj.get("conditionId"),
            "isInherited": obj.get("isInherited"),
            "cci": obj.get("cci"),
            "reviewStatus": obj.get("reviewStatus"),
            "createdDate": obj.get("createdDate"),
            "extensionDate": obj.get("extensionDate"),
            "pendingExtensionDate": obj.get("pendingExtensionDate"),
            "artifacts": obj.get("artifacts"),
            "externalUid": obj.get("externalUid"),
            "controlAcronym": obj.get("controlAcronym"),
            "assessmentProcedure": obj.get("assessmentProcedure"),
            "securityChecks": obj.get("securityChecks"),
            "rawSeverity": obj.get("rawSeverity"),
            "relevanceOfThreat": obj.get("relevanceOfThreat"),
            "likelihood": obj.get("likelihood"),
            "impact": obj.get("impact"),
            "impactDescription": obj.get("impactDescription"),
            "residualRiskLevel": obj.get("residualRiskLevel"),
            "recommendations": obj.get("recommendations"),
            "mitigations": obj.get("mitigations"),
            "resultingResidualRiskLevelAfterProposedMitigations": obj.get("resultingResidualRiskLevelAfterProposedMitigations"),
            "predisposingConditions": obj.get("predisposingConditions"),
            "threatDescription": obj.get("threatDescription"),
            "devicesAffected": obj.get("devicesAffected"),
            "pocFirstName": obj.get("pocFirstName"),
            "pocLastName": obj.get("pocLastName"),
            "pocEmail": obj.get("pocEmail"),
            "pocPhoneNumber": obj.get("pocPhoneNumber"),
            "severity": obj.get("severity"),
            "scheduledCompletionDate": obj.get("scheduledCompletionDate"),
            "completionDate": obj.get("completionDate"),
            "comments": obj.get("comments"),
            "personnelResourcesFundedBaseHours": obj.get("personnelResourcesFundedBaseHours"),
            "personnelResourcesCostCode": obj.get("personnelResourcesCostCode"),
            "personnelResourcesUnfundedBaseHours": obj.get("personnelResourcesUnfundedBaseHours"),
            "personnelResourcesNonfundingObstacle": obj.get("personnelResourcesNonfundingObstacle"),
            "personnelResourcesNonfundingObstacleOtherReason": obj.get("personnelResourcesNonfundingObstacleOtherReason"),
            "nonPersonnelResourcesFundedAmount": obj.get("nonPersonnelResourcesFundedAmount"),
            "nonPersonnelResourcesCostCode": obj.get("nonPersonnelResourcesCostCode"),
            "nonPersonnelResourcesUnfundedAmount": obj.get("nonPersonnelResourcesUnfundedAmount"),
            "nonPersonnelResourcesNonfundingObstacle": obj.get("nonPersonnelResourcesNonfundingObstacle"),
            "nonPersonnelResourcesNonfundingObstacleOtherReason": obj.get("nonPersonnelResourcesNonfundingObstacleOtherReason"),
            "milestones": [MilestonesGet.from_dict(_item) for _item in obj["milestones"]] if obj.get("milestones") is not None else None
        })
        return _obj


