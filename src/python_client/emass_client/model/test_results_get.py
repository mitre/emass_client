# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class TestResultsGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            systemId = schemas.Int64Schema
            
            
            class control(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'control':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            cci = schemas.StrSchema
            
            
            class isInherited(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isInherited':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            testedBy = schemas.StrSchema
            testDate = schemas.Int64Schema
            description = schemas.StrSchema
            
            
            class type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class complianceStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Compliant": "COMPLIANT",
                        "Non-Compliant": "NONCOMPLIANT",
                        "Not Applicable": "NOT_APPLICABLE",
                    }
                
                @schemas.classproperty
                def COMPLIANT(cls):
                    return cls("Compliant")
                
                @schemas.classproperty
                def NONCOMPLIANT(cls):
                    return cls("Non-Compliant")
                
                @schemas.classproperty
                def NOT_APPLICABLE(cls):
                    return cls("Not Applicable")
            __annotations__ = {
                "systemId": systemId,
                "control": control,
                "cci": cci,
                "isInherited": isInherited,
                "testedBy": testedBy,
                "testDate": testDate,
                "description": description,
                "type": type,
                "complianceStatus": complianceStatus,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["control"]) -> MetaOapg.properties.control: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cci"]) -> MetaOapg.properties.cci: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isInherited"]) -> MetaOapg.properties.isInherited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testedBy"]) -> MetaOapg.properties.testedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testDate"]) -> MetaOapg.properties.testDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complianceStatus"]) -> MetaOapg.properties.complianceStatus: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["systemId"], typing_extensions.Literal["control"], typing_extensions.Literal["cci"], typing_extensions.Literal["isInherited"], typing_extensions.Literal["testedBy"], typing_extensions.Literal["testDate"], typing_extensions.Literal["description"], typing_extensions.Literal["type"], typing_extensions.Literal["complianceStatus"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["control"]) -> typing.Union[MetaOapg.properties.control, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cci"]) -> typing.Union[MetaOapg.properties.cci, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isInherited"]) -> typing.Union[MetaOapg.properties.isInherited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testedBy"]) -> typing.Union[MetaOapg.properties.testedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testDate"]) -> typing.Union[MetaOapg.properties.testDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complianceStatus"]) -> typing.Union[MetaOapg.properties.complianceStatus, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["systemId"], typing_extensions.Literal["control"], typing_extensions.Literal["cci"], typing_extensions.Literal["isInherited"], typing_extensions.Literal["testedBy"], typing_extensions.Literal["testDate"], typing_extensions.Literal["description"], typing_extensions.Literal["type"], typing_extensions.Literal["complianceStatus"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        systemId: typing.Union[MetaOapg.properties.systemId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        control: typing.Union[MetaOapg.properties.control, None, str, schemas.Unset] = schemas.unset,
        cci: typing.Union[MetaOapg.properties.cci, str, schemas.Unset] = schemas.unset,
        isInherited: typing.Union[MetaOapg.properties.isInherited, None, bool, schemas.Unset] = schemas.unset,
        testedBy: typing.Union[MetaOapg.properties.testedBy, str, schemas.Unset] = schemas.unset,
        testDate: typing.Union[MetaOapg.properties.testDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, None, str, schemas.Unset] = schemas.unset,
        complianceStatus: typing.Union[MetaOapg.properties.complianceStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TestResultsGet':
        return super().__new__(
            cls,
            *_args,
            systemId=systemId,
            control=control,
            cci=cci,
            isInherited=isInherited,
            testedBy=testedBy,
            testDate=testDate,
            description=description,
            type=type,
            complianceStatus=complianceStatus,
            _configuration=_configuration,
        )
