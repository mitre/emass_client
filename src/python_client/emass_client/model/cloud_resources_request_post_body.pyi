# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class CloudResourcesRequestPostBody(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    provider = schemas.StrSchema
                    resourceId = schemas.StrSchema
                    resourceName = schemas.StrSchema
                    resourceType = schemas.StrSchema
                    initiatedBy = schemas.StrSchema
                    cspAccountId = schemas.StrSchema
                    cspRegion = schemas.StrSchema
                    isBaseline = schemas.BoolSchema
                    
                    
                    class tags(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                test = schemas.StrSchema
                                __annotations__ = {
                                    "test": test,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["test"]) -> MetaOapg.properties.test: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["test", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["test"]) -> typing.Union[MetaOapg.properties.test, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["test", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            test: typing.Union[MetaOapg.properties.test, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'tags':
                            return super().__new__(
                                cls,
                                *_args,
                                test=test,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class complianceResults(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.AnyTypeSchema,
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        cspPolicyDefinitionId = schemas.StrSchema
                                        policyDefinitionTitle = schemas.StrSchema
                                        complianceCheckTimestamp = schemas.Int64Schema
                                        isCompliant = schemas.BoolSchema
                                        control = schemas.StrSchema
                                        assessmentProcedure = schemas.StrSchema
                                        complianceReason = schemas.StrSchema
                                        policyDeploymentName = schemas.StrSchema
                                        policyDeploymentVersion = schemas.StrSchema
                                        
                                        
                                        class severity(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                            
                                            @schemas.classproperty
                                            def LOW(cls):
                                                return cls("Low")
                                            
                                            @schemas.classproperty
                                            def MEDIUM(cls):
                                                return cls("Medium")
                                            
                                            @schemas.classproperty
                                            def HIGH(cls):
                                                return cls("High")
                                            
                                            @schemas.classproperty
                                            def CRITICAL(cls):
                                                return cls("Critical")
                                        __annotations__ = {
                                            "cspPolicyDefinitionId": cspPolicyDefinitionId,
                                            "policyDefinitionTitle": policyDefinitionTitle,
                                            "complianceCheckTimestamp": complianceCheckTimestamp,
                                            "isCompliant": isCompliant,
                                            "control": control,
                                            "assessmentProcedure": assessmentProcedure,
                                            "complianceReason": complianceReason,
                                            "policyDeploymentName": policyDeploymentName,
                                            "policyDeploymentVersion": policyDeploymentVersion,
                                            "severity": severity,
                                        }
                            
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["cspPolicyDefinitionId"]) -> MetaOapg.properties.cspPolicyDefinitionId: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["policyDefinitionTitle"]) -> MetaOapg.properties.policyDefinitionTitle: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["complianceCheckTimestamp"]) -> MetaOapg.properties.complianceCheckTimestamp: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["isCompliant"]) -> MetaOapg.properties.isCompliant: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["control"]) -> MetaOapg.properties.control: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["assessmentProcedure"]) -> MetaOapg.properties.assessmentProcedure: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["complianceReason"]) -> MetaOapg.properties.complianceReason: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["policyDeploymentName"]) -> MetaOapg.properties.policyDeploymentName: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["policyDeploymentVersion"]) -> MetaOapg.properties.policyDeploymentVersion: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cspPolicyDefinitionId", "policyDefinitionTitle", "complianceCheckTimestamp", "isCompliant", "control", "assessmentProcedure", "complianceReason", "policyDeploymentName", "policyDeploymentVersion", "severity", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["cspPolicyDefinitionId"]) -> typing.Union[MetaOapg.properties.cspPolicyDefinitionId, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["policyDefinitionTitle"]) -> typing.Union[MetaOapg.properties.policyDefinitionTitle, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["complianceCheckTimestamp"]) -> typing.Union[MetaOapg.properties.complianceCheckTimestamp, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["isCompliant"]) -> typing.Union[MetaOapg.properties.isCompliant, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["control"]) -> typing.Union[MetaOapg.properties.control, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["assessmentProcedure"]) -> typing.Union[MetaOapg.properties.assessmentProcedure, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["complianceReason"]) -> typing.Union[MetaOapg.properties.complianceReason, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["policyDeploymentName"]) -> typing.Union[MetaOapg.properties.policyDeploymentName, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["policyDeploymentVersion"]) -> typing.Union[MetaOapg.properties.policyDeploymentVersion, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cspPolicyDefinitionId", "policyDefinitionTitle", "complianceCheckTimestamp", "isCompliant", "control", "assessmentProcedure", "complianceReason", "policyDeploymentName", "policyDeploymentVersion", "severity", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    cspPolicyDefinitionId: typing.Union[MetaOapg.properties.cspPolicyDefinitionId, str, schemas.Unset] = schemas.unset,
                                    policyDefinitionTitle: typing.Union[MetaOapg.properties.policyDefinitionTitle, str, schemas.Unset] = schemas.unset,
                                    complianceCheckTimestamp: typing.Union[MetaOapg.properties.complianceCheckTimestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    isCompliant: typing.Union[MetaOapg.properties.isCompliant, bool, schemas.Unset] = schemas.unset,
                                    control: typing.Union[MetaOapg.properties.control, str, schemas.Unset] = schemas.unset,
                                    assessmentProcedure: typing.Union[MetaOapg.properties.assessmentProcedure, str, schemas.Unset] = schemas.unset,
                                    complianceReason: typing.Union[MetaOapg.properties.complianceReason, str, schemas.Unset] = schemas.unset,
                                    policyDeploymentName: typing.Union[MetaOapg.properties.policyDeploymentName, str, schemas.Unset] = schemas.unset,
                                    policyDeploymentVersion: typing.Union[MetaOapg.properties.policyDeploymentVersion, str, schemas.Unset] = schemas.unset,
                                    severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        cspPolicyDefinitionId=cspPolicyDefinitionId,
                                        policyDefinitionTitle=policyDefinitionTitle,
                                        complianceCheckTimestamp=complianceCheckTimestamp,
                                        isCompliant=isCompliant,
                                        control=control,
                                        assessmentProcedure=assessmentProcedure,
                                        complianceReason=complianceReason,
                                        policyDeploymentName=policyDeploymentName,
                                        policyDeploymentVersion=policyDeploymentVersion,
                                        severity=severity,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'complianceResults':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    __annotations__ = {
                        "provider": provider,
                        "resourceId": resourceId,
                        "resourceName": resourceName,
                        "resourceType": resourceType,
                        "initiatedBy": initiatedBy,
                        "cspAccountId": cspAccountId,
                        "cspRegion": cspRegion,
                        "isBaseline": isBaseline,
                        "tags": tags,
                        "complianceResults": complianceResults,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["resourceId"]) -> MetaOapg.properties.resourceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["resourceName"]) -> MetaOapg.properties.resourceName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["initiatedBy"]) -> MetaOapg.properties.initiatedBy: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cspAccountId"]) -> MetaOapg.properties.cspAccountId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cspRegion"]) -> MetaOapg.properties.cspRegion: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isBaseline"]) -> MetaOapg.properties.isBaseline: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["complianceResults"]) -> MetaOapg.properties.complianceResults: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["provider", "resourceId", "resourceName", "resourceType", "initiatedBy", "cspAccountId", "cspRegion", "isBaseline", "tags", "complianceResults", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union[MetaOapg.properties.provider, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["resourceId"]) -> typing.Union[MetaOapg.properties.resourceId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["resourceName"]) -> typing.Union[MetaOapg.properties.resourceName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["resourceType"]) -> typing.Union[MetaOapg.properties.resourceType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["initiatedBy"]) -> typing.Union[MetaOapg.properties.initiatedBy, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cspAccountId"]) -> typing.Union[MetaOapg.properties.cspAccountId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cspRegion"]) -> typing.Union[MetaOapg.properties.cspRegion, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isBaseline"]) -> typing.Union[MetaOapg.properties.isBaseline, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["complianceResults"]) -> typing.Union[MetaOapg.properties.complianceResults, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["provider", "resourceId", "resourceName", "resourceType", "initiatedBy", "cspAccountId", "cspRegion", "isBaseline", "tags", "complianceResults", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                provider: typing.Union[MetaOapg.properties.provider, str, schemas.Unset] = schemas.unset,
                resourceId: typing.Union[MetaOapg.properties.resourceId, str, schemas.Unset] = schemas.unset,
                resourceName: typing.Union[MetaOapg.properties.resourceName, str, schemas.Unset] = schemas.unset,
                resourceType: typing.Union[MetaOapg.properties.resourceType, str, schemas.Unset] = schemas.unset,
                initiatedBy: typing.Union[MetaOapg.properties.initiatedBy, str, schemas.Unset] = schemas.unset,
                cspAccountId: typing.Union[MetaOapg.properties.cspAccountId, str, schemas.Unset] = schemas.unset,
                cspRegion: typing.Union[MetaOapg.properties.cspRegion, str, schemas.Unset] = schemas.unset,
                isBaseline: typing.Union[MetaOapg.properties.isBaseline, bool, schemas.Unset] = schemas.unset,
                tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                complianceResults: typing.Union[MetaOapg.properties.complianceResults, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    provider=provider,
                    resourceId=resourceId,
                    resourceName=resourceName,
                    resourceType=resourceType,
                    initiatedBy=initiatedBy,
                    cspAccountId=cspAccountId,
                    cspRegion=cspRegion,
                    isBaseline=isBaseline,
                    tags=tags,
                    complianceResults=complianceResults,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CloudResourcesRequestPostBody':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
