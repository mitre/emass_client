# coding: utf-8

"""
    Enterprise Mission Assurance Support Service (eMASS)

    The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` endpoint to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:   # noqa: E501

    The version of the OpenAPI document: v3.9
    Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class ControlsGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            systemId = schemas.Int64Schema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            acronym = schemas.StrSchema
            
            
            class ccis(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ccis':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isInherited(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isInherited':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class modifiedByOverlays(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Privacy": "PRIVACY",
                        "Requirements": "REQUIREMENTS",
                        "Concurrency": "CONCURRENCY",
                    }
                
                @schemas.classproperty
                def PRIVACY(cls):
                    return cls("Privacy")
                
                @schemas.classproperty
                def REQUIREMENTS(cls):
                    return cls("Requirements")
                
                @schemas.classproperty
                def CONCURRENCY(cls):
                    return cls("Concurrency")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modifiedByOverlays':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class includedStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'includedStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class complianceStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'complianceStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            responsibleEntities = schemas.StrSchema
            
            
            class implementationStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Planned": "PLANNED",
                        "Implemented": "IMPLEMENTED",
                        "Inherited": "INHERITED",
                        "Not Applicable": "NOT_APPLICABLE",
                        "Manually Inherited": "MANUALLY_INHERITED",
                    }
                
                @schemas.classproperty
                def PLANNED(cls):
                    return cls("Planned")
                
                @schemas.classproperty
                def IMPLEMENTED(cls):
                    return cls("Implemented")
                
                @schemas.classproperty
                def INHERITED(cls):
                    return cls("Inherited")
                
                @schemas.classproperty
                def NOT_APPLICABLE(cls):
                    return cls("Not Applicable")
                
                @schemas.classproperty
                def MANUALLY_INHERITED(cls):
                    return cls("Manually Inherited")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'implementationStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class commonControlProvider(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DoD": "DO_D",
                        "Component": "COMPONENT",
                        "Enclave": "ENCLAVE",
                    }
                
                @schemas.classproperty
                def DO_D(cls):
                    return cls("DoD")
                
                @schemas.classproperty
                def COMPONENT(cls):
                    return cls("Component")
                
                @schemas.classproperty
                def ENCLAVE(cls):
                    return cls("Enclave")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'commonControlProvider':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class naJustification(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'naJustification':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class controlDesignation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Common": "COMMON",
                        "System-Specific": "SYSTEMSPECIFIC",
                        "Hybrid": "HYBRID",
                    }
                
                @schemas.classproperty
                def COMMON(cls):
                    return cls("Common")
                
                @schemas.classproperty
                def SYSTEMSPECIFIC(cls):
                    return cls("System-Specific")
                
                @schemas.classproperty
                def HYBRID(cls):
                    return cls("Hybrid")
            estimatedCompletionDate = schemas.IntSchema
            implementationNarrative = schemas.StrSchema
            
            
            class slcmCriticality(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slcmCriticality':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class slcmFrequency(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Constantly": "CONSTANTLY",
                        "Daily": "DAILY",
                        "Weekly": "WEEKLY",
                        "Monthly": "MONTHLY",
                        "Quarterly": "QUARTERLY",
                        "Semi-Annually": "SEMIANNUALLY",
                        "Annually": "ANNUALLY",
                        "Every Two Years": "EVERY_TWO_YEARS",
                        "Every Three Years": "EVERY_THREE_YEARS",
                        "Undetermined": "UNDETERMINED",
                    }
                
                @schemas.classproperty
                def CONSTANTLY(cls):
                    return cls("Constantly")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("Daily")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def SEMIANNUALLY(cls):
                    return cls("Semi-Annually")
                
                @schemas.classproperty
                def ANNUALLY(cls):
                    return cls("Annually")
                
                @schemas.classproperty
                def EVERY_TWO_YEARS(cls):
                    return cls("Every Two Years")
                
                @schemas.classproperty
                def EVERY_THREE_YEARS(cls):
                    return cls("Every Three Years")
                
                @schemas.classproperty
                def UNDETERMINED(cls):
                    return cls("Undetermined")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slcmFrequency':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class slcmMethod(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Automated": "AUTOMATED",
                        "Semi-Automated": "SEMIAUTOMATED",
                        "Manual": "MANUAL",
                        "Undetermined": "UNDETERMINED",
                    }
                
                @schemas.classproperty
                def AUTOMATED(cls):
                    return cls("Automated")
                
                @schemas.classproperty
                def SEMIAUTOMATED(cls):
                    return cls("Semi-Automated")
                
                @schemas.classproperty
                def MANUAL(cls):
                    return cls("Manual")
                
                @schemas.classproperty
                def UNDETERMINED(cls):
                    return cls("Undetermined")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slcmMethod':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class slcmReporting(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slcmReporting':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class slcmTracking(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slcmTracking':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class slcmComments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slcmComments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class severity(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'severity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class vulnerabiltySummary(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vulnerabiltySummary':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class recommendations(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recommendations':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class relevanceOfThreat(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relevanceOfThreat':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class likelihood(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'likelihood':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class impact(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'impact':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class impactDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'impactDescription':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class residualRiskLevel(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'residualRiskLevel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class testMethod(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Test": "TEST",
                        "Interview": "INTERVIEW",
                        "Examine": "EXAMINE",
                        "Test, Interview": "TEST_INTERVIEW",
                        "Test, Examine": "TEST_EXAMINE",
                        "Interview, Examine": "INTERVIEW_EXAMINE",
                        "Test, Interview, Examine": "TEST_INTERVIEW_EXAMINE",
                    }
                
                @schemas.classproperty
                def TEST(cls):
                    return cls("Test")
                
                @schemas.classproperty
                def INTERVIEW(cls):
                    return cls("Interview")
                
                @schemas.classproperty
                def EXAMINE(cls):
                    return cls("Examine")
                
                @schemas.classproperty
                def TEST_INTERVIEW(cls):
                    return cls("Test, Interview")
                
                @schemas.classproperty
                def TEST_EXAMINE(cls):
                    return cls("Test, Examine")
                
                @schemas.classproperty
                def INTERVIEW_EXAMINE(cls):
                    return cls("Interview, Examine")
                
                @schemas.classproperty
                def TEST_INTERVIEW_EXAMINE(cls):
                    return cls("Test, Interview, Examine")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'testMethod':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "systemId": systemId,
                "name": name,
                "acronym": acronym,
                "ccis": ccis,
                "isInherited": isInherited,
                "modifiedByOverlays": modifiedByOverlays,
                "includedStatus": includedStatus,
                "complianceStatus": complianceStatus,
                "responsibleEntities": responsibleEntities,
                "implementationStatus": implementationStatus,
                "commonControlProvider": commonControlProvider,
                "naJustification": naJustification,
                "controlDesignation": controlDesignation,
                "estimatedCompletionDate": estimatedCompletionDate,
                "implementationNarrative": implementationNarrative,
                "slcmCriticality": slcmCriticality,
                "slcmFrequency": slcmFrequency,
                "slcmMethod": slcmMethod,
                "slcmReporting": slcmReporting,
                "slcmTracking": slcmTracking,
                "slcmComments": slcmComments,
                "severity": severity,
                "vulnerabiltySummary": vulnerabiltySummary,
                "recommendations": recommendations,
                "relevanceOfThreat": relevanceOfThreat,
                "likelihood": likelihood,
                "impact": impact,
                "impactDescription": impactDescription,
                "residualRiskLevel": residualRiskLevel,
                "testMethod": testMethod,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ccis"]) -> MetaOapg.properties.ccis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isInherited"]) -> MetaOapg.properties.isInherited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedByOverlays"]) -> MetaOapg.properties.modifiedByOverlays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includedStatus"]) -> MetaOapg.properties.includedStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complianceStatus"]) -> MetaOapg.properties.complianceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsibleEntities"]) -> MetaOapg.properties.responsibleEntities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["implementationStatus"]) -> MetaOapg.properties.implementationStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commonControlProvider"]) -> MetaOapg.properties.commonControlProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naJustification"]) -> MetaOapg.properties.naJustification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controlDesignation"]) -> MetaOapg.properties.controlDesignation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedCompletionDate"]) -> MetaOapg.properties.estimatedCompletionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["implementationNarrative"]) -> MetaOapg.properties.implementationNarrative: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slcmCriticality"]) -> MetaOapg.properties.slcmCriticality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slcmFrequency"]) -> MetaOapg.properties.slcmFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slcmMethod"]) -> MetaOapg.properties.slcmMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slcmReporting"]) -> MetaOapg.properties.slcmReporting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slcmTracking"]) -> MetaOapg.properties.slcmTracking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slcmComments"]) -> MetaOapg.properties.slcmComments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vulnerabiltySummary"]) -> MetaOapg.properties.vulnerabiltySummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recommendations"]) -> MetaOapg.properties.recommendations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relevanceOfThreat"]) -> MetaOapg.properties.relevanceOfThreat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likelihood"]) -> MetaOapg.properties.likelihood: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impact"]) -> MetaOapg.properties.impact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impactDescription"]) -> MetaOapg.properties.impactDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residualRiskLevel"]) -> MetaOapg.properties.residualRiskLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testMethod"]) -> MetaOapg.properties.testMethod: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["systemId"], typing_extensions.Literal["name"], typing_extensions.Literal["acronym"], typing_extensions.Literal["ccis"], typing_extensions.Literal["isInherited"], typing_extensions.Literal["modifiedByOverlays"], typing_extensions.Literal["includedStatus"], typing_extensions.Literal["complianceStatus"], typing_extensions.Literal["responsibleEntities"], typing_extensions.Literal["implementationStatus"], typing_extensions.Literal["commonControlProvider"], typing_extensions.Literal["naJustification"], typing_extensions.Literal["controlDesignation"], typing_extensions.Literal["estimatedCompletionDate"], typing_extensions.Literal["implementationNarrative"], typing_extensions.Literal["slcmCriticality"], typing_extensions.Literal["slcmFrequency"], typing_extensions.Literal["slcmMethod"], typing_extensions.Literal["slcmReporting"], typing_extensions.Literal["slcmTracking"], typing_extensions.Literal["slcmComments"], typing_extensions.Literal["severity"], typing_extensions.Literal["vulnerabiltySummary"], typing_extensions.Literal["recommendations"], typing_extensions.Literal["relevanceOfThreat"], typing_extensions.Literal["likelihood"], typing_extensions.Literal["impact"], typing_extensions.Literal["impactDescription"], typing_extensions.Literal["residualRiskLevel"], typing_extensions.Literal["testMethod"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> typing.Union[MetaOapg.properties.acronym, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ccis"]) -> typing.Union[MetaOapg.properties.ccis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isInherited"]) -> typing.Union[MetaOapg.properties.isInherited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedByOverlays"]) -> typing.Union[MetaOapg.properties.modifiedByOverlays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includedStatus"]) -> typing.Union[MetaOapg.properties.includedStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complianceStatus"]) -> typing.Union[MetaOapg.properties.complianceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsibleEntities"]) -> typing.Union[MetaOapg.properties.responsibleEntities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["implementationStatus"]) -> typing.Union[MetaOapg.properties.implementationStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commonControlProvider"]) -> typing.Union[MetaOapg.properties.commonControlProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naJustification"]) -> typing.Union[MetaOapg.properties.naJustification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controlDesignation"]) -> typing.Union[MetaOapg.properties.controlDesignation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedCompletionDate"]) -> typing.Union[MetaOapg.properties.estimatedCompletionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["implementationNarrative"]) -> typing.Union[MetaOapg.properties.implementationNarrative, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slcmCriticality"]) -> typing.Union[MetaOapg.properties.slcmCriticality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slcmFrequency"]) -> typing.Union[MetaOapg.properties.slcmFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slcmMethod"]) -> typing.Union[MetaOapg.properties.slcmMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slcmReporting"]) -> typing.Union[MetaOapg.properties.slcmReporting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slcmTracking"]) -> typing.Union[MetaOapg.properties.slcmTracking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slcmComments"]) -> typing.Union[MetaOapg.properties.slcmComments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vulnerabiltySummary"]) -> typing.Union[MetaOapg.properties.vulnerabiltySummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recommendations"]) -> typing.Union[MetaOapg.properties.recommendations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relevanceOfThreat"]) -> typing.Union[MetaOapg.properties.relevanceOfThreat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likelihood"]) -> typing.Union[MetaOapg.properties.likelihood, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impact"]) -> typing.Union[MetaOapg.properties.impact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impactDescription"]) -> typing.Union[MetaOapg.properties.impactDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residualRiskLevel"]) -> typing.Union[MetaOapg.properties.residualRiskLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testMethod"]) -> typing.Union[MetaOapg.properties.testMethod, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["systemId"], typing_extensions.Literal["name"], typing_extensions.Literal["acronym"], typing_extensions.Literal["ccis"], typing_extensions.Literal["isInherited"], typing_extensions.Literal["modifiedByOverlays"], typing_extensions.Literal["includedStatus"], typing_extensions.Literal["complianceStatus"], typing_extensions.Literal["responsibleEntities"], typing_extensions.Literal["implementationStatus"], typing_extensions.Literal["commonControlProvider"], typing_extensions.Literal["naJustification"], typing_extensions.Literal["controlDesignation"], typing_extensions.Literal["estimatedCompletionDate"], typing_extensions.Literal["implementationNarrative"], typing_extensions.Literal["slcmCriticality"], typing_extensions.Literal["slcmFrequency"], typing_extensions.Literal["slcmMethod"], typing_extensions.Literal["slcmReporting"], typing_extensions.Literal["slcmTracking"], typing_extensions.Literal["slcmComments"], typing_extensions.Literal["severity"], typing_extensions.Literal["vulnerabiltySummary"], typing_extensions.Literal["recommendations"], typing_extensions.Literal["relevanceOfThreat"], typing_extensions.Literal["likelihood"], typing_extensions.Literal["impact"], typing_extensions.Literal["impactDescription"], typing_extensions.Literal["residualRiskLevel"], typing_extensions.Literal["testMethod"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        systemId: typing.Union[MetaOapg.properties.systemId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        acronym: typing.Union[MetaOapg.properties.acronym, str, schemas.Unset] = schemas.unset,
        ccis: typing.Union[MetaOapg.properties.ccis, None, str, schemas.Unset] = schemas.unset,
        isInherited: typing.Union[MetaOapg.properties.isInherited, None, bool, schemas.Unset] = schemas.unset,
        modifiedByOverlays: typing.Union[MetaOapg.properties.modifiedByOverlays, None, str, schemas.Unset] = schemas.unset,
        includedStatus: typing.Union[MetaOapg.properties.includedStatus, None, str, schemas.Unset] = schemas.unset,
        complianceStatus: typing.Union[MetaOapg.properties.complianceStatus, None, str, schemas.Unset] = schemas.unset,
        responsibleEntities: typing.Union[MetaOapg.properties.responsibleEntities, str, schemas.Unset] = schemas.unset,
        implementationStatus: typing.Union[MetaOapg.properties.implementationStatus, None, str, schemas.Unset] = schemas.unset,
        commonControlProvider: typing.Union[MetaOapg.properties.commonControlProvider, None, str, schemas.Unset] = schemas.unset,
        naJustification: typing.Union[MetaOapg.properties.naJustification, None, str, schemas.Unset] = schemas.unset,
        controlDesignation: typing.Union[MetaOapg.properties.controlDesignation, str, schemas.Unset] = schemas.unset,
        estimatedCompletionDate: typing.Union[MetaOapg.properties.estimatedCompletionDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        implementationNarrative: typing.Union[MetaOapg.properties.implementationNarrative, str, schemas.Unset] = schemas.unset,
        slcmCriticality: typing.Union[MetaOapg.properties.slcmCriticality, None, str, schemas.Unset] = schemas.unset,
        slcmFrequency: typing.Union[MetaOapg.properties.slcmFrequency, None, str, schemas.Unset] = schemas.unset,
        slcmMethod: typing.Union[MetaOapg.properties.slcmMethod, None, str, schemas.Unset] = schemas.unset,
        slcmReporting: typing.Union[MetaOapg.properties.slcmReporting, None, str, schemas.Unset] = schemas.unset,
        slcmTracking: typing.Union[MetaOapg.properties.slcmTracking, None, str, schemas.Unset] = schemas.unset,
        slcmComments: typing.Union[MetaOapg.properties.slcmComments, None, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, None, str, schemas.Unset] = schemas.unset,
        vulnerabiltySummary: typing.Union[MetaOapg.properties.vulnerabiltySummary, None, str, schemas.Unset] = schemas.unset,
        recommendations: typing.Union[MetaOapg.properties.recommendations, None, str, schemas.Unset] = schemas.unset,
        relevanceOfThreat: typing.Union[MetaOapg.properties.relevanceOfThreat, None, str, schemas.Unset] = schemas.unset,
        likelihood: typing.Union[MetaOapg.properties.likelihood, None, str, schemas.Unset] = schemas.unset,
        impact: typing.Union[MetaOapg.properties.impact, None, str, schemas.Unset] = schemas.unset,
        impactDescription: typing.Union[MetaOapg.properties.impactDescription, None, str, schemas.Unset] = schemas.unset,
        residualRiskLevel: typing.Union[MetaOapg.properties.residualRiskLevel, None, str, schemas.Unset] = schemas.unset,
        testMethod: typing.Union[MetaOapg.properties.testMethod, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ControlsGet':
        return super().__new__(
            cls,
            *_args,
            systemId=systemId,
            name=name,
            acronym=acronym,
            ccis=ccis,
            isInherited=isInherited,
            modifiedByOverlays=modifiedByOverlays,
            includedStatus=includedStatus,
            complianceStatus=complianceStatus,
            responsibleEntities=responsibleEntities,
            implementationStatus=implementationStatus,
            commonControlProvider=commonControlProvider,
            naJustification=naJustification,
            controlDesignation=controlDesignation,
            estimatedCompletionDate=estimatedCompletionDate,
            implementationNarrative=implementationNarrative,
            slcmCriticality=slcmCriticality,
            slcmFrequency=slcmFrequency,
            slcmMethod=slcmMethod,
            slcmReporting=slcmReporting,
            slcmTracking=slcmTracking,
            slcmComments=slcmComments,
            severity=severity,
            vulnerabiltySummary=vulnerabiltySummary,
            recommendations=recommendations,
            relevanceOfThreat=relevanceOfThreat,
            likelihood=likelihood,
            impact=impact,
            impactDescription=impactDescription,
            residualRiskLevel=residualRiskLevel,
            testMethod=testMethod,
            _configuration=_configuration,
        )
