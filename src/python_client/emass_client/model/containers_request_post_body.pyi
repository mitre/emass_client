# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class ContainersRequestPostBody(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    containerId = schemas.StrSchema
                    containerName = schemas.StrSchema
                    podName = schemas.StrSchema
                    podIp = schemas.StrSchema
                    namespace = schemas.StrSchema
                    time = schemas.Int64Schema
                    
                    
                    class tags(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                test = schemas.StrSchema
                                __annotations__ = {
                                    "test": test,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["test"]) -> MetaOapg.properties.test: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["test", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["test"]) -> typing.Union[MetaOapg.properties.test, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["test", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            test: typing.Union[MetaOapg.properties.test, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'tags':
                            return super().__new__(
                                cls,
                                *_args,
                                test=test,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class benchmarks(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.AnyTypeSchema,
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        benchmark = schemas.StrSchema
                                        isBaseline = schemas.BoolSchema
                                        
                                        
                                        class results(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class items(
                                                    schemas.AnyTypeSchema,
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            ruleId = schemas.StrSchema
                                                            
                                                            
                                                            class status(
                                                                schemas.EnumBase,
                                                                schemas.StrSchema
                                                            ):
                                                                
                                                                @schemas.classproperty
                                                                def PASS(cls):
                                                                    return cls("Pass")
                                                                
                                                                @schemas.classproperty
                                                                def FAIL(cls):
                                                                    return cls("Fail")
                                                                
                                                                @schemas.classproperty
                                                                def OTHER(cls):
                                                                    return cls("Other")
                                                                
                                                                @schemas.classproperty
                                                                def NOT_REVIEWED(cls):
                                                                    return cls("Not Reviewed")
                                                                
                                                                @schemas.classproperty
                                                                def NOT_CHECKED(cls):
                                                                    return cls("Not Checked")
                                                                
                                                                @schemas.classproperty
                                                                def NOT_APPLICABLE(cls):
                                                                    return cls("Not Applicable")
                                                            lastSeen = schemas.Int64Schema
                                                            message = schemas.StrSchema
                                                            __annotations__ = {
                                                                "ruleId": ruleId,
                                                                "status": status,
                                                                "lastSeen": lastSeen,
                                                                "message": message,
                                                            }
                                                
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["ruleId"]) -> MetaOapg.properties.ruleId: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ruleId", "status", "lastSeen", "message", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["ruleId"]) -> typing.Union[MetaOapg.properties.ruleId, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["lastSeen"]) -> typing.Union[MetaOapg.properties.lastSeen, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ruleId", "status", "lastSeen", "message", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                        ruleId: typing.Union[MetaOapg.properties.ruleId, str, schemas.Unset] = schemas.unset,
                                                        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                                                        lastSeen: typing.Union[MetaOapg.properties.lastSeen, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'items':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            ruleId=ruleId,
                                                            status=status,
                                                            lastSeen=lastSeen,
                                                            message=message,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'results':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        __annotations__ = {
                                            "benchmark": benchmark,
                                            "isBaseline": isBaseline,
                                            "results": results,
                                        }
                            
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["benchmark"]) -> MetaOapg.properties.benchmark: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["isBaseline"]) -> MetaOapg.properties.isBaseline: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["benchmark", "isBaseline", "results", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["benchmark"]) -> typing.Union[MetaOapg.properties.benchmark, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["isBaseline"]) -> typing.Union[MetaOapg.properties.isBaseline, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> typing.Union[MetaOapg.properties.results, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["benchmark", "isBaseline", "results", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    benchmark: typing.Union[MetaOapg.properties.benchmark, str, schemas.Unset] = schemas.unset,
                                    isBaseline: typing.Union[MetaOapg.properties.isBaseline, bool, schemas.Unset] = schemas.unset,
                                    results: typing.Union[MetaOapg.properties.results, list, tuple, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        benchmark=benchmark,
                                        isBaseline=isBaseline,
                                        results=results,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'benchmarks':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    __annotations__ = {
                        "containerId": containerId,
                        "containerName": containerName,
                        "podName": podName,
                        "podIp": podIp,
                        "namespace": namespace,
                        "time": time,
                        "tags": tags,
                        "benchmarks": benchmarks,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["containerId"]) -> MetaOapg.properties.containerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["containerName"]) -> MetaOapg.properties.containerName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["podName"]) -> MetaOapg.properties.podName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["podIp"]) -> MetaOapg.properties.podIp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["benchmarks"]) -> MetaOapg.properties.benchmarks: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["containerId", "containerName", "podName", "podIp", "namespace", "time", "tags", "benchmarks", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["containerId"]) -> typing.Union[MetaOapg.properties.containerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["containerName"]) -> typing.Union[MetaOapg.properties.containerName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["podName"]) -> typing.Union[MetaOapg.properties.podName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["podIp"]) -> typing.Union[MetaOapg.properties.podIp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["benchmarks"]) -> typing.Union[MetaOapg.properties.benchmarks, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["containerId", "containerName", "podName", "podIp", "namespace", "time", "tags", "benchmarks", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                containerId: typing.Union[MetaOapg.properties.containerId, str, schemas.Unset] = schemas.unset,
                containerName: typing.Union[MetaOapg.properties.containerName, str, schemas.Unset] = schemas.unset,
                podName: typing.Union[MetaOapg.properties.podName, str, schemas.Unset] = schemas.unset,
                podIp: typing.Union[MetaOapg.properties.podIp, str, schemas.Unset] = schemas.unset,
                namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
                time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                benchmarks: typing.Union[MetaOapg.properties.benchmarks, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    containerId=containerId,
                    containerName=containerName,
                    podName=podName,
                    podIp=podIp,
                    namespace=namespace,
                    time=time,
                    tags=tags,
                    benchmarks=benchmarks,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ContainersRequestPostBody':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
