# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class Systems(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class registrationCompletionDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'registrationCompletionDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class systemLifeCycleAcquisitionPhase(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systemLifeCycleAcquisitionPhase':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class specialType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'specialType':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class specialTypeDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'specialTypeDescription':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class missionPortfolio(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'missionPortfolio':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isNNPI(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isNNPI':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isRBC(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isRBC':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isWaiver(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isWaiver':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class programOffice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'programOffice':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class vramId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vramId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            systemId = schemas.Int64Schema
            
            
            class policy(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RMF": "RMF",
                        "DIACAP": "DIACAP",
                    }
                
                @schemas.classproperty
                def RMF(cls):
                    return cls("RMF")
                
                @schemas.classproperty
                def DIACAP(cls):
                    return cls("DIACAP")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'policy':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class registrationType(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Assess and Authorize": "ASSESS_AND_AUTHORIZE",
                        "Assess Only": "ASSESS_ONLY",
                        "Guest": "GUEST",
                        "Regular": "REGULAR",
                        "Functional": "FUNCTIONAL",
                        "Cloud Service Provider": "CLOUD_SERVICE_PROVIDER",
                        "Common Control Provider": "COMMON_CONTROL_PROVIDER",
                    }
                
                @schemas.classproperty
                def ASSESS_AND_AUTHORIZE(cls):
                    return cls("Assess and Authorize")
                
                @schemas.classproperty
                def ASSESS_ONLY(cls):
                    return cls("Assess Only")
                
                @schemas.classproperty
                def GUEST(cls):
                    return cls("Guest")
                
                @schemas.classproperty
                def REGULAR(cls):
                    return cls("Regular")
                
                @schemas.classproperty
                def FUNCTIONAL(cls):
                    return cls("Functional")
                
                @schemas.classproperty
                def CLOUD_SERVICE_PROVIDER(cls):
                    return cls("Cloud Service Provider")
                
                @schemas.classproperty
                def COMMON_CONTROL_PROVIDER(cls):
                    return cls("Common Control Provider")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'registrationType':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class acronym(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'acronym':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class instance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instance':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class owningOrganization(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owningOrganization':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class secondaryOrganization(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secondaryOrganization':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class versionReleaseNo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'versionReleaseNo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class systemType(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "IS Major Application": "IS_MAJOR_APPLICATION",
                        "IS Enclave": "IS_ENCLAVE",
                        "Platform IT": "PLATFORM_IT",
                        "Platform IT System": "PLATFORM_IT_SYSTEM",
                        "Platform IT Interconnection": "PLATFORM_IT_INTERCONNECTION",
                        "AIS Application": "AIS_APPLICATION",
                        "Outsourced IT-Based Process (DoD-controlled)": "OUTSOURCED_ITBASED_PROCESS_DO_DCONTROLLED",
                        "Enclave": "ENCLAVE",
                        "Outsourced IT-Based Process (service provider shared)": "OUTSOURCED_ITBASED_PROCESS_SERVICE_PROVIDER_SHARED",
                    }
                
                @schemas.classproperty
                def IS_MAJOR_APPLICATION(cls):
                    return cls("IS Major Application")
                
                @schemas.classproperty
                def IS_ENCLAVE(cls):
                    return cls("IS Enclave")
                
                @schemas.classproperty
                def PLATFORM_IT(cls):
                    return cls("Platform IT")
                
                @schemas.classproperty
                def PLATFORM_IT_SYSTEM(cls):
                    return cls("Platform IT System")
                
                @schemas.classproperty
                def PLATFORM_IT_INTERCONNECTION(cls):
                    return cls("Platform IT Interconnection")
                
                @schemas.classproperty
                def AIS_APPLICATION(cls):
                    return cls("AIS Application")
                
                @schemas.classproperty
                def OUTSOURCED_ITBASED_PROCESS_DO_DCONTROLLED(cls):
                    return cls("Outsourced IT-Based Process (DoD-controlled)")
                
                @schemas.classproperty
                def ENCLAVE(cls):
                    return cls("Enclave")
                
                @schemas.classproperty
                def OUTSOURCED_ITBASED_PROCESS_SERVICE_PROVIDER_SHARED(cls):
                    return cls("Outsourced IT-Based Process (service provider shared)")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systemType':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isNSS(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isNSS':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isPublicFacing(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isPublicFacing':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class coamsId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coamsId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isTypeAuthorization(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isTypeAuthorization':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            ditprId = schemas.StrSchema
            
            
            class apmsId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apmsId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class vasiId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vasiId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class authorizationStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorizationStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class authorizationDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorizationDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class authorizationTerminationDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorizationTerminationDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class authorizationLength(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorizationLength':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class termsForAuth(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'termsForAuth':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class securityPlanApprovalStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Approved": "APPROVED",
                        "Not Yet Approved": "NOT_YET_APPROVED",
                        "Denied": "DENIED",
                    }
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("Approved")
                
                @schemas.classproperty
                def NOT_YET_APPROVED(cls):
                    return cls("Not Yet Approved")
                
                @schemas.classproperty
                def DENIED(cls):
                    return cls("Denied")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'securityPlanApprovalStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class securityPlanApprovalDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'securityPlanApprovalDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class missionCriticality(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'missionCriticality':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class geographicalAssociation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'geographicalAssociation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class systemOwnership(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systemOwnership':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class governingMissionArea(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'governingMissionArea':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class primaryFunctionalArea(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primaryFunctionalArea':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class secondaryFunctionalArea(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secondaryFunctionalArea':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class primaryControlSet(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NIST SP 800-53 Revision 4": "NIST_SP_80053_REVISION_4",
                        "DoDI 8500.2": "DO_DI_8500_2",
                    }
                
                @schemas.classproperty
                def NIST_SP_80053_REVISION_4(cls):
                    return cls("NIST SP 800-53 Revision 4")
                
                @schemas.classproperty
                def DO_DI_8500_2(cls):
                    return cls("DoDI 8500.2")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primaryControlSet':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class confidentiality(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "High": "HIGH",
                        "Moderate": "MODERATE",
                        "Low": "LOW",
                    }
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'confidentiality':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class integrity(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "High": "HIGH",
                        "Moderate": "MODERATE",
                        "Low": "LOW",
                    }
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'integrity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class availability(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "High": "HIGH",
                        "Moderate": "MODERATE",
                        "Low": "LOW",
                    }
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'availability':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class appliedOverlays(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appliedOverlays':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class rmfActivity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rmfActivity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class crossDomainTicket(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'crossDomainTicket':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ditprDonId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ditprDonId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class mac(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "I": "I",
                        "II": "II",
                        "III": "III",
                    }
                
                @schemas.classproperty
                def I(cls):
                    return cls("I")
                
                @schemas.classproperty
                def II(cls):
                    return cls("II")
                
                @schemas.classproperty
                def III(cls):
                    return cls("III")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mac':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class dodConfidentiality(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Public": "PUBLIC",
                        "Sensitive": "SENSITIVE",
                        "Classified": "CLASSIFIED",
                    }
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("Public")
                
                @schemas.classproperty
                def SENSITIVE(cls):
                    return cls("Sensitive")
                
                @schemas.classproperty
                def CLASSIFIED(cls):
                    return cls("Classified")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dodConfidentiality':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class contingencyPlanTested(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contingencyPlanTested':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class contingencyPlanTestDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contingencyPlanTestDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class securityReviewDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'securityReviewDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hasOpenPoamItem(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasOpenPoamItem':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hasOpenPoamItem90to120PastScheduledCompletionDate(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasOpenPoamItem90to120PastScheduledCompletionDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hasOpenPoamItem120PlusPastScheudledCompletionDate(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasOpenPoamItem120PlusPastScheudledCompletionDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class impact(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                    }
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'impact':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hasCUI(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasCUI':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hasPII(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasPII':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hasPHI(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasPHI':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ppsmRegistryNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ppsmRegistryNumber':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class interconnectedInformationSystemAndIdentifiers(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'interconnectedInformationSystemAndIdentifiers':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isPiaRequired(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isPiaRequired':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class piaStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Not Started": "NOT_STARTED",
                        "In Progress": "IN_PROGRESS",
                        "Completed": "COMPLETED",
                    }
                
                @schemas.classproperty
                def NOT_STARTED(cls):
                    return cls("Not Started")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("In Progress")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("Completed")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'piaStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class piaDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'piaDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userDefinedField1(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userDefinedField1':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userDefinedField2(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userDefinedField2':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userDefinedField3(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userDefinedField3':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userDefinedField4(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userDefinedField4':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userDefinedField5(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userDefinedField5':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class currentRmfLifecycleStep(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "1 - Categorize": "__CATEGORIZE",
                        "2 - Select": "__SELECT",
                        "3 - Implement": "__IMPLEMENT",
                        "4 - Assess": "__ASSESS",
                        "5 - Authorize": "__AUTHORIZE",
                        "6 - Monitor": "__MONITOR",
                    }
                
                @schemas.classproperty
                def __CATEGORIZE(cls):
                    return cls("1 - Categorize")
                
                @schemas.classproperty
                def __SELECT(cls):
                    return cls("2 - Select")
                
                @schemas.classproperty
                def __IMPLEMENT(cls):
                    return cls("3 - Implement")
                
                @schemas.classproperty
                def __ASSESS(cls):
                    return cls("4 - Assess")
                
                @schemas.classproperty
                def __AUTHORIZE(cls):
                    return cls("5 - Authorize")
                
                @schemas.classproperty
                def __MONITOR(cls):
                    return cls("6 - Monitor")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currentRmfLifecycleStep':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class otherInformation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'otherInformation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reportsForScorecard(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reportsForScorecard':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class highestSystemDataClassification(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'highestSystemDataClassification':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class overallClassification(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'overallClassification':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isHVA(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isHVA':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isFinancialManagement(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isFinancialManagement':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isReciprocity(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isReciprocity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reciprocityExemption(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reciprocityExemption':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cloudComputing(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cloudComputing':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cloudType(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Hybrid": "HYBRID",
                        "Private": "PRIVATE",
                        "Public": "PUBLIC",
                    }
                
                @schemas.classproperty
                def HYBRID(cls):
                    return cls("Hybrid")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("Private")
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("Public")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cloudType':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class atcStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Authority to Connect (ATC)": "AUTHORITY_TO_CONNECT_ATC",
                        "Denial of Authority to Connect (DATC)": "DENIAL_OF_AUTHORITY_TO_CONNECT_DATC",
                        "Not Yet Connected": "NOT_YET_CONNECTED",
                        "Decommissioned": "DECOMMISSIONED",
                    }
                
                @schemas.classproperty
                def AUTHORITY_TO_CONNECT_ATC(cls):
                    return cls("Authority to Connect (ATC)")
                
                @schemas.classproperty
                def DENIAL_OF_AUTHORITY_TO_CONNECT_DATC(cls):
                    return cls("Denial of Authority to Connect (DATC)")
                
                @schemas.classproperty
                def NOT_YET_CONNECTED(cls):
                    return cls("Not Yet Connected")
                
                @schemas.classproperty
                def DECOMMISSIONED(cls):
                    return cls("Decommissioned")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'atcStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isSaaS(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isSaaS':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isPaaS(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isPaaS':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isIaaS(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isIaaS':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class otherServiceModels(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'otherServiceModels':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class needDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'needDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class overallRiskScore(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'overallRiskScore':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isHRR(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isHRR':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class atcDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'atcDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class atcTerminationDate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'atcTerminationDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class systemDevelopmentLifeCycle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systemDevelopmentLifeCycle':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isFISMAReportable(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isFISMAReportable':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class package(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PacGet']:
                        return PacGet
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'package':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class connectivityCcsd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConnectivityCcsd']:
                        return ConnectivityCcsd
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'connectivityCcsd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "registrationCompletionDate": registrationCompletionDate,
                "systemLifeCycleAcquisitionPhase": systemLifeCycleAcquisitionPhase,
                "specialType": specialType,
                "specialTypeDescription": specialTypeDescription,
                "missionPortfolio": missionPortfolio,
                "isNNPI": isNNPI,
                "isRBC": isRBC,
                "isWaiver": isWaiver,
                "programOffice": programOffice,
                "vramId": vramId,
                "systemId": systemId,
                "policy": policy,
                "registrationType": registrationType,
                "name": name,
                "acronym": acronym,
                "description": description,
                "instance": instance,
                "owningOrganization": owningOrganization,
                "secondaryOrganization": secondaryOrganization,
                "versionReleaseNo": versionReleaseNo,
                "systemType": systemType,
                "isNSS": isNSS,
                "isPublicFacing": isPublicFacing,
                "coamsId": coamsId,
                "isTypeAuthorization": isTypeAuthorization,
                "ditprId": ditprId,
                "apmsId": apmsId,
                "vasiId": vasiId,
                "authorizationStatus": authorizationStatus,
                "authorizationDate": authorizationDate,
                "authorizationTerminationDate": authorizationTerminationDate,
                "authorizationLength": authorizationLength,
                "termsForAuth": termsForAuth,
                "securityPlanApprovalStatus": securityPlanApprovalStatus,
                "securityPlanApprovalDate": securityPlanApprovalDate,
                "missionCriticality": missionCriticality,
                "geographicalAssociation": geographicalAssociation,
                "systemOwnership": systemOwnership,
                "governingMissionArea": governingMissionArea,
                "primaryFunctionalArea": primaryFunctionalArea,
                "secondaryFunctionalArea": secondaryFunctionalArea,
                "primaryControlSet": primaryControlSet,
                "confidentiality": confidentiality,
                "integrity": integrity,
                "availability": availability,
                "appliedOverlays": appliedOverlays,
                "rmfActivity": rmfActivity,
                "crossDomainTicket": crossDomainTicket,
                "ditprDonId": ditprDonId,
                "mac": mac,
                "dodConfidentiality": dodConfidentiality,
                "contingencyPlanTested": contingencyPlanTested,
                "contingencyPlanTestDate": contingencyPlanTestDate,
                "securityReviewDate": securityReviewDate,
                "hasOpenPoamItem": hasOpenPoamItem,
                "hasOpenPoamItem90to120PastScheduledCompletionDate": hasOpenPoamItem90to120PastScheduledCompletionDate,
                "hasOpenPoamItem120PlusPastScheudledCompletionDate": hasOpenPoamItem120PlusPastScheudledCompletionDate,
                "impact": impact,
                "hasCUI": hasCUI,
                "hasPII": hasPII,
                "hasPHI": hasPHI,
                "ppsmRegistryNumber": ppsmRegistryNumber,
                "interconnectedInformationSystemAndIdentifiers": interconnectedInformationSystemAndIdentifiers,
                "isPiaRequired": isPiaRequired,
                "piaStatus": piaStatus,
                "piaDate": piaDate,
                "userDefinedField1": userDefinedField1,
                "userDefinedField2": userDefinedField2,
                "userDefinedField3": userDefinedField3,
                "userDefinedField4": userDefinedField4,
                "userDefinedField5": userDefinedField5,
                "currentRmfLifecycleStep": currentRmfLifecycleStep,
                "otherInformation": otherInformation,
                "reportsForScorecard": reportsForScorecard,
                "highestSystemDataClassification": highestSystemDataClassification,
                "overallClassification": overallClassification,
                "isHVA": isHVA,
                "isFinancialManagement": isFinancialManagement,
                "isReciprocity": isReciprocity,
                "reciprocityExemption": reciprocityExemption,
                "cloudComputing": cloudComputing,
                "cloudType": cloudType,
                "atcStatus": atcStatus,
                "isSaaS": isSaaS,
                "isPaaS": isPaaS,
                "isIaaS": isIaaS,
                "otherServiceModels": otherServiceModels,
                "needDate": needDate,
                "overallRiskScore": overallRiskScore,
                "isHRR": isHRR,
                "atcDate": atcDate,
                "atcTerminationDate": atcTerminationDate,
                "systemDevelopmentLifeCycle": systemDevelopmentLifeCycle,
                "isFISMAReportable": isFISMAReportable,
                "package": package,
                "connectivityCcsd": connectivityCcsd,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationCompletionDate"]) -> MetaOapg.properties.registrationCompletionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemLifeCycleAcquisitionPhase"]) -> MetaOapg.properties.systemLifeCycleAcquisitionPhase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialType"]) -> MetaOapg.properties.specialType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialTypeDescription"]) -> MetaOapg.properties.specialTypeDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missionPortfolio"]) -> MetaOapg.properties.missionPortfolio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isNNPI"]) -> MetaOapg.properties.isNNPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRBC"]) -> MetaOapg.properties.isRBC: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isWaiver"]) -> MetaOapg.properties.isWaiver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["programOffice"]) -> MetaOapg.properties.programOffice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vramId"]) -> MetaOapg.properties.vramId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy"]) -> MetaOapg.properties.policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationType"]) -> MetaOapg.properties.registrationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owningOrganization"]) -> MetaOapg.properties.owningOrganization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondaryOrganization"]) -> MetaOapg.properties.secondaryOrganization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionReleaseNo"]) -> MetaOapg.properties.versionReleaseNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemType"]) -> MetaOapg.properties.systemType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isNSS"]) -> MetaOapg.properties.isNSS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPublicFacing"]) -> MetaOapg.properties.isPublicFacing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coamsId"]) -> MetaOapg.properties.coamsId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isTypeAuthorization"]) -> MetaOapg.properties.isTypeAuthorization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ditprId"]) -> MetaOapg.properties.ditprId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apmsId"]) -> MetaOapg.properties.apmsId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vasiId"]) -> MetaOapg.properties.vasiId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationStatus"]) -> MetaOapg.properties.authorizationStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationDate"]) -> MetaOapg.properties.authorizationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationTerminationDate"]) -> MetaOapg.properties.authorizationTerminationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationLength"]) -> MetaOapg.properties.authorizationLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termsForAuth"]) -> MetaOapg.properties.termsForAuth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityPlanApprovalStatus"]) -> MetaOapg.properties.securityPlanApprovalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityPlanApprovalDate"]) -> MetaOapg.properties.securityPlanApprovalDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missionCriticality"]) -> MetaOapg.properties.missionCriticality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geographicalAssociation"]) -> MetaOapg.properties.geographicalAssociation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemOwnership"]) -> MetaOapg.properties.systemOwnership: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["governingMissionArea"]) -> MetaOapg.properties.governingMissionArea: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryFunctionalArea"]) -> MetaOapg.properties.primaryFunctionalArea: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondaryFunctionalArea"]) -> MetaOapg.properties.secondaryFunctionalArea: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryControlSet"]) -> MetaOapg.properties.primaryControlSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidentiality"]) -> MetaOapg.properties.confidentiality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integrity"]) -> MetaOapg.properties.integrity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> MetaOapg.properties.availability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliedOverlays"]) -> MetaOapg.properties.appliedOverlays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rmfActivity"]) -> MetaOapg.properties.rmfActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crossDomainTicket"]) -> MetaOapg.properties.crossDomainTicket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ditprDonId"]) -> MetaOapg.properties.ditprDonId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac"]) -> MetaOapg.properties.mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dodConfidentiality"]) -> MetaOapg.properties.dodConfidentiality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contingencyPlanTested"]) -> MetaOapg.properties.contingencyPlanTested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contingencyPlanTestDate"]) -> MetaOapg.properties.contingencyPlanTestDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityReviewDate"]) -> MetaOapg.properties.securityReviewDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasOpenPoamItem"]) -> MetaOapg.properties.hasOpenPoamItem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasOpenPoamItem90to120PastScheduledCompletionDate"]) -> MetaOapg.properties.hasOpenPoamItem90to120PastScheduledCompletionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasOpenPoamItem120PlusPastScheudledCompletionDate"]) -> MetaOapg.properties.hasOpenPoamItem120PlusPastScheudledCompletionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impact"]) -> MetaOapg.properties.impact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasCUI"]) -> MetaOapg.properties.hasCUI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasPII"]) -> MetaOapg.properties.hasPII: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasPHI"]) -> MetaOapg.properties.hasPHI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppsmRegistryNumber"]) -> MetaOapg.properties.ppsmRegistryNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interconnectedInformationSystemAndIdentifiers"]) -> MetaOapg.properties.interconnectedInformationSystemAndIdentifiers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPiaRequired"]) -> MetaOapg.properties.isPiaRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["piaStatus"]) -> MetaOapg.properties.piaStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["piaDate"]) -> MetaOapg.properties.piaDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField1"]) -> MetaOapg.properties.userDefinedField1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField2"]) -> MetaOapg.properties.userDefinedField2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField3"]) -> MetaOapg.properties.userDefinedField3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField4"]) -> MetaOapg.properties.userDefinedField4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField5"]) -> MetaOapg.properties.userDefinedField5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentRmfLifecycleStep"]) -> MetaOapg.properties.currentRmfLifecycleStep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherInformation"]) -> MetaOapg.properties.otherInformation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportsForScorecard"]) -> MetaOapg.properties.reportsForScorecard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highestSystemDataClassification"]) -> MetaOapg.properties.highestSystemDataClassification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overallClassification"]) -> MetaOapg.properties.overallClassification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHVA"]) -> MetaOapg.properties.isHVA: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFinancialManagement"]) -> MetaOapg.properties.isFinancialManagement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isReciprocity"]) -> MetaOapg.properties.isReciprocity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reciprocityExemption"]) -> MetaOapg.properties.reciprocityExemption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudComputing"]) -> MetaOapg.properties.cloudComputing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudType"]) -> MetaOapg.properties.cloudType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atcStatus"]) -> MetaOapg.properties.atcStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSaaS"]) -> MetaOapg.properties.isSaaS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPaaS"]) -> MetaOapg.properties.isPaaS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isIaaS"]) -> MetaOapg.properties.isIaaS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherServiceModels"]) -> MetaOapg.properties.otherServiceModels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needDate"]) -> MetaOapg.properties.needDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overallRiskScore"]) -> MetaOapg.properties.overallRiskScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHRR"]) -> MetaOapg.properties.isHRR: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atcDate"]) -> MetaOapg.properties.atcDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atcTerminationDate"]) -> MetaOapg.properties.atcTerminationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemDevelopmentLifeCycle"]) -> MetaOapg.properties.systemDevelopmentLifeCycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFISMAReportable"]) -> MetaOapg.properties.isFISMAReportable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["package"]) -> MetaOapg.properties.package: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectivityCcsd"]) -> MetaOapg.properties.connectivityCcsd: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["registrationCompletionDate"], typing_extensions.Literal["systemLifeCycleAcquisitionPhase"], typing_extensions.Literal["specialType"], typing_extensions.Literal["specialTypeDescription"], typing_extensions.Literal["missionPortfolio"], typing_extensions.Literal["isNNPI"], typing_extensions.Literal["isRBC"], typing_extensions.Literal["isWaiver"], typing_extensions.Literal["programOffice"], typing_extensions.Literal["vramId"], typing_extensions.Literal["systemId"], typing_extensions.Literal["policy"], typing_extensions.Literal["registrationType"], typing_extensions.Literal["name"], typing_extensions.Literal["acronym"], typing_extensions.Literal["description"], typing_extensions.Literal["instance"], typing_extensions.Literal["owningOrganization"], typing_extensions.Literal["secondaryOrganization"], typing_extensions.Literal["versionReleaseNo"], typing_extensions.Literal["systemType"], typing_extensions.Literal["isNSS"], typing_extensions.Literal["isPublicFacing"], typing_extensions.Literal["coamsId"], typing_extensions.Literal["isTypeAuthorization"], typing_extensions.Literal["ditprId"], typing_extensions.Literal["apmsId"], typing_extensions.Literal["vasiId"], typing_extensions.Literal["authorizationStatus"], typing_extensions.Literal["authorizationDate"], typing_extensions.Literal["authorizationTerminationDate"], typing_extensions.Literal["authorizationLength"], typing_extensions.Literal["termsForAuth"], typing_extensions.Literal["securityPlanApprovalStatus"], typing_extensions.Literal["securityPlanApprovalDate"], typing_extensions.Literal["missionCriticality"], typing_extensions.Literal["geographicalAssociation"], typing_extensions.Literal["systemOwnership"], typing_extensions.Literal["governingMissionArea"], typing_extensions.Literal["primaryFunctionalArea"], typing_extensions.Literal["secondaryFunctionalArea"], typing_extensions.Literal["primaryControlSet"], typing_extensions.Literal["confidentiality"], typing_extensions.Literal["integrity"], typing_extensions.Literal["availability"], typing_extensions.Literal["appliedOverlays"], typing_extensions.Literal["rmfActivity"], typing_extensions.Literal["crossDomainTicket"], typing_extensions.Literal["ditprDonId"], typing_extensions.Literal["mac"], typing_extensions.Literal["dodConfidentiality"], typing_extensions.Literal["contingencyPlanTested"], typing_extensions.Literal["contingencyPlanTestDate"], typing_extensions.Literal["securityReviewDate"], typing_extensions.Literal["hasOpenPoamItem"], typing_extensions.Literal["hasOpenPoamItem90to120PastScheduledCompletionDate"], typing_extensions.Literal["hasOpenPoamItem120PlusPastScheudledCompletionDate"], typing_extensions.Literal["impact"], typing_extensions.Literal["hasCUI"], typing_extensions.Literal["hasPII"], typing_extensions.Literal["hasPHI"], typing_extensions.Literal["ppsmRegistryNumber"], typing_extensions.Literal["interconnectedInformationSystemAndIdentifiers"], typing_extensions.Literal["isPiaRequired"], typing_extensions.Literal["piaStatus"], typing_extensions.Literal["piaDate"], typing_extensions.Literal["userDefinedField1"], typing_extensions.Literal["userDefinedField2"], typing_extensions.Literal["userDefinedField3"], typing_extensions.Literal["userDefinedField4"], typing_extensions.Literal["userDefinedField5"], typing_extensions.Literal["currentRmfLifecycleStep"], typing_extensions.Literal["otherInformation"], typing_extensions.Literal["reportsForScorecard"], typing_extensions.Literal["highestSystemDataClassification"], typing_extensions.Literal["overallClassification"], typing_extensions.Literal["isHVA"], typing_extensions.Literal["isFinancialManagement"], typing_extensions.Literal["isReciprocity"], typing_extensions.Literal["reciprocityExemption"], typing_extensions.Literal["cloudComputing"], typing_extensions.Literal["cloudType"], typing_extensions.Literal["atcStatus"], typing_extensions.Literal["isSaaS"], typing_extensions.Literal["isPaaS"], typing_extensions.Literal["isIaaS"], typing_extensions.Literal["otherServiceModels"], typing_extensions.Literal["needDate"], typing_extensions.Literal["overallRiskScore"], typing_extensions.Literal["isHRR"], typing_extensions.Literal["atcDate"], typing_extensions.Literal["atcTerminationDate"], typing_extensions.Literal["systemDevelopmentLifeCycle"], typing_extensions.Literal["isFISMAReportable"], typing_extensions.Literal["package"], typing_extensions.Literal["connectivityCcsd"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationCompletionDate"]) -> typing.Union[MetaOapg.properties.registrationCompletionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemLifeCycleAcquisitionPhase"]) -> typing.Union[MetaOapg.properties.systemLifeCycleAcquisitionPhase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialType"]) -> typing.Union[MetaOapg.properties.specialType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialTypeDescription"]) -> typing.Union[MetaOapg.properties.specialTypeDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missionPortfolio"]) -> typing.Union[MetaOapg.properties.missionPortfolio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isNNPI"]) -> typing.Union[MetaOapg.properties.isNNPI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRBC"]) -> typing.Union[MetaOapg.properties.isRBC, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isWaiver"]) -> typing.Union[MetaOapg.properties.isWaiver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["programOffice"]) -> typing.Union[MetaOapg.properties.programOffice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vramId"]) -> typing.Union[MetaOapg.properties.vramId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy"]) -> typing.Union[MetaOapg.properties.policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationType"]) -> typing.Union[MetaOapg.properties.registrationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> typing.Union[MetaOapg.properties.acronym, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owningOrganization"]) -> typing.Union[MetaOapg.properties.owningOrganization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondaryOrganization"]) -> typing.Union[MetaOapg.properties.secondaryOrganization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionReleaseNo"]) -> typing.Union[MetaOapg.properties.versionReleaseNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemType"]) -> typing.Union[MetaOapg.properties.systemType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isNSS"]) -> typing.Union[MetaOapg.properties.isNSS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPublicFacing"]) -> typing.Union[MetaOapg.properties.isPublicFacing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coamsId"]) -> typing.Union[MetaOapg.properties.coamsId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isTypeAuthorization"]) -> typing.Union[MetaOapg.properties.isTypeAuthorization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ditprId"]) -> typing.Union[MetaOapg.properties.ditprId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apmsId"]) -> typing.Union[MetaOapg.properties.apmsId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vasiId"]) -> typing.Union[MetaOapg.properties.vasiId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationStatus"]) -> typing.Union[MetaOapg.properties.authorizationStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationDate"]) -> typing.Union[MetaOapg.properties.authorizationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationTerminationDate"]) -> typing.Union[MetaOapg.properties.authorizationTerminationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationLength"]) -> typing.Union[MetaOapg.properties.authorizationLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termsForAuth"]) -> typing.Union[MetaOapg.properties.termsForAuth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityPlanApprovalStatus"]) -> typing.Union[MetaOapg.properties.securityPlanApprovalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityPlanApprovalDate"]) -> typing.Union[MetaOapg.properties.securityPlanApprovalDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missionCriticality"]) -> typing.Union[MetaOapg.properties.missionCriticality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geographicalAssociation"]) -> typing.Union[MetaOapg.properties.geographicalAssociation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemOwnership"]) -> typing.Union[MetaOapg.properties.systemOwnership, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["governingMissionArea"]) -> typing.Union[MetaOapg.properties.governingMissionArea, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryFunctionalArea"]) -> typing.Union[MetaOapg.properties.primaryFunctionalArea, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondaryFunctionalArea"]) -> typing.Union[MetaOapg.properties.secondaryFunctionalArea, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryControlSet"]) -> typing.Union[MetaOapg.properties.primaryControlSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidentiality"]) -> typing.Union[MetaOapg.properties.confidentiality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integrity"]) -> typing.Union[MetaOapg.properties.integrity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> typing.Union[MetaOapg.properties.availability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliedOverlays"]) -> typing.Union[MetaOapg.properties.appliedOverlays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rmfActivity"]) -> typing.Union[MetaOapg.properties.rmfActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crossDomainTicket"]) -> typing.Union[MetaOapg.properties.crossDomainTicket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ditprDonId"]) -> typing.Union[MetaOapg.properties.ditprDonId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac"]) -> typing.Union[MetaOapg.properties.mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dodConfidentiality"]) -> typing.Union[MetaOapg.properties.dodConfidentiality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contingencyPlanTested"]) -> typing.Union[MetaOapg.properties.contingencyPlanTested, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contingencyPlanTestDate"]) -> typing.Union[MetaOapg.properties.contingencyPlanTestDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityReviewDate"]) -> typing.Union[MetaOapg.properties.securityReviewDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasOpenPoamItem"]) -> typing.Union[MetaOapg.properties.hasOpenPoamItem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasOpenPoamItem90to120PastScheduledCompletionDate"]) -> typing.Union[MetaOapg.properties.hasOpenPoamItem90to120PastScheduledCompletionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasOpenPoamItem120PlusPastScheudledCompletionDate"]) -> typing.Union[MetaOapg.properties.hasOpenPoamItem120PlusPastScheudledCompletionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impact"]) -> typing.Union[MetaOapg.properties.impact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasCUI"]) -> typing.Union[MetaOapg.properties.hasCUI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasPII"]) -> typing.Union[MetaOapg.properties.hasPII, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasPHI"]) -> typing.Union[MetaOapg.properties.hasPHI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppsmRegistryNumber"]) -> typing.Union[MetaOapg.properties.ppsmRegistryNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interconnectedInformationSystemAndIdentifiers"]) -> typing.Union[MetaOapg.properties.interconnectedInformationSystemAndIdentifiers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPiaRequired"]) -> typing.Union[MetaOapg.properties.isPiaRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["piaStatus"]) -> typing.Union[MetaOapg.properties.piaStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["piaDate"]) -> typing.Union[MetaOapg.properties.piaDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField1"]) -> typing.Union[MetaOapg.properties.userDefinedField1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField2"]) -> typing.Union[MetaOapg.properties.userDefinedField2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField3"]) -> typing.Union[MetaOapg.properties.userDefinedField3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField4"]) -> typing.Union[MetaOapg.properties.userDefinedField4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField5"]) -> typing.Union[MetaOapg.properties.userDefinedField5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentRmfLifecycleStep"]) -> typing.Union[MetaOapg.properties.currentRmfLifecycleStep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherInformation"]) -> typing.Union[MetaOapg.properties.otherInformation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportsForScorecard"]) -> typing.Union[MetaOapg.properties.reportsForScorecard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highestSystemDataClassification"]) -> typing.Union[MetaOapg.properties.highestSystemDataClassification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overallClassification"]) -> typing.Union[MetaOapg.properties.overallClassification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHVA"]) -> typing.Union[MetaOapg.properties.isHVA, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFinancialManagement"]) -> typing.Union[MetaOapg.properties.isFinancialManagement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isReciprocity"]) -> typing.Union[MetaOapg.properties.isReciprocity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reciprocityExemption"]) -> typing.Union[MetaOapg.properties.reciprocityExemption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudComputing"]) -> typing.Union[MetaOapg.properties.cloudComputing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudType"]) -> typing.Union[MetaOapg.properties.cloudType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atcStatus"]) -> typing.Union[MetaOapg.properties.atcStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSaaS"]) -> typing.Union[MetaOapg.properties.isSaaS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPaaS"]) -> typing.Union[MetaOapg.properties.isPaaS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isIaaS"]) -> typing.Union[MetaOapg.properties.isIaaS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherServiceModels"]) -> typing.Union[MetaOapg.properties.otherServiceModels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needDate"]) -> typing.Union[MetaOapg.properties.needDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overallRiskScore"]) -> typing.Union[MetaOapg.properties.overallRiskScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHRR"]) -> typing.Union[MetaOapg.properties.isHRR, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atcDate"]) -> typing.Union[MetaOapg.properties.atcDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atcTerminationDate"]) -> typing.Union[MetaOapg.properties.atcTerminationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemDevelopmentLifeCycle"]) -> typing.Union[MetaOapg.properties.systemDevelopmentLifeCycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFISMAReportable"]) -> typing.Union[MetaOapg.properties.isFISMAReportable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["package"]) -> typing.Union[MetaOapg.properties.package, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectivityCcsd"]) -> typing.Union[MetaOapg.properties.connectivityCcsd, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["registrationCompletionDate"], typing_extensions.Literal["systemLifeCycleAcquisitionPhase"], typing_extensions.Literal["specialType"], typing_extensions.Literal["specialTypeDescription"], typing_extensions.Literal["missionPortfolio"], typing_extensions.Literal["isNNPI"], typing_extensions.Literal["isRBC"], typing_extensions.Literal["isWaiver"], typing_extensions.Literal["programOffice"], typing_extensions.Literal["vramId"], typing_extensions.Literal["systemId"], typing_extensions.Literal["policy"], typing_extensions.Literal["registrationType"], typing_extensions.Literal["name"], typing_extensions.Literal["acronym"], typing_extensions.Literal["description"], typing_extensions.Literal["instance"], typing_extensions.Literal["owningOrganization"], typing_extensions.Literal["secondaryOrganization"], typing_extensions.Literal["versionReleaseNo"], typing_extensions.Literal["systemType"], typing_extensions.Literal["isNSS"], typing_extensions.Literal["isPublicFacing"], typing_extensions.Literal["coamsId"], typing_extensions.Literal["isTypeAuthorization"], typing_extensions.Literal["ditprId"], typing_extensions.Literal["apmsId"], typing_extensions.Literal["vasiId"], typing_extensions.Literal["authorizationStatus"], typing_extensions.Literal["authorizationDate"], typing_extensions.Literal["authorizationTerminationDate"], typing_extensions.Literal["authorizationLength"], typing_extensions.Literal["termsForAuth"], typing_extensions.Literal["securityPlanApprovalStatus"], typing_extensions.Literal["securityPlanApprovalDate"], typing_extensions.Literal["missionCriticality"], typing_extensions.Literal["geographicalAssociation"], typing_extensions.Literal["systemOwnership"], typing_extensions.Literal["governingMissionArea"], typing_extensions.Literal["primaryFunctionalArea"], typing_extensions.Literal["secondaryFunctionalArea"], typing_extensions.Literal["primaryControlSet"], typing_extensions.Literal["confidentiality"], typing_extensions.Literal["integrity"], typing_extensions.Literal["availability"], typing_extensions.Literal["appliedOverlays"], typing_extensions.Literal["rmfActivity"], typing_extensions.Literal["crossDomainTicket"], typing_extensions.Literal["ditprDonId"], typing_extensions.Literal["mac"], typing_extensions.Literal["dodConfidentiality"], typing_extensions.Literal["contingencyPlanTested"], typing_extensions.Literal["contingencyPlanTestDate"], typing_extensions.Literal["securityReviewDate"], typing_extensions.Literal["hasOpenPoamItem"], typing_extensions.Literal["hasOpenPoamItem90to120PastScheduledCompletionDate"], typing_extensions.Literal["hasOpenPoamItem120PlusPastScheudledCompletionDate"], typing_extensions.Literal["impact"], typing_extensions.Literal["hasCUI"], typing_extensions.Literal["hasPII"], typing_extensions.Literal["hasPHI"], typing_extensions.Literal["ppsmRegistryNumber"], typing_extensions.Literal["interconnectedInformationSystemAndIdentifiers"], typing_extensions.Literal["isPiaRequired"], typing_extensions.Literal["piaStatus"], typing_extensions.Literal["piaDate"], typing_extensions.Literal["userDefinedField1"], typing_extensions.Literal["userDefinedField2"], typing_extensions.Literal["userDefinedField3"], typing_extensions.Literal["userDefinedField4"], typing_extensions.Literal["userDefinedField5"], typing_extensions.Literal["currentRmfLifecycleStep"], typing_extensions.Literal["otherInformation"], typing_extensions.Literal["reportsForScorecard"], typing_extensions.Literal["highestSystemDataClassification"], typing_extensions.Literal["overallClassification"], typing_extensions.Literal["isHVA"], typing_extensions.Literal["isFinancialManagement"], typing_extensions.Literal["isReciprocity"], typing_extensions.Literal["reciprocityExemption"], typing_extensions.Literal["cloudComputing"], typing_extensions.Literal["cloudType"], typing_extensions.Literal["atcStatus"], typing_extensions.Literal["isSaaS"], typing_extensions.Literal["isPaaS"], typing_extensions.Literal["isIaaS"], typing_extensions.Literal["otherServiceModels"], typing_extensions.Literal["needDate"], typing_extensions.Literal["overallRiskScore"], typing_extensions.Literal["isHRR"], typing_extensions.Literal["atcDate"], typing_extensions.Literal["atcTerminationDate"], typing_extensions.Literal["systemDevelopmentLifeCycle"], typing_extensions.Literal["isFISMAReportable"], typing_extensions.Literal["package"], typing_extensions.Literal["connectivityCcsd"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        registrationCompletionDate: typing.Union[MetaOapg.properties.registrationCompletionDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        systemLifeCycleAcquisitionPhase: typing.Union[MetaOapg.properties.systemLifeCycleAcquisitionPhase, None, str, schemas.Unset] = schemas.unset,
        specialType: typing.Union[MetaOapg.properties.specialType, None, str, schemas.Unset] = schemas.unset,
        specialTypeDescription: typing.Union[MetaOapg.properties.specialTypeDescription, None, str, schemas.Unset] = schemas.unset,
        missionPortfolio: typing.Union[MetaOapg.properties.missionPortfolio, None, str, schemas.Unset] = schemas.unset,
        isNNPI: typing.Union[MetaOapg.properties.isNNPI, None, bool, schemas.Unset] = schemas.unset,
        isRBC: typing.Union[MetaOapg.properties.isRBC, None, bool, schemas.Unset] = schemas.unset,
        isWaiver: typing.Union[MetaOapg.properties.isWaiver, None, bool, schemas.Unset] = schemas.unset,
        programOffice: typing.Union[MetaOapg.properties.programOffice, None, str, schemas.Unset] = schemas.unset,
        vramId: typing.Union[MetaOapg.properties.vramId, None, str, schemas.Unset] = schemas.unset,
        systemId: typing.Union[MetaOapg.properties.systemId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        policy: typing.Union[MetaOapg.properties.policy, None, str, schemas.Unset] = schemas.unset,
        registrationType: typing.Union[MetaOapg.properties.registrationType, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        acronym: typing.Union[MetaOapg.properties.acronym, None, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, None, str, schemas.Unset] = schemas.unset,
        owningOrganization: typing.Union[MetaOapg.properties.owningOrganization, None, str, schemas.Unset] = schemas.unset,
        secondaryOrganization: typing.Union[MetaOapg.properties.secondaryOrganization, None, str, schemas.Unset] = schemas.unset,
        versionReleaseNo: typing.Union[MetaOapg.properties.versionReleaseNo, None, str, schemas.Unset] = schemas.unset,
        systemType: typing.Union[MetaOapg.properties.systemType, None, str, schemas.Unset] = schemas.unset,
        isNSS: typing.Union[MetaOapg.properties.isNSS, None, bool, schemas.Unset] = schemas.unset,
        isPublicFacing: typing.Union[MetaOapg.properties.isPublicFacing, None, bool, schemas.Unset] = schemas.unset,
        coamsId: typing.Union[MetaOapg.properties.coamsId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isTypeAuthorization: typing.Union[MetaOapg.properties.isTypeAuthorization, None, bool, schemas.Unset] = schemas.unset,
        ditprId: typing.Union[MetaOapg.properties.ditprId, str, schemas.Unset] = schemas.unset,
        apmsId: typing.Union[MetaOapg.properties.apmsId, None, str, schemas.Unset] = schemas.unset,
        vasiId: typing.Union[MetaOapg.properties.vasiId, None, str, schemas.Unset] = schemas.unset,
        authorizationStatus: typing.Union[MetaOapg.properties.authorizationStatus, None, str, schemas.Unset] = schemas.unset,
        authorizationDate: typing.Union[MetaOapg.properties.authorizationDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authorizationTerminationDate: typing.Union[MetaOapg.properties.authorizationTerminationDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authorizationLength: typing.Union[MetaOapg.properties.authorizationLength, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        termsForAuth: typing.Union[MetaOapg.properties.termsForAuth, None, str, schemas.Unset] = schemas.unset,
        securityPlanApprovalStatus: typing.Union[MetaOapg.properties.securityPlanApprovalStatus, None, str, schemas.Unset] = schemas.unset,
        securityPlanApprovalDate: typing.Union[MetaOapg.properties.securityPlanApprovalDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        missionCriticality: typing.Union[MetaOapg.properties.missionCriticality, None, str, schemas.Unset] = schemas.unset,
        geographicalAssociation: typing.Union[MetaOapg.properties.geographicalAssociation, None, str, schemas.Unset] = schemas.unset,
        systemOwnership: typing.Union[MetaOapg.properties.systemOwnership, None, str, schemas.Unset] = schemas.unset,
        governingMissionArea: typing.Union[MetaOapg.properties.governingMissionArea, None, str, schemas.Unset] = schemas.unset,
        primaryFunctionalArea: typing.Union[MetaOapg.properties.primaryFunctionalArea, None, str, schemas.Unset] = schemas.unset,
        secondaryFunctionalArea: typing.Union[MetaOapg.properties.secondaryFunctionalArea, None, str, schemas.Unset] = schemas.unset,
        primaryControlSet: typing.Union[MetaOapg.properties.primaryControlSet, None, str, schemas.Unset] = schemas.unset,
        confidentiality: typing.Union[MetaOapg.properties.confidentiality, None, str, schemas.Unset] = schemas.unset,
        integrity: typing.Union[MetaOapg.properties.integrity, None, str, schemas.Unset] = schemas.unset,
        availability: typing.Union[MetaOapg.properties.availability, None, str, schemas.Unset] = schemas.unset,
        appliedOverlays: typing.Union[MetaOapg.properties.appliedOverlays, None, str, schemas.Unset] = schemas.unset,
        rmfActivity: typing.Union[MetaOapg.properties.rmfActivity, None, str, schemas.Unset] = schemas.unset,
        crossDomainTicket: typing.Union[MetaOapg.properties.crossDomainTicket, None, str, schemas.Unset] = schemas.unset,
        ditprDonId: typing.Union[MetaOapg.properties.ditprDonId, None, str, schemas.Unset] = schemas.unset,
        mac: typing.Union[MetaOapg.properties.mac, None, str, schemas.Unset] = schemas.unset,
        dodConfidentiality: typing.Union[MetaOapg.properties.dodConfidentiality, None, str, schemas.Unset] = schemas.unset,
        contingencyPlanTested: typing.Union[MetaOapg.properties.contingencyPlanTested, None, bool, schemas.Unset] = schemas.unset,
        contingencyPlanTestDate: typing.Union[MetaOapg.properties.contingencyPlanTestDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        securityReviewDate: typing.Union[MetaOapg.properties.securityReviewDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hasOpenPoamItem: typing.Union[MetaOapg.properties.hasOpenPoamItem, None, bool, schemas.Unset] = schemas.unset,
        hasOpenPoamItem90to120PastScheduledCompletionDate: typing.Union[MetaOapg.properties.hasOpenPoamItem90to120PastScheduledCompletionDate, None, bool, schemas.Unset] = schemas.unset,
        hasOpenPoamItem120PlusPastScheudledCompletionDate: typing.Union[MetaOapg.properties.hasOpenPoamItem120PlusPastScheudledCompletionDate, None, bool, schemas.Unset] = schemas.unset,
        impact: typing.Union[MetaOapg.properties.impact, None, str, schemas.Unset] = schemas.unset,
        hasCUI: typing.Union[MetaOapg.properties.hasCUI, None, bool, schemas.Unset] = schemas.unset,
        hasPII: typing.Union[MetaOapg.properties.hasPII, None, bool, schemas.Unset] = schemas.unset,
        hasPHI: typing.Union[MetaOapg.properties.hasPHI, None, bool, schemas.Unset] = schemas.unset,
        ppsmRegistryNumber: typing.Union[MetaOapg.properties.ppsmRegistryNumber, None, str, schemas.Unset] = schemas.unset,
        interconnectedInformationSystemAndIdentifiers: typing.Union[MetaOapg.properties.interconnectedInformationSystemAndIdentifiers, None, str, schemas.Unset] = schemas.unset,
        isPiaRequired: typing.Union[MetaOapg.properties.isPiaRequired, None, bool, schemas.Unset] = schemas.unset,
        piaStatus: typing.Union[MetaOapg.properties.piaStatus, None, str, schemas.Unset] = schemas.unset,
        piaDate: typing.Union[MetaOapg.properties.piaDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userDefinedField1: typing.Union[MetaOapg.properties.userDefinedField1, None, str, schemas.Unset] = schemas.unset,
        userDefinedField2: typing.Union[MetaOapg.properties.userDefinedField2, None, str, schemas.Unset] = schemas.unset,
        userDefinedField3: typing.Union[MetaOapg.properties.userDefinedField3, None, str, schemas.Unset] = schemas.unset,
        userDefinedField4: typing.Union[MetaOapg.properties.userDefinedField4, None, str, schemas.Unset] = schemas.unset,
        userDefinedField5: typing.Union[MetaOapg.properties.userDefinedField5, None, str, schemas.Unset] = schemas.unset,
        currentRmfLifecycleStep: typing.Union[MetaOapg.properties.currentRmfLifecycleStep, None, str, schemas.Unset] = schemas.unset,
        otherInformation: typing.Union[MetaOapg.properties.otherInformation, None, str, schemas.Unset] = schemas.unset,
        reportsForScorecard: typing.Union[MetaOapg.properties.reportsForScorecard, None, bool, schemas.Unset] = schemas.unset,
        highestSystemDataClassification: typing.Union[MetaOapg.properties.highestSystemDataClassification, None, str, schemas.Unset] = schemas.unset,
        overallClassification: typing.Union[MetaOapg.properties.overallClassification, None, str, schemas.Unset] = schemas.unset,
        isHVA: typing.Union[MetaOapg.properties.isHVA, None, bool, schemas.Unset] = schemas.unset,
        isFinancialManagement: typing.Union[MetaOapg.properties.isFinancialManagement, None, bool, schemas.Unset] = schemas.unset,
        isReciprocity: typing.Union[MetaOapg.properties.isReciprocity, None, bool, schemas.Unset] = schemas.unset,
        reciprocityExemption: typing.Union[MetaOapg.properties.reciprocityExemption, None, str, schemas.Unset] = schemas.unset,
        cloudComputing: typing.Union[MetaOapg.properties.cloudComputing, None, bool, schemas.Unset] = schemas.unset,
        cloudType: typing.Union[MetaOapg.properties.cloudType, None, str, schemas.Unset] = schemas.unset,
        atcStatus: typing.Union[MetaOapg.properties.atcStatus, None, str, schemas.Unset] = schemas.unset,
        isSaaS: typing.Union[MetaOapg.properties.isSaaS, None, bool, schemas.Unset] = schemas.unset,
        isPaaS: typing.Union[MetaOapg.properties.isPaaS, None, bool, schemas.Unset] = schemas.unset,
        isIaaS: typing.Union[MetaOapg.properties.isIaaS, None, bool, schemas.Unset] = schemas.unset,
        otherServiceModels: typing.Union[MetaOapg.properties.otherServiceModels, None, str, schemas.Unset] = schemas.unset,
        needDate: typing.Union[MetaOapg.properties.needDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        overallRiskScore: typing.Union[MetaOapg.properties.overallRiskScore, None, str, schemas.Unset] = schemas.unset,
        isHRR: typing.Union[MetaOapg.properties.isHRR, None, bool, schemas.Unset] = schemas.unset,
        atcDate: typing.Union[MetaOapg.properties.atcDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        atcTerminationDate: typing.Union[MetaOapg.properties.atcTerminationDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        systemDevelopmentLifeCycle: typing.Union[MetaOapg.properties.systemDevelopmentLifeCycle, None, str, schemas.Unset] = schemas.unset,
        isFISMAReportable: typing.Union[MetaOapg.properties.isFISMAReportable, None, bool, schemas.Unset] = schemas.unset,
        package: typing.Union[MetaOapg.properties.package, list, tuple, None, schemas.Unset] = schemas.unset,
        connectivityCcsd: typing.Union[MetaOapg.properties.connectivityCcsd, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Systems':
        return super().__new__(
            cls,
            *_args,
            registrationCompletionDate=registrationCompletionDate,
            systemLifeCycleAcquisitionPhase=systemLifeCycleAcquisitionPhase,
            specialType=specialType,
            specialTypeDescription=specialTypeDescription,
            missionPortfolio=missionPortfolio,
            isNNPI=isNNPI,
            isRBC=isRBC,
            isWaiver=isWaiver,
            programOffice=programOffice,
            vramId=vramId,
            systemId=systemId,
            policy=policy,
            registrationType=registrationType,
            name=name,
            acronym=acronym,
            description=description,
            instance=instance,
            owningOrganization=owningOrganization,
            secondaryOrganization=secondaryOrganization,
            versionReleaseNo=versionReleaseNo,
            systemType=systemType,
            isNSS=isNSS,
            isPublicFacing=isPublicFacing,
            coamsId=coamsId,
            isTypeAuthorization=isTypeAuthorization,
            ditprId=ditprId,
            apmsId=apmsId,
            vasiId=vasiId,
            authorizationStatus=authorizationStatus,
            authorizationDate=authorizationDate,
            authorizationTerminationDate=authorizationTerminationDate,
            authorizationLength=authorizationLength,
            termsForAuth=termsForAuth,
            securityPlanApprovalStatus=securityPlanApprovalStatus,
            securityPlanApprovalDate=securityPlanApprovalDate,
            missionCriticality=missionCriticality,
            geographicalAssociation=geographicalAssociation,
            systemOwnership=systemOwnership,
            governingMissionArea=governingMissionArea,
            primaryFunctionalArea=primaryFunctionalArea,
            secondaryFunctionalArea=secondaryFunctionalArea,
            primaryControlSet=primaryControlSet,
            confidentiality=confidentiality,
            integrity=integrity,
            availability=availability,
            appliedOverlays=appliedOverlays,
            rmfActivity=rmfActivity,
            crossDomainTicket=crossDomainTicket,
            ditprDonId=ditprDonId,
            mac=mac,
            dodConfidentiality=dodConfidentiality,
            contingencyPlanTested=contingencyPlanTested,
            contingencyPlanTestDate=contingencyPlanTestDate,
            securityReviewDate=securityReviewDate,
            hasOpenPoamItem=hasOpenPoamItem,
            hasOpenPoamItem90to120PastScheduledCompletionDate=hasOpenPoamItem90to120PastScheduledCompletionDate,
            hasOpenPoamItem120PlusPastScheudledCompletionDate=hasOpenPoamItem120PlusPastScheudledCompletionDate,
            impact=impact,
            hasCUI=hasCUI,
            hasPII=hasPII,
            hasPHI=hasPHI,
            ppsmRegistryNumber=ppsmRegistryNumber,
            interconnectedInformationSystemAndIdentifiers=interconnectedInformationSystemAndIdentifiers,
            isPiaRequired=isPiaRequired,
            piaStatus=piaStatus,
            piaDate=piaDate,
            userDefinedField1=userDefinedField1,
            userDefinedField2=userDefinedField2,
            userDefinedField3=userDefinedField3,
            userDefinedField4=userDefinedField4,
            userDefinedField5=userDefinedField5,
            currentRmfLifecycleStep=currentRmfLifecycleStep,
            otherInformation=otherInformation,
            reportsForScorecard=reportsForScorecard,
            highestSystemDataClassification=highestSystemDataClassification,
            overallClassification=overallClassification,
            isHVA=isHVA,
            isFinancialManagement=isFinancialManagement,
            isReciprocity=isReciprocity,
            reciprocityExemption=reciprocityExemption,
            cloudComputing=cloudComputing,
            cloudType=cloudType,
            atcStatus=atcStatus,
            isSaaS=isSaaS,
            isPaaS=isPaaS,
            isIaaS=isIaaS,
            otherServiceModels=otherServiceModels,
            needDate=needDate,
            overallRiskScore=overallRiskScore,
            isHRR=isHRR,
            atcDate=atcDate,
            atcTerminationDate=atcTerminationDate,
            systemDevelopmentLifeCycle=systemDevelopmentLifeCycle,
            isFISMAReportable=isFISMAReportable,
            package=package,
            connectivityCcsd=connectivityCcsd,
            _configuration=_configuration,
        )

from emass_client.model.connectivity_ccsd import ConnectivityCcsd
from emass_client.model.pac_get import PacGet
