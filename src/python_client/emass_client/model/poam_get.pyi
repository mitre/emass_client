# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class PoamGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class externalUid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalUid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            systemId = schemas.Int64Schema
            poamId = schemas.Int64Schema
            displayPoamId = schemas.Int64Schema
            
            
            class isInherited(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isInherited':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class controlAcronym(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'controlAcronym':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cci(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cci':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ONGOING(cls):
                    return cls("Ongoing")
                
                @schemas.classproperty
                def RISK_ACCEPTED(cls):
                    return cls("Risk Accepted")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("Completed")
                
                @schemas.classproperty
                def NOT_APPLICABLE(cls):
                    return cls("Not Applicable")
                
                @schemas.classproperty
                def ARCHIVED(cls):
                    return cls("Archived")
            
            
            class reviewStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Not Approved": "NOT_APPROVED",
                        "Under Review": "UNDER_REVIEW",
                        "Approved": "APPROVED",
                    }
                
                @schemas.classproperty
                def NOT_APPROVED(cls):
                    return cls("Not Approved")
                
                @schemas.classproperty
                def UNDER_REVIEW(cls):
                    return cls("Under Review")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("Approved")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reviewStatus':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            vulnerabilityDescription = schemas.StrSchema
            sourceIdentVuln = schemas.StrSchema
            
            
            class securityChecks(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'securityChecks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class milestones(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MilestonesGet']:
                        return MilestonesGet
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MilestonesGet'], typing.List['MilestonesGet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'milestones':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MilestonesGet':
                    return super().__getitem__(i)
            pocOrganization = schemas.StrSchema
            
            
            class pocFirstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pocFirstName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pocLastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pocLastName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pocEmail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pocEmail':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pocPhoneNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pocPhoneNumber':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class severity(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'severity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class rawSeverity(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "I": "I",
                        "II": "II",
                        "III": "III",
                    }
                
                @schemas.classproperty
                def I(cls):
                    return cls("I")
                
                @schemas.classproperty
                def II(cls):
                    return cls("II")
                
                @schemas.classproperty
                def III(cls):
                    return cls("III")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rawSeverity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class relevanceOfThreat(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relevanceOfThreat':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class likelihood(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'likelihood':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class impact(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'impact':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class impactDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'impactDescription':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class residualRiskLevel(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Very Low": "VERY_LOW",
                        "Low": "LOW",
                        "Moderate": "MODERATE",
                        "High": "HIGH",
                        "Very High": "VERY_HIGH",
                    }
                
                @schemas.classproperty
                def VERY_LOW(cls):
                    return cls("Very Low")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("Low")
                
                @schemas.classproperty
                def MODERATE(cls):
                    return cls("Moderate")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("High")
                
                @schemas.classproperty
                def VERY_HIGH(cls):
                    return cls("Very High")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'residualRiskLevel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class recommendations(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recommendations':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            resources = schemas.StrSchema
            
            
            class scheduledCompletionDate(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduledCompletionDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class completionDate(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'completionDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class extensionDate(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extensionDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class mitigation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mitigation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isActive(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isActive':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "externalUid": externalUid,
                "systemId": systemId,
                "poamId": poamId,
                "displayPoamId": displayPoamId,
                "isInherited": isInherited,
                "controlAcronym": controlAcronym,
                "cci": cci,
                "status": status,
                "reviewStatus": reviewStatus,
                "vulnerabilityDescription": vulnerabilityDescription,
                "sourceIdentVuln": sourceIdentVuln,
                "securityChecks": securityChecks,
                "milestones": milestones,
                "pocOrganization": pocOrganization,
                "pocFirstName": pocFirstName,
                "pocLastName": pocLastName,
                "pocEmail": pocEmail,
                "pocPhoneNumber": pocPhoneNumber,
                "severity": severity,
                "rawSeverity": rawSeverity,
                "relevanceOfThreat": relevanceOfThreat,
                "likelihood": likelihood,
                "impact": impact,
                "impactDescription": impactDescription,
                "residualRiskLevel": residualRiskLevel,
                "recommendations": recommendations,
                "resources": resources,
                "scheduledCompletionDate": scheduledCompletionDate,
                "completionDate": completionDate,
                "extensionDate": extensionDate,
                "comments": comments,
                "mitigation": mitigation,
                "isActive": isActive,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalUid"]) -> MetaOapg.properties.externalUid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poamId"]) -> MetaOapg.properties.poamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayPoamId"]) -> MetaOapg.properties.displayPoamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isInherited"]) -> MetaOapg.properties.isInherited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controlAcronym"]) -> MetaOapg.properties.controlAcronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cci"]) -> MetaOapg.properties.cci: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewStatus"]) -> MetaOapg.properties.reviewStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vulnerabilityDescription"]) -> MetaOapg.properties.vulnerabilityDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceIdentVuln"]) -> MetaOapg.properties.sourceIdentVuln: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityChecks"]) -> MetaOapg.properties.securityChecks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["milestones"]) -> MetaOapg.properties.milestones: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pocOrganization"]) -> MetaOapg.properties.pocOrganization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pocFirstName"]) -> MetaOapg.properties.pocFirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pocLastName"]) -> MetaOapg.properties.pocLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pocEmail"]) -> MetaOapg.properties.pocEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pocPhoneNumber"]) -> MetaOapg.properties.pocPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rawSeverity"]) -> MetaOapg.properties.rawSeverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relevanceOfThreat"]) -> MetaOapg.properties.relevanceOfThreat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likelihood"]) -> MetaOapg.properties.likelihood: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impact"]) -> MetaOapg.properties.impact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impactDescription"]) -> MetaOapg.properties.impactDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residualRiskLevel"]) -> MetaOapg.properties.residualRiskLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recommendations"]) -> MetaOapg.properties.recommendations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> MetaOapg.properties.resources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledCompletionDate"]) -> MetaOapg.properties.scheduledCompletionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionDate"]) -> MetaOapg.properties.completionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extensionDate"]) -> MetaOapg.properties.extensionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mitigation"]) -> MetaOapg.properties.mitigation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["externalUid"], typing_extensions.Literal["systemId"], typing_extensions.Literal["poamId"], typing_extensions.Literal["displayPoamId"], typing_extensions.Literal["isInherited"], typing_extensions.Literal["controlAcronym"], typing_extensions.Literal["cci"], typing_extensions.Literal["status"], typing_extensions.Literal["reviewStatus"], typing_extensions.Literal["vulnerabilityDescription"], typing_extensions.Literal["sourceIdentVuln"], typing_extensions.Literal["securityChecks"], typing_extensions.Literal["milestones"], typing_extensions.Literal["pocOrganization"], typing_extensions.Literal["pocFirstName"], typing_extensions.Literal["pocLastName"], typing_extensions.Literal["pocEmail"], typing_extensions.Literal["pocPhoneNumber"], typing_extensions.Literal["severity"], typing_extensions.Literal["rawSeverity"], typing_extensions.Literal["relevanceOfThreat"], typing_extensions.Literal["likelihood"], typing_extensions.Literal["impact"], typing_extensions.Literal["impactDescription"], typing_extensions.Literal["residualRiskLevel"], typing_extensions.Literal["recommendations"], typing_extensions.Literal["resources"], typing_extensions.Literal["scheduledCompletionDate"], typing_extensions.Literal["completionDate"], typing_extensions.Literal["extensionDate"], typing_extensions.Literal["comments"], typing_extensions.Literal["mitigation"], typing_extensions.Literal["isActive"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalUid"]) -> typing.Union[MetaOapg.properties.externalUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poamId"]) -> typing.Union[MetaOapg.properties.poamId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayPoamId"]) -> typing.Union[MetaOapg.properties.displayPoamId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isInherited"]) -> typing.Union[MetaOapg.properties.isInherited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controlAcronym"]) -> typing.Union[MetaOapg.properties.controlAcronym, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cci"]) -> typing.Union[MetaOapg.properties.cci, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewStatus"]) -> typing.Union[MetaOapg.properties.reviewStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vulnerabilityDescription"]) -> typing.Union[MetaOapg.properties.vulnerabilityDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceIdentVuln"]) -> typing.Union[MetaOapg.properties.sourceIdentVuln, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityChecks"]) -> typing.Union[MetaOapg.properties.securityChecks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["milestones"]) -> typing.Union[MetaOapg.properties.milestones, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pocOrganization"]) -> typing.Union[MetaOapg.properties.pocOrganization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pocFirstName"]) -> typing.Union[MetaOapg.properties.pocFirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pocLastName"]) -> typing.Union[MetaOapg.properties.pocLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pocEmail"]) -> typing.Union[MetaOapg.properties.pocEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pocPhoneNumber"]) -> typing.Union[MetaOapg.properties.pocPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rawSeverity"]) -> typing.Union[MetaOapg.properties.rawSeverity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relevanceOfThreat"]) -> typing.Union[MetaOapg.properties.relevanceOfThreat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likelihood"]) -> typing.Union[MetaOapg.properties.likelihood, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impact"]) -> typing.Union[MetaOapg.properties.impact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impactDescription"]) -> typing.Union[MetaOapg.properties.impactDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residualRiskLevel"]) -> typing.Union[MetaOapg.properties.residualRiskLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recommendations"]) -> typing.Union[MetaOapg.properties.recommendations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union[MetaOapg.properties.resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledCompletionDate"]) -> typing.Union[MetaOapg.properties.scheduledCompletionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionDate"]) -> typing.Union[MetaOapg.properties.completionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extensionDate"]) -> typing.Union[MetaOapg.properties.extensionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mitigation"]) -> typing.Union[MetaOapg.properties.mitigation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["externalUid"], typing_extensions.Literal["systemId"], typing_extensions.Literal["poamId"], typing_extensions.Literal["displayPoamId"], typing_extensions.Literal["isInherited"], typing_extensions.Literal["controlAcronym"], typing_extensions.Literal["cci"], typing_extensions.Literal["status"], typing_extensions.Literal["reviewStatus"], typing_extensions.Literal["vulnerabilityDescription"], typing_extensions.Literal["sourceIdentVuln"], typing_extensions.Literal["securityChecks"], typing_extensions.Literal["milestones"], typing_extensions.Literal["pocOrganization"], typing_extensions.Literal["pocFirstName"], typing_extensions.Literal["pocLastName"], typing_extensions.Literal["pocEmail"], typing_extensions.Literal["pocPhoneNumber"], typing_extensions.Literal["severity"], typing_extensions.Literal["rawSeverity"], typing_extensions.Literal["relevanceOfThreat"], typing_extensions.Literal["likelihood"], typing_extensions.Literal["impact"], typing_extensions.Literal["impactDescription"], typing_extensions.Literal["residualRiskLevel"], typing_extensions.Literal["recommendations"], typing_extensions.Literal["resources"], typing_extensions.Literal["scheduledCompletionDate"], typing_extensions.Literal["completionDate"], typing_extensions.Literal["extensionDate"], typing_extensions.Literal["comments"], typing_extensions.Literal["mitigation"], typing_extensions.Literal["isActive"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        externalUid: typing.Union[MetaOapg.properties.externalUid, None, str, schemas.Unset] = schemas.unset,
        systemId: typing.Union[MetaOapg.properties.systemId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        poamId: typing.Union[MetaOapg.properties.poamId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        displayPoamId: typing.Union[MetaOapg.properties.displayPoamId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isInherited: typing.Union[MetaOapg.properties.isInherited, None, bool, schemas.Unset] = schemas.unset,
        controlAcronym: typing.Union[MetaOapg.properties.controlAcronym, None, str, schemas.Unset] = schemas.unset,
        cci: typing.Union[MetaOapg.properties.cci, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        reviewStatus: typing.Union[MetaOapg.properties.reviewStatus, None, str, schemas.Unset] = schemas.unset,
        vulnerabilityDescription: typing.Union[MetaOapg.properties.vulnerabilityDescription, str, schemas.Unset] = schemas.unset,
        sourceIdentVuln: typing.Union[MetaOapg.properties.sourceIdentVuln, str, schemas.Unset] = schemas.unset,
        securityChecks: typing.Union[MetaOapg.properties.securityChecks, None, str, schemas.Unset] = schemas.unset,
        milestones: typing.Union[MetaOapg.properties.milestones, list, tuple, schemas.Unset] = schemas.unset,
        pocOrganization: typing.Union[MetaOapg.properties.pocOrganization, str, schemas.Unset] = schemas.unset,
        pocFirstName: typing.Union[MetaOapg.properties.pocFirstName, None, str, schemas.Unset] = schemas.unset,
        pocLastName: typing.Union[MetaOapg.properties.pocLastName, None, str, schemas.Unset] = schemas.unset,
        pocEmail: typing.Union[MetaOapg.properties.pocEmail, None, str, schemas.Unset] = schemas.unset,
        pocPhoneNumber: typing.Union[MetaOapg.properties.pocPhoneNumber, None, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, None, str, schemas.Unset] = schemas.unset,
        rawSeverity: typing.Union[MetaOapg.properties.rawSeverity, None, str, schemas.Unset] = schemas.unset,
        relevanceOfThreat: typing.Union[MetaOapg.properties.relevanceOfThreat, None, str, schemas.Unset] = schemas.unset,
        likelihood: typing.Union[MetaOapg.properties.likelihood, None, str, schemas.Unset] = schemas.unset,
        impact: typing.Union[MetaOapg.properties.impact, None, str, schemas.Unset] = schemas.unset,
        impactDescription: typing.Union[MetaOapg.properties.impactDescription, None, str, schemas.Unset] = schemas.unset,
        residualRiskLevel: typing.Union[MetaOapg.properties.residualRiskLevel, None, str, schemas.Unset] = schemas.unset,
        recommendations: typing.Union[MetaOapg.properties.recommendations, None, str, schemas.Unset] = schemas.unset,
        resources: typing.Union[MetaOapg.properties.resources, str, schemas.Unset] = schemas.unset,
        scheduledCompletionDate: typing.Union[MetaOapg.properties.scheduledCompletionDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        completionDate: typing.Union[MetaOapg.properties.completionDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        extensionDate: typing.Union[MetaOapg.properties.extensionDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, None, str, schemas.Unset] = schemas.unset,
        mitigation: typing.Union[MetaOapg.properties.mitigation, None, str, schemas.Unset] = schemas.unset,
        isActive: typing.Union[MetaOapg.properties.isActive, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PoamGet':
        return super().__new__(
            cls,
            *_args,
            externalUid=externalUid,
            systemId=systemId,
            poamId=poamId,
            displayPoamId=displayPoamId,
            isInherited=isInherited,
            controlAcronym=controlAcronym,
            cci=cci,
            status=status,
            reviewStatus=reviewStatus,
            vulnerabilityDescription=vulnerabilityDescription,
            sourceIdentVuln=sourceIdentVuln,
            securityChecks=securityChecks,
            milestones=milestones,
            pocOrganization=pocOrganization,
            pocFirstName=pocFirstName,
            pocLastName=pocLastName,
            pocEmail=pocEmail,
            pocPhoneNumber=pocPhoneNumber,
            severity=severity,
            rawSeverity=rawSeverity,
            relevanceOfThreat=relevanceOfThreat,
            likelihood=likelihood,
            impact=impact,
            impactDescription=impactDescription,
            residualRiskLevel=residualRiskLevel,
            recommendations=recommendations,
            resources=resources,
            scheduledCompletionDate=scheduledCompletionDate,
            completionDate=completionDate,
            extensionDate=extensionDate,
            comments=comments,
            mitigation=mitigation,
            isActive=isActive,
            _configuration=_configuration,
        )

from emass_client.model.milestones_get import MilestonesGet
