# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class WorkflowInstanceGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class workflowUid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowUid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class systemName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systemName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class workflowInstanceId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowInstanceId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class packageName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'packageName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class createdDate(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'createdDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class lastEditedDate(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastEditedDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class lastEditedBy(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastEditedBy':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class workflow(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflow':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class currentStage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currentStage':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class transitions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InstancesTransitions']:
                        return InstancesTransitions
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['InstancesTransitions'], typing.List['InstancesTransitions']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transitions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InstancesTransitions':
                    return super().__getitem__(i)
            __annotations__ = {
                "workflowUid": workflowUid,
                "systemName": systemName,
                "workflowInstanceId": workflowInstanceId,
                "packageName": packageName,
                "createdDate": createdDate,
                "lastEditedDate": lastEditedDate,
                "lastEditedBy": lastEditedBy,
                "workflow": workflow,
                "version": version,
                "currentStage": currentStage,
                "transitions": transitions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowUid"]) -> MetaOapg.properties.workflowUid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemName"]) -> MetaOapg.properties.systemName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowInstanceId"]) -> MetaOapg.properties.workflowInstanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packageName"]) -> MetaOapg.properties.packageName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEditedDate"]) -> MetaOapg.properties.lastEditedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEditedBy"]) -> MetaOapg.properties.lastEditedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflow"]) -> MetaOapg.properties.workflow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentStage"]) -> MetaOapg.properties.currentStage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitions"]) -> MetaOapg.properties.transitions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workflowUid", "systemName", "workflowInstanceId", "packageName", "createdDate", "lastEditedDate", "lastEditedBy", "workflow", "version", "currentStage", "transitions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowUid"]) -> typing.Union[MetaOapg.properties.workflowUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemName"]) -> typing.Union[MetaOapg.properties.systemName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowInstanceId"]) -> typing.Union[MetaOapg.properties.workflowInstanceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packageName"]) -> typing.Union[MetaOapg.properties.packageName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEditedDate"]) -> typing.Union[MetaOapg.properties.lastEditedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEditedBy"]) -> typing.Union[MetaOapg.properties.lastEditedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflow"]) -> typing.Union[MetaOapg.properties.workflow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentStage"]) -> typing.Union[MetaOapg.properties.currentStage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitions"]) -> typing.Union[MetaOapg.properties.transitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workflowUid", "systemName", "workflowInstanceId", "packageName", "createdDate", "lastEditedDate", "lastEditedBy", "workflow", "version", "currentStage", "transitions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        workflowUid: typing.Union[MetaOapg.properties.workflowUid, None, str, schemas.Unset] = schemas.unset,
        systemName: typing.Union[MetaOapg.properties.systemName, None, str, schemas.Unset] = schemas.unset,
        workflowInstanceId: typing.Union[MetaOapg.properties.workflowInstanceId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        packageName: typing.Union[MetaOapg.properties.packageName, None, str, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastEditedDate: typing.Union[MetaOapg.properties.lastEditedDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastEditedBy: typing.Union[MetaOapg.properties.lastEditedBy, None, str, schemas.Unset] = schemas.unset,
        workflow: typing.Union[MetaOapg.properties.workflow, None, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, None, str, schemas.Unset] = schemas.unset,
        currentStage: typing.Union[MetaOapg.properties.currentStage, None, str, schemas.Unset] = schemas.unset,
        transitions: typing.Union[MetaOapg.properties.transitions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowInstanceGet':
        return super().__new__(
            cls,
            *_args,
            workflowUid=workflowUid,
            systemName=systemName,
            workflowInstanceId=workflowInstanceId,
            packageName=packageName,
            createdDate=createdDate,
            lastEditedDate=lastEditedDate,
            lastEditedBy=lastEditedBy,
            workflow=workflow,
            version=version,
            currentStage=currentStage,
            transitions=transitions,
            _configuration=_configuration,
            **kwargs,
        )

from emass_client.model.instances_transitions import InstancesTransitions
