# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class CmmcGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class operation(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADDED": "ADDED",
                        "UPDATED": "UPDATED",
                        "DELETED": "DELETED",
                    }
                
                @schemas.classproperty
                def ADDED(cls):
                    return cls("ADDED")
                
                @schemas.classproperty
                def UPDATED(cls):
                    return cls("UPDATED")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hqOrganizationName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hqOrganizationName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class uei(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uei':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cageCodesInScope(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cageCodesInScope':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class oscName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oscName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class scope(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scope':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class scopeDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scopeDescription':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class awardedCMMCLevel(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'awardedCMMCLevel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class expirationDate(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expirationDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class assessmentId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assessmentId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class modelVersion(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modelVersion':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class highestLevelCageCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'highestLevelCageCode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class certificationUniqueId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'certificationUniqueId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class poam(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'poam':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            overallScore = schemas.Int64Schema
            
            
            class oscAssessmentOfficialLastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oscAssessmentOfficialLastName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class oscAssessmentOfficialFirstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oscAssessmentOfficialFirstName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class oscAssessmentOfficialEmail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oscAssessmentOfficialEmail':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class oscAssessmentOfficialTitle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oscAssessmentOfficialTitle':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ssps(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Ssps']:
                        return Ssps
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ssps':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "operation": operation,
                "hqOrganizationName": hqOrganizationName,
                "uei": uei,
                "cageCodesInScope": cageCodesInScope,
                "oscName": oscName,
                "scope": scope,
                "scopeDescription": scopeDescription,
                "awardedCMMCLevel": awardedCMMCLevel,
                "expirationDate": expirationDate,
                "assessmentId": assessmentId,
                "modelVersion": modelVersion,
                "highestLevelCageCode": highestLevelCageCode,
                "certificationUniqueId": certificationUniqueId,
                "poam": poam,
                "overallScore": overallScore,
                "oscAssessmentOfficialLastName": oscAssessmentOfficialLastName,
                "oscAssessmentOfficialFirstName": oscAssessmentOfficialFirstName,
                "oscAssessmentOfficialEmail": oscAssessmentOfficialEmail,
                "oscAssessmentOfficialTitle": oscAssessmentOfficialTitle,
                "ssps": ssps,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hqOrganizationName"]) -> MetaOapg.properties.hqOrganizationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uei"]) -> MetaOapg.properties.uei: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cageCodesInScope"]) -> MetaOapg.properties.cageCodesInScope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oscName"]) -> MetaOapg.properties.oscName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopeDescription"]) -> MetaOapg.properties.scopeDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awardedCMMCLevel"]) -> MetaOapg.properties.awardedCMMCLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assessmentId"]) -> MetaOapg.properties.assessmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelVersion"]) -> MetaOapg.properties.modelVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highestLevelCageCode"]) -> MetaOapg.properties.highestLevelCageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificationUniqueId"]) -> MetaOapg.properties.certificationUniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poam"]) -> MetaOapg.properties.poam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overallScore"]) -> MetaOapg.properties.overallScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oscAssessmentOfficialLastName"]) -> MetaOapg.properties.oscAssessmentOfficialLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oscAssessmentOfficialFirstName"]) -> MetaOapg.properties.oscAssessmentOfficialFirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oscAssessmentOfficialEmail"]) -> MetaOapg.properties.oscAssessmentOfficialEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oscAssessmentOfficialTitle"]) -> MetaOapg.properties.oscAssessmentOfficialTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssps"]) -> MetaOapg.properties.ssps: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["operation"], typing_extensions.Literal["hqOrganizationName"], typing_extensions.Literal["uei"], typing_extensions.Literal["cageCodesInScope"], typing_extensions.Literal["oscName"], typing_extensions.Literal["scope"], typing_extensions.Literal["scopeDescription"], typing_extensions.Literal["awardedCMMCLevel"], typing_extensions.Literal["expirationDate"], typing_extensions.Literal["assessmentId"], typing_extensions.Literal["modelVersion"], typing_extensions.Literal["highestLevelCageCode"], typing_extensions.Literal["certificationUniqueId"], typing_extensions.Literal["poam"], typing_extensions.Literal["overallScore"], typing_extensions.Literal["oscAssessmentOfficialLastName"], typing_extensions.Literal["oscAssessmentOfficialFirstName"], typing_extensions.Literal["oscAssessmentOfficialEmail"], typing_extensions.Literal["oscAssessmentOfficialTitle"], typing_extensions.Literal["ssps"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union[MetaOapg.properties.operation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hqOrganizationName"]) -> typing.Union[MetaOapg.properties.hqOrganizationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uei"]) -> typing.Union[MetaOapg.properties.uei, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cageCodesInScope"]) -> typing.Union[MetaOapg.properties.cageCodesInScope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oscName"]) -> typing.Union[MetaOapg.properties.oscName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopeDescription"]) -> typing.Union[MetaOapg.properties.scopeDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awardedCMMCLevel"]) -> typing.Union[MetaOapg.properties.awardedCMMCLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assessmentId"]) -> typing.Union[MetaOapg.properties.assessmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelVersion"]) -> typing.Union[MetaOapg.properties.modelVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highestLevelCageCode"]) -> typing.Union[MetaOapg.properties.highestLevelCageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificationUniqueId"]) -> typing.Union[MetaOapg.properties.certificationUniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poam"]) -> typing.Union[MetaOapg.properties.poam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overallScore"]) -> typing.Union[MetaOapg.properties.overallScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oscAssessmentOfficialLastName"]) -> typing.Union[MetaOapg.properties.oscAssessmentOfficialLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oscAssessmentOfficialFirstName"]) -> typing.Union[MetaOapg.properties.oscAssessmentOfficialFirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oscAssessmentOfficialEmail"]) -> typing.Union[MetaOapg.properties.oscAssessmentOfficialEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oscAssessmentOfficialTitle"]) -> typing.Union[MetaOapg.properties.oscAssessmentOfficialTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssps"]) -> typing.Union[MetaOapg.properties.ssps, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["operation"], typing_extensions.Literal["hqOrganizationName"], typing_extensions.Literal["uei"], typing_extensions.Literal["cageCodesInScope"], typing_extensions.Literal["oscName"], typing_extensions.Literal["scope"], typing_extensions.Literal["scopeDescription"], typing_extensions.Literal["awardedCMMCLevel"], typing_extensions.Literal["expirationDate"], typing_extensions.Literal["assessmentId"], typing_extensions.Literal["modelVersion"], typing_extensions.Literal["highestLevelCageCode"], typing_extensions.Literal["certificationUniqueId"], typing_extensions.Literal["poam"], typing_extensions.Literal["overallScore"], typing_extensions.Literal["oscAssessmentOfficialLastName"], typing_extensions.Literal["oscAssessmentOfficialFirstName"], typing_extensions.Literal["oscAssessmentOfficialEmail"], typing_extensions.Literal["oscAssessmentOfficialTitle"], typing_extensions.Literal["ssps"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        operation: typing.Union[MetaOapg.properties.operation, None, str, schemas.Unset] = schemas.unset,
        hqOrganizationName: typing.Union[MetaOapg.properties.hqOrganizationName, None, str, schemas.Unset] = schemas.unset,
        uei: typing.Union[MetaOapg.properties.uei, None, str, schemas.Unset] = schemas.unset,
        cageCodesInScope: typing.Union[MetaOapg.properties.cageCodesInScope, None, str, schemas.Unset] = schemas.unset,
        oscName: typing.Union[MetaOapg.properties.oscName, None, str, schemas.Unset] = schemas.unset,
        scope: typing.Union[MetaOapg.properties.scope, None, str, schemas.Unset] = schemas.unset,
        scopeDescription: typing.Union[MetaOapg.properties.scopeDescription, None, str, schemas.Unset] = schemas.unset,
        awardedCMMCLevel: typing.Union[MetaOapg.properties.awardedCMMCLevel, None, str, schemas.Unset] = schemas.unset,
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        assessmentId: typing.Union[MetaOapg.properties.assessmentId, None, str, schemas.Unset] = schemas.unset,
        modelVersion: typing.Union[MetaOapg.properties.modelVersion, None, str, schemas.Unset] = schemas.unset,
        highestLevelCageCode: typing.Union[MetaOapg.properties.highestLevelCageCode, None, str, schemas.Unset] = schemas.unset,
        certificationUniqueId: typing.Union[MetaOapg.properties.certificationUniqueId, None, str, schemas.Unset] = schemas.unset,
        poam: typing.Union[MetaOapg.properties.poam, None, bool, schemas.Unset] = schemas.unset,
        overallScore: typing.Union[MetaOapg.properties.overallScore, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        oscAssessmentOfficialLastName: typing.Union[MetaOapg.properties.oscAssessmentOfficialLastName, None, str, schemas.Unset] = schemas.unset,
        oscAssessmentOfficialFirstName: typing.Union[MetaOapg.properties.oscAssessmentOfficialFirstName, None, str, schemas.Unset] = schemas.unset,
        oscAssessmentOfficialEmail: typing.Union[MetaOapg.properties.oscAssessmentOfficialEmail, None, str, schemas.Unset] = schemas.unset,
        oscAssessmentOfficialTitle: typing.Union[MetaOapg.properties.oscAssessmentOfficialTitle, None, str, schemas.Unset] = schemas.unset,
        ssps: typing.Union[MetaOapg.properties.ssps, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CmmcGet':
        return super().__new__(
            cls,
            *_args,
            operation=operation,
            hqOrganizationName=hqOrganizationName,
            uei=uei,
            cageCodesInScope=cageCodesInScope,
            oscName=oscName,
            scope=scope,
            scopeDescription=scopeDescription,
            awardedCMMCLevel=awardedCMMCLevel,
            expirationDate=expirationDate,
            assessmentId=assessmentId,
            modelVersion=modelVersion,
            highestLevelCageCode=highestLevelCageCode,
            certificationUniqueId=certificationUniqueId,
            poam=poam,
            overallScore=overallScore,
            oscAssessmentOfficialLastName=oscAssessmentOfficialLastName,
            oscAssessmentOfficialFirstName=oscAssessmentOfficialFirstName,
            oscAssessmentOfficialEmail=oscAssessmentOfficialEmail,
            oscAssessmentOfficialTitle=oscAssessmentOfficialTitle,
            ssps=ssps,
            _configuration=_configuration,
        )

from emass_client.model.ssps import Ssps
