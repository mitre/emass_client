# coding: utf-8

## eMASS API v3.9 Specification

The emass_client_api is a Python client that implements the [Enterprise Mission Assurance Support Service (eMASS)](https://disa.mil/~/media/Files/DISA/Fact-Sheets/eMASS.pdf)
Representational State Transfer (REST) Application Programming Interface (API) specifications.


This Python package was generated from the eMASS API specification:

- API version: v3.9
- Package version: 3.9.0
- Build date: 2023-05-21T19:48:58.553127800-05:00[America/Chicago]

## Requirements.

Python 

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import emass_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import emass_client
```

## Getting Started

In your own code, to use this library to connect and interact with emass_client_api,
you can run the following:

```python

import time
import emass_client
from pprint import pprint
```
## Documentation For Authorization

Authentication information is documented in the [emass_client specification GitHub page](https://mitre.github.io/emass_client/docs/redoc/)

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in emass_client.apis and emass_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from emass_client..default_api import DefaultApi`
- `from emass_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import emass_client
from emass_client.apis import *
from emass_client.models import *
```
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from emass_client import schemas  # noqa: F401


class ControlsRequestPutBody(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    acronym = schemas.StrSchema
                    responsibleEntities = schemas.StrSchema
                    implementationStatus = schemas.StrSchema
                    commonControlProvider = schemas.StrSchema
                    naJustification = schemas.StrSchema
                    controlDesignation = schemas.StrSchema
                    testMethod = schemas.StrSchema
                    estimatedCompletionDate = schemas.IntSchema
                    implementationNarrative = schemas.StrSchema
                    slcmCriticality = schemas.StrSchema
                    slcmFrequency = schemas.StrSchema
                    slcmMethod = schemas.StrSchema
                    slcmReporting = schemas.StrSchema
                    slcmTracking = schemas.StrSchema
                    slcmComments = schemas.StrSchema
                    severity = schemas.StrSchema
                    vulnerabiltySummary = schemas.StrSchema
                    recommendations = schemas.StrSchema
                    relevanceOfThreat = schemas.StrSchema
                    likelihood = schemas.StrSchema
                    impact = schemas.StrSchema
                    impactDescription = schemas.StrSchema
                    residualRiskLevel = schemas.StrSchema
                    __annotations__ = {
                        "acronym": acronym,
                        "responsibleEntities": responsibleEntities,
                        "implementationStatus": implementationStatus,
                        "commonControlProvider": commonControlProvider,
                        "naJustification": naJustification,
                        "controlDesignation": controlDesignation,
                        "testMethod": testMethod,
                        "estimatedCompletionDate": estimatedCompletionDate,
                        "implementationNarrative": implementationNarrative,
                        "slcmCriticality": slcmCriticality,
                        "slcmFrequency": slcmFrequency,
                        "slcmMethod": slcmMethod,
                        "slcmReporting": slcmReporting,
                        "slcmTracking": slcmTracking,
                        "slcmComments": slcmComments,
                        "severity": severity,
                        "vulnerabiltySummary": vulnerabiltySummary,
                        "recommendations": recommendations,
                        "relevanceOfThreat": relevanceOfThreat,
                        "likelihood": likelihood,
                        "impact": impact,
                        "impactDescription": impactDescription,
                        "residualRiskLevel": residualRiskLevel,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["responsibleEntities"]) -> MetaOapg.properties.responsibleEntities: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["implementationStatus"]) -> MetaOapg.properties.implementationStatus: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["commonControlProvider"]) -> MetaOapg.properties.commonControlProvider: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["naJustification"]) -> MetaOapg.properties.naJustification: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["controlDesignation"]) -> MetaOapg.properties.controlDesignation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["testMethod"]) -> MetaOapg.properties.testMethod: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["estimatedCompletionDate"]) -> MetaOapg.properties.estimatedCompletionDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["implementationNarrative"]) -> MetaOapg.properties.implementationNarrative: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slcmCriticality"]) -> MetaOapg.properties.slcmCriticality: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slcmFrequency"]) -> MetaOapg.properties.slcmFrequency: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slcmMethod"]) -> MetaOapg.properties.slcmMethod: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slcmReporting"]) -> MetaOapg.properties.slcmReporting: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slcmTracking"]) -> MetaOapg.properties.slcmTracking: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slcmComments"]) -> MetaOapg.properties.slcmComments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vulnerabiltySummary"]) -> MetaOapg.properties.vulnerabiltySummary: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["recommendations"]) -> MetaOapg.properties.recommendations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["relevanceOfThreat"]) -> MetaOapg.properties.relevanceOfThreat: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["likelihood"]) -> MetaOapg.properties.likelihood: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["impact"]) -> MetaOapg.properties.impact: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["impactDescription"]) -> MetaOapg.properties.impactDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["residualRiskLevel"]) -> MetaOapg.properties.residualRiskLevel: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["acronym", "responsibleEntities", "implementationStatus", "commonControlProvider", "naJustification", "controlDesignation", "testMethod", "estimatedCompletionDate", "implementationNarrative", "slcmCriticality", "slcmFrequency", "slcmMethod", "slcmReporting", "slcmTracking", "slcmComments", "severity", "vulnerabiltySummary", "recommendations", "relevanceOfThreat", "likelihood", "impact", "impactDescription", "residualRiskLevel", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> typing.Union[MetaOapg.properties.acronym, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["responsibleEntities"]) -> typing.Union[MetaOapg.properties.responsibleEntities, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["implementationStatus"]) -> typing.Union[MetaOapg.properties.implementationStatus, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["commonControlProvider"]) -> typing.Union[MetaOapg.properties.commonControlProvider, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["naJustification"]) -> typing.Union[MetaOapg.properties.naJustification, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["controlDesignation"]) -> typing.Union[MetaOapg.properties.controlDesignation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["testMethod"]) -> typing.Union[MetaOapg.properties.testMethod, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["estimatedCompletionDate"]) -> typing.Union[MetaOapg.properties.estimatedCompletionDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["implementationNarrative"]) -> typing.Union[MetaOapg.properties.implementationNarrative, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slcmCriticality"]) -> typing.Union[MetaOapg.properties.slcmCriticality, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slcmFrequency"]) -> typing.Union[MetaOapg.properties.slcmFrequency, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slcmMethod"]) -> typing.Union[MetaOapg.properties.slcmMethod, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slcmReporting"]) -> typing.Union[MetaOapg.properties.slcmReporting, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slcmTracking"]) -> typing.Union[MetaOapg.properties.slcmTracking, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slcmComments"]) -> typing.Union[MetaOapg.properties.slcmComments, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vulnerabiltySummary"]) -> typing.Union[MetaOapg.properties.vulnerabiltySummary, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["recommendations"]) -> typing.Union[MetaOapg.properties.recommendations, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["relevanceOfThreat"]) -> typing.Union[MetaOapg.properties.relevanceOfThreat, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["likelihood"]) -> typing.Union[MetaOapg.properties.likelihood, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["impact"]) -> typing.Union[MetaOapg.properties.impact, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["impactDescription"]) -> typing.Union[MetaOapg.properties.impactDescription, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["residualRiskLevel"]) -> typing.Union[MetaOapg.properties.residualRiskLevel, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acronym", "responsibleEntities", "implementationStatus", "commonControlProvider", "naJustification", "controlDesignation", "testMethod", "estimatedCompletionDate", "implementationNarrative", "slcmCriticality", "slcmFrequency", "slcmMethod", "slcmReporting", "slcmTracking", "slcmComments", "severity", "vulnerabiltySummary", "recommendations", "relevanceOfThreat", "likelihood", "impact", "impactDescription", "residualRiskLevel", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                acronym: typing.Union[MetaOapg.properties.acronym, str, schemas.Unset] = schemas.unset,
                responsibleEntities: typing.Union[MetaOapg.properties.responsibleEntities, str, schemas.Unset] = schemas.unset,
                implementationStatus: typing.Union[MetaOapg.properties.implementationStatus, str, schemas.Unset] = schemas.unset,
                commonControlProvider: typing.Union[MetaOapg.properties.commonControlProvider, str, schemas.Unset] = schemas.unset,
                naJustification: typing.Union[MetaOapg.properties.naJustification, str, schemas.Unset] = schemas.unset,
                controlDesignation: typing.Union[MetaOapg.properties.controlDesignation, str, schemas.Unset] = schemas.unset,
                testMethod: typing.Union[MetaOapg.properties.testMethod, str, schemas.Unset] = schemas.unset,
                estimatedCompletionDate: typing.Union[MetaOapg.properties.estimatedCompletionDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                implementationNarrative: typing.Union[MetaOapg.properties.implementationNarrative, str, schemas.Unset] = schemas.unset,
                slcmCriticality: typing.Union[MetaOapg.properties.slcmCriticality, str, schemas.Unset] = schemas.unset,
                slcmFrequency: typing.Union[MetaOapg.properties.slcmFrequency, str, schemas.Unset] = schemas.unset,
                slcmMethod: typing.Union[MetaOapg.properties.slcmMethod, str, schemas.Unset] = schemas.unset,
                slcmReporting: typing.Union[MetaOapg.properties.slcmReporting, str, schemas.Unset] = schemas.unset,
                slcmTracking: typing.Union[MetaOapg.properties.slcmTracking, str, schemas.Unset] = schemas.unset,
                slcmComments: typing.Union[MetaOapg.properties.slcmComments, str, schemas.Unset] = schemas.unset,
                severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
                vulnerabiltySummary: typing.Union[MetaOapg.properties.vulnerabiltySummary, str, schemas.Unset] = schemas.unset,
                recommendations: typing.Union[MetaOapg.properties.recommendations, str, schemas.Unset] = schemas.unset,
                relevanceOfThreat: typing.Union[MetaOapg.properties.relevanceOfThreat, str, schemas.Unset] = schemas.unset,
                likelihood: typing.Union[MetaOapg.properties.likelihood, str, schemas.Unset] = schemas.unset,
                impact: typing.Union[MetaOapg.properties.impact, str, schemas.Unset] = schemas.unset,
                impactDescription: typing.Union[MetaOapg.properties.impactDescription, str, schemas.Unset] = schemas.unset,
                residualRiskLevel: typing.Union[MetaOapg.properties.residualRiskLevel, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    acronym=acronym,
                    responsibleEntities=responsibleEntities,
                    implementationStatus=implementationStatus,
                    commonControlProvider=commonControlProvider,
                    naJustification=naJustification,
                    controlDesignation=controlDesignation,
                    testMethod=testMethod,
                    estimatedCompletionDate=estimatedCompletionDate,
                    implementationNarrative=implementationNarrative,
                    slcmCriticality=slcmCriticality,
                    slcmFrequency=slcmFrequency,
                    slcmMethod=slcmMethod,
                    slcmReporting=slcmReporting,
                    slcmTracking=slcmTracking,
                    slcmComments=slcmComments,
                    severity=severity,
                    vulnerabiltySummary=vulnerabiltySummary,
                    recommendations=recommendations,
                    relevanceOfThreat=relevanceOfThreat,
                    likelihood=likelihood,
                    impact=impact,
                    impactDescription=impactDescription,
                    residualRiskLevel=residualRiskLevel,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ControlsRequestPutBody':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
